//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace Chailease.AutoDebit.API
{
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IAutoDebitClient
    {
        /// <summary>[Public]取得案件核印資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCaseAuthInfoAsyncServiceModel> GetCaseAuthInfoAsync(int companyId, string aCHRefNo, string caseNo, string contractNo, bool? isFinish, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public]取得案件核印資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCaseAuthInfoAsyncServiceModel> GetCaseAuthInfoAsync(int companyId, string aCHRefNo, string caseNo, string contractNo, bool? isFinish, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>[Public]新增核印案件</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CreateAuthorizationServiceModel>> CreateAuthorizationAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ApplicationInfoDataReqViewModel body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public]新增核印案件</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CreateAuthorizationServiceModel>> CreateAuthorizationAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ApplicationInfoDataReqViewModel body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>[Public]取得核印銀行資訊列表</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetBankInfoAsyncServiceModel> GetBankInfoAsync(int companyId, string aCHBankCode, bool? isUsed, string aCHFpxBankCode, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public]取得核印銀行資訊列表</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetBankInfoAsyncServiceModel> GetBankInfoAsync(int companyId, string aCHBankCode, bool? isUsed, string aCHFpxBankCode, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>[Public]取得案件核印申請案件清單資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCaseAuthListAsyncServiceModel> GetCaseAuthListAsync(int companyId, string aCHRefNo, string caseNo, string contractNo, string aCHBankCode, string aCHAccountId, string aCHAccountNo, bool? onlyNew, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public]取得案件核印申請案件清單資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCaseAuthListAsyncServiceModel> GetCaseAuthListAsync(int companyId, string aCHRefNo, string caseNo, string contractNo, string aCHBankCode, string aCHAccountId, string aCHAccountNo, bool? onlyNew, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>[Public]發送取消核印</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PostCancelCaseAuthServiceModel> PostCancelCaseAuthAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, PostCancelCaseAuthReqViewModel body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public]發送取消核印</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PostCancelCaseAuthServiceModel> PostCancelCaseAuthAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, PostCancelCaseAuthReqViewModel body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>[Public]整批發送核印申請</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateAuthPackageServiceModel> CreateAuthPackageAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CreateAuthPackageReqViewModel body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public]整批發送核印申請</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateAuthPackageServiceModel> CreateAuthPackageAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CreateAuthPackageReqViewModel body, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AutoDebitClient : IAutoDebitClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public AutoDebitClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>[Public]取得案件核印資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetCaseAuthInfoAsyncServiceModel> GetCaseAuthInfoAsync(int companyId, string aCHRefNo, string caseNo, string contractNo, bool? isFinish, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return GetCaseAuthInfoAsync(companyId, aCHRefNo, caseNo, contractNo, isFinish, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public]取得案件核印資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetCaseAuthInfoAsyncServiceModel> GetCaseAuthInfoAsync(int companyId, string aCHRefNo, string caseNo, string contractNo, bool? isFinish, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (companyId == null)
                throw new System.ArgumentNullException("companyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("AutoDebitAuthorization/GetCaseAuthInfoAsync?");
            urlBuilder_.Append(System.Uri.EscapeDataString("CompanyId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(companyId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (aCHRefNo != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ACHRefNo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(aCHRefNo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (caseNo != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CaseNo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseNo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (contractNo != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ContractNo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(contractNo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isFinish != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsFinish") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isFinish, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetCaseAuthInfoAsyncServiceModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GetCaseAuthInfoAsyncServiceModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>[Public]新增核印案件</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CreateAuthorizationServiceModel>> CreateAuthorizationAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ApplicationInfoDataReqViewModel body)
        {
            return CreateAuthorizationAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public]新增核印案件</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CreateAuthorizationServiceModel>> CreateAuthorizationAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ApplicationInfoDataReqViewModel body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("AutoDebitAuthorization/CreateAuthorization");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CreateAuthorizationServiceModel>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<CreateAuthorizationServiceModel>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>[Public]取得核印銀行資訊列表</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetBankInfoAsyncServiceModel> GetBankInfoAsync(int companyId, string aCHBankCode, bool? isUsed, string aCHFpxBankCode, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return GetBankInfoAsync(companyId, aCHBankCode, isUsed, aCHFpxBankCode, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public]取得核印銀行資訊列表</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetBankInfoAsyncServiceModel> GetBankInfoAsync(int companyId, string aCHBankCode, bool? isUsed, string aCHFpxBankCode, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (companyId == null)
                throw new System.ArgumentNullException("companyId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("AutoDebitAuthorization/GetBankInfoAsync?");
            urlBuilder_.Append(System.Uri.EscapeDataString("CompanyId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(companyId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (aCHBankCode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ACHBankCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(aCHBankCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isUsed != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsUsed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isUsed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (aCHFpxBankCode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ACHFpxBankCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(aCHFpxBankCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetBankInfoAsyncServiceModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GetBankInfoAsyncServiceModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>[Public]取得案件核印申請案件清單資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetCaseAuthListAsyncServiceModel> GetCaseAuthListAsync(int companyId, string aCHRefNo, string caseNo, string contractNo, string aCHBankCode, string aCHAccountId, string aCHAccountNo, bool? onlyNew, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return GetCaseAuthListAsync(companyId, aCHRefNo, caseNo, contractNo, aCHBankCode, aCHAccountId, aCHAccountNo, onlyNew, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public]取得案件核印申請案件清單資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetCaseAuthListAsyncServiceModel> GetCaseAuthListAsync(int companyId, string aCHRefNo, string caseNo, string contractNo, string aCHBankCode, string aCHAccountId, string aCHAccountNo, bool? onlyNew, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (companyId == null)
                throw new System.ArgumentNullException("companyId");
    
            if (aCHRefNo == null)
                throw new System.ArgumentNullException("aCHRefNo");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("AutoDebitAuthorization/GetCaseAuthListAsync?");
            urlBuilder_.Append(System.Uri.EscapeDataString("CompanyId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(companyId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("ACHRefNo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(aCHRefNo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (caseNo != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CaseNo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseNo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (contractNo != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ContractNo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(contractNo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (aCHBankCode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ACHBankCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(aCHBankCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (aCHAccountId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ACHAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(aCHAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (aCHAccountNo != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ACHAccountNo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(aCHAccountNo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (onlyNew != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("OnlyNew") + "=").Append(System.Uri.EscapeDataString(ConvertToString(onlyNew, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetCaseAuthListAsyncServiceModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GetCaseAuthListAsyncServiceModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>[Public]發送取消核印</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PostCancelCaseAuthServiceModel> PostCancelCaseAuthAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, PostCancelCaseAuthReqViewModel body)
        {
            return PostCancelCaseAuthAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public]發送取消核印</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PostCancelCaseAuthServiceModel> PostCancelCaseAuthAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, PostCancelCaseAuthReqViewModel body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("AutoDebitAuthorization/PostCancelCaseAuth");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PostCancelCaseAuthServiceModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(PostCancelCaseAuthServiceModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>[Public]整批發送核印申請</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CreateAuthPackageServiceModel> CreateAuthPackageAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CreateAuthPackageReqViewModel body)
        {
            return CreateAuthPackageAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public]整批發送核印申請</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CreateAuthPackageServiceModel> CreateAuthPackageAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CreateAuthPackageReqViewModel body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("AutoDebitAuthorization/CreateAuthPackage");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateAuthPackageServiceModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CreateAuthPackageServiceModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetCaseAuthInfoAsyncServiceModel 
    {
        [Newtonsoft.Json.JsonProperty("achauthFormId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AchauthFormId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("companyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CompanyId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achrefNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string AchrefNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CaseNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ContractNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achauthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AchauthDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achsourceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string AchsourceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achsourceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AchsourceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achauthStatusId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AchauthStatusId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achauthStatusName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string AchauthStatusName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vcifno", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Vcifno { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string IdentityType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string IdentificationType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("custNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CustNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applyTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ApplyTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achauthSendDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AchauthSendDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achbankAprroveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AchbankAprroveDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achsysStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AchsysStartDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achcancelDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AchcancelDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achsetting", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Achsetting { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achbankCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string AchbankCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achbankName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string AchbankName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achaccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AchaccountId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achaccountName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string AchaccountName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achaccountNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AchaccountNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achlimitAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AchlimitAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phoneNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PhoneNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("attachment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Attachment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aotoDebitStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AotoDebitStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("autoDebitStatusString", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string AutoDebitStatusString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applDt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ApplDt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("accountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string AccountType { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApplicationInfoDataReqViewModel 
    {
        [Newtonsoft.Json.JsonProperty("transactionStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TransactionStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transactionSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TransactionSource { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vcifNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VcifNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("custNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identifyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentifyType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("custName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("agreementNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgreementNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nextPaymentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? NextPaymentDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastPaymentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastPaymentDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("salesUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesUserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("salesDept", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SalesDept { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applyUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplyUserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achBankId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AchBankId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AchAccountId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achAccountName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AchAccountName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achAccountNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AchAccountNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achLimitAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double AchLimitAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phoneNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vehicleNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> VehicleNo { get; set; }
    
        /// <summary>公司別</summary>
        [Newtonsoft.Json.JsonProperty("companyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CompanyId { get; set; }
    
        /// <summary>ACH外部溝通KEY</summary>
        [Newtonsoft.Json.JsonProperty("achRefNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AchRefNo { get; set; }
    
        /// <summary>附件資訊</summary>
        [Newtonsoft.Json.JsonProperty("attachment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Attachment { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateAuthorizationServiceModel 
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achAuthFormId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AchAuthFormId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achFormNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AchFormNo { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AchbankInfo 
    {
        [Newtonsoft.Json.JsonProperty("achbankId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AchbankId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achbankCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string AchbankCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achbankName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string AchbankName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("valid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Valid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achfpxBankCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string AchfpxBankCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset UpdateTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updateUserId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string UpdateUserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreateTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createUserId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CreateUserId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetBankInfoAsyncServiceModel 
    {
        /// <summary>是否成功</summary>
        [Newtonsoft.Json.JsonProperty("msgId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MsgId { get; set; }
    
        /// <summary>失敗訊息</summary>
        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }
    
        /// <summary>銀行資料list</summary>
        [Newtonsoft.Json.JsonProperty("achBankList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AchbankInfo> AchBankList { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AchgetCaseAuthInfoServiceModel 
    {
        [Newtonsoft.Json.JsonProperty("achauthFormId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AchauthFormId { get; set; }
    
        /// <summary>公司別</summary>
        [Newtonsoft.Json.JsonProperty("companyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CompanyId { get; set; }
    
        /// <summary>RefNo</summary>
        [Newtonsoft.Json.JsonProperty("achrefNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AchrefNo { get; set; }
    
        /// <summary>核准編號</summary>
        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }
    
        /// <summary>契約編號</summary>
        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }
    
        /// <summary>核印完成日</summary>
        [Newtonsoft.Json.JsonProperty("achauthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AchauthDate { get; set; }
    
        /// <summary>ACH申請來源</summary>
        [Newtonsoft.Json.JsonProperty("achsourceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AchsourceType { get; set; }
    
        /// <summary>ACH申請來源FK</summary>
        [Newtonsoft.Json.JsonProperty("achsourceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AchsourceId { get; set; }
    
        /// <summary>核印申請狀態代碼</summary>
        [Newtonsoft.Json.JsonProperty("achauthStatusId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AchauthStatusId { get; set; }
    
        /// <summary>核印狀態名稱</summary>
        [Newtonsoft.Json.JsonProperty("achauthStatusName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AchauthStatusName { get; set; }
    
        /// <summary>VCIF Key</summary>
        [Newtonsoft.Json.JsonProperty("vcifno", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vcifno { get; set; }
    
        /// <summary>顧客類型</summary>
        [Newtonsoft.Json.JsonProperty("identityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentityType { get; set; }
    
        /// <summary>證件類別</summary>
        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationType { get; set; }
    
        /// <summary>顧客編號</summary>
        [Newtonsoft.Json.JsonProperty("custNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustNo { get; set; }
    
        /// <summary>核印申請時間</summary>
        [Newtonsoft.Json.JsonProperty("applyTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ApplyTime { get; set; }
    
        /// <summary>送核印日</summary>
        [Newtonsoft.Json.JsonProperty("achauthSendDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AchauthSendDate { get; set; }
    
        /// <summary>銀行核准核印日</summary>
        [Newtonsoft.Json.JsonProperty("achbankAprroveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AchbankAprroveDate { get; set; }
    
        /// <summary>此筆核印系統啟用日</summary>
        [Newtonsoft.Json.JsonProperty("achsysStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AchsysStartDate { get; set; }
    
        /// <summary>核印取消日</summary>
        [Newtonsoft.Json.JsonProperty("achcancelDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AchcancelDate { get; set; }
    
        /// <summary>ByCaseNo當前指定帳號標記</summary>
        [Newtonsoft.Json.JsonProperty("achsetting", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Achsetting { get; set; }
    
        /// <summary>ACH申請授扣銀行-代碼</summary>
        [Newtonsoft.Json.JsonProperty("achbankCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AchbankCode { get; set; }
    
        /// <summary>ACH申請授扣銀行-名稱</summary>
        [Newtonsoft.Json.JsonProperty("achbankName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AchbankName { get; set; }
    
        /// <summary>ACH申請帳戶人統編</summary>
        [Newtonsoft.Json.JsonProperty("achaccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AchaccountId { get; set; }
    
        /// <summary>ACH申請帳戶人名稱</summary>
        [Newtonsoft.Json.JsonProperty("achaccountName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AchaccountName { get; set; }
    
        /// <summary>ACH申請帳戶號碼</summary>
        [Newtonsoft.Json.JsonProperty("achaccountNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AchaccountNo { get; set; }
    
        /// <summary>扣款額最高限制</summary>
        [Newtonsoft.Json.JsonProperty("achlimitAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AchlimitAmount { get; set; }
    
        /// <summary>顧客電話</summary>
        [Newtonsoft.Json.JsonProperty("phoneNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNo { get; set; }
    
        /// <summary>顧客EMAIL</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aotoDebitStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AotoDebitStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("autoDebitStatusString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AutoDebitStatusString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applDt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ApplDt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("accountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountType { get; set; }
    
        /// <summary>附件</summary>
        [Newtonsoft.Json.JsonProperty("attachment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Attachment { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetCaseAuthListAsyncServiceModel 
    {
        /// <summary>是否成功</summary>
        [Newtonsoft.Json.JsonProperty("msgId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MsgId { get; set; }
    
        /// <summary>失敗訊息</summary>
        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }
    
        /// <summary>銀行資料list</summary>
        [Newtonsoft.Json.JsonProperty("dataList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AchgetCaseAuthInfoServiceModel> DataList { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PostCancelCaseAuthReqViewModel 
    {
        [Newtonsoft.Json.JsonProperty("achBankCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AchBankCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achAccountNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AchAccountNo { get; set; }
    
        /// <summary>公司別</summary>
        [Newtonsoft.Json.JsonProperty("companyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CompanyId { get; set; }
    
        /// <summary>RefNo</summary>
        [Newtonsoft.Json.JsonProperty("achRefNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AchRefNo { get; set; }
    
        /// <summary>附件資訊</summary>
        [Newtonsoft.Json.JsonProperty("attachment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Attachment { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PostCancelCaseAuthServiceModel 
    {
        /// <summary>是否成功</summary>
        [Newtonsoft.Json.JsonProperty("msgId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MsgId { get; set; }
    
        /// <summary>失敗訊息</summary>
        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApplicationInfoDataPackageReqViewModel 
    {
        [Newtonsoft.Json.JsonProperty("transactionStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TransactionStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transactionSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TransactionSource { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vcifNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VcifNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("custNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identifyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentifyType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("custName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("agreementNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgreementNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nextPaymentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? NextPaymentDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastPaymentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastPaymentDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("salesUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesUserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("salesDept", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SalesDept { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applyUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplyUserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achBankId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AchBankId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AchAccountId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achAccountName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AchAccountName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achAccountNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AchAccountNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achLimitAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double AchLimitAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phoneNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vehicleNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> VehicleNo { get; set; }
    
        /// <summary>附件資訊</summary>
        [Newtonsoft.Json.JsonProperty("attachment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Attachment { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PackageCancelReqViewModel 
    {
        [Newtonsoft.Json.JsonProperty("achBankCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AchBankCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("achAccountNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AchAccountNo { get; set; }
    
        /// <summary>附件資訊</summary>
        [Newtonsoft.Json.JsonProperty("attachment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Attachment { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateAuthPackageReqViewModel 
    {
        /// <summary>公司別</summary>
        [Newtonsoft.Json.JsonProperty("companyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CompanyId { get; set; }
    
        /// <summary>ACH外部溝通KEY</summary>
        [Newtonsoft.Json.JsonProperty("achRefNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AchRefNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("activeList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApplicationInfoDataPackageReqViewModel> ActiveList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cancelList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PackageCancelReqViewModel> CancelList { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateAuthPackageServiceModel 
    {
        /// <summary>是否成功</summary>
        [Newtonsoft.Json.JsonProperty("msgId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MsgId { get; set; }
    
        /// <summary>失敗訊息</summary>
        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }
    
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108