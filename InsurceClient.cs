//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace Chailease.Insurance.API
{
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IInsuranceClient
    {
        /// <summary>[Private] 取得Autolife ToDo 清單, status=(Draft/Approve/Applying)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchAutolifeToDoListRespResponseResult> TodoAsync(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得Autolife ToDo 清單, status=(Draft/Approve/Applying)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchAutolifeToDoListRespResponseResult> TodoAsync(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] Autolife 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerAutolifeRespResponseResult> SaveAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveAutolifeReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] Autolife 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerAutolifeRespResponseResult> SaveAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveAutolifeReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] Autolife 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerAutolifeRespResponseResult> SubmitAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitAutolifeReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] Autolife 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerAutolifeRespResponseResult> SubmitAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitAutolifeReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] Autolife 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerCancelAutolifeRespResponseResult> CancelAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerCancelAutolifeReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] Autolife 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerCancelAutolifeRespResponseResult> CancelAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerCancelAutolifeReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] Autolife 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagerApproveAutolifeRespResponseResult> ApproveAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveAutolifeReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] Autolife 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagerApproveAutolifeRespResponseResult> ApproveAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveAutolifeReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 依 FormNo 查詢Autolife資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAutolifeApplyInfoRespResponseResult> FormNoAsync(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 FormNo 查詢Autolife資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAutolifeApplyInfoRespResponseResult> FormNoAsync(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 依 InsuranceCompanyId 查詢Autolife資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAutolifeApplyInfoRespResponseResult> InsuranceCompanyIdAsync(int insuranceCompanyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 InsuranceCompanyId 查詢Autolife資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetAutolifeApplyInfoRespResponseResult> InsuranceCompanyIdAsync(int insuranceCompanyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 依 InsuranceCompanyId 檢查Autolife資訊是否正在維護中</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BooleanResponseResult> InsuranceCompanyId2Async(int insuranceCompanyId, int masterId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 InsuranceCompanyId 檢查Autolife資訊是否正在維護中</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BooleanResponseResult> InsuranceCompanyId2Async(int insuranceCompanyId, int masterId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 待辦事項筆數</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TodoCountRespListResponseResult> GetTodoListCountAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 待辦事項筆數</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TodoCountRespListResponseResult> GetTodoListCountAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 流程備註紀錄</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProcessLogRespListResponseResult> ProcessLogAsync(string processId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 流程備註紀錄</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProcessLogRespListResponseResult> ProcessLogAsync(string processId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 取得多組系統參數</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SysParamRespListResponseResult> GetParametersAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Collections.Generic.IEnumerable<string> body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得多組系統參數</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SysParamRespListResponseResult> GetParametersAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 取得中租共用下拉式選單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SysParamRespListResponseResult> GetDropDownListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SysParamReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得中租共用下拉式選單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SysParamRespListResponseResult> GetDropDownListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SysParamReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 客戶姓名模糊搜尋取得客戶清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchCustomerInfoListRespResponseResult> SearchCustomerInfoAsync(string customerName, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 客戶姓名模糊搜尋取得客戶清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchCustomerInfoListRespResponseResult> SearchCustomerInfoAsync(string customerName, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 取得保險客戶資料</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerInfoRespResponseResult> GetCustomerInfoAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchCustomerInfoReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得保險客戶資料</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerInfoRespResponseResult> GetCustomerInfoAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchCustomerInfoReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 取得最新的產品清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProductsRespListResponseResult> GetProductListAsync(int companyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得最新的產品清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProductsRespListResponseResult> GetProductListAsync(int companyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Public] 提供Web進件/審查保險公司清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequestInsuranceCompanyListRespResponseResult> RequestInsuranceCompanyListAsync(int? companyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 提供Web進件/審查保險公司清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequestInsuranceCompanyListRespResponseResult> RequestInsuranceCompanyListAsync(int? companyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Public] 提供Web進件/審查指定保險公司的保險試算表</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequestInsuranceCompanyAttListRespResponseResult> RequestInsuranceCompanyListAttAsync(int? companyId, int? insuranceCompanyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 提供Web進件/審查指定保險公司的保險試算表</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequestInsuranceCompanyAttListRespResponseResult> RequestInsuranceCompanyListAttAsync(int? companyId, int? insuranceCompanyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 取得客戶暫收款餘額</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCustomerTempBalanceInfoRespResponseResult> TempBalanceInfoAsync(string identificationType, string idNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得客戶暫收款餘額</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCustomerTempBalanceInfoRespResponseResult> TempBalanceInfoAsync(string identificationType, string idNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 取得 Sales 清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetSalesInfoListRespResponseResult> GetSalesListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得 Sales 清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetSalesInfoListRespResponseResult> GetSalesListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 取得系統可承作幣別</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCurrencyRespResponseResult> GetCurrenciesAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得系統可承作幣別</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCurrencyRespResponseResult> GetCurrenciesAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 查詢供應商清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchDealerListRespResponseResult> DealerListAsync(string dealerName, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢供應商清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchDealerListRespResponseResult> DealerListAsync(string dealerName, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 查詢供應商業務清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchDealerSalesListRespResponseResult> DealerSalesAsync(string dealerCode, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢供應商業務清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchDealerSalesListRespResponseResult> DealerSalesAsync(string dealerCode, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 查詢代理商清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchAgentListRespResponseResult> AgentListAsync(string agentName, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢代理商清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchAgentListRespResponseResult> AgentListAsync(string agentName, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 查詢撥款項目</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetDisbmtItemRespResponseResult> GetDisbmtItemAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢撥款項目</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetDisbmtItemRespResponseResult> GetDisbmtItemAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 取得案件資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchCreditCaseInfoRespResponseResult> GetCreditCaseInfoAsync(string caseNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得案件資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchCreditCaseInfoRespResponseResult> GetCreditCaseInfoAsync(string caseNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 取得擔保品清單</summary>
        /// <param name="caseNo">案件編號</param>
        /// <param name="collateralProperty">擔保品性質</param>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCollateralInfoRespResponseResult> GetCollateralInfoAsync(string caseNo, string collateralProperty, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得擔保品清單</summary>
        /// <param name="caseNo">案件編號</param>
        /// <param name="collateralProperty">擔保品性質</param>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCollateralInfoRespResponseResult> GetCollateralInfoAsync(string caseNo, string collateralProperty, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 查詢保險公司最新資料列表</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchCompanyLastListRespResponseResult> LastAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢保險公司最新資料列表</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchCompanyLastListRespResponseResult> LastAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 查詢保險公司基本資料列表</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchCompanyInfoListRespResponseResult> ListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchCompanyInfoListReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢保險公司基本資料列表</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchCompanyInfoListRespResponseResult> ListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchCompanyInfoListReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 查詢保險公司維護資料列表</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchCompanyEditListRespResponseResult> EditAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchCompanyEditListReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢保險公司維護資料列表</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchCompanyEditListRespResponseResult> EditAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchCompanyEditListReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 取得保險公司 ToDo 清單, status=(Draft/Approve/ReturnedList)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchCompanyTodoListRespResponseResult> Todo2Async(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得保險公司 ToDo 清單, status=(Draft/Approve/ReturnedList)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchCompanyTodoListRespResponseResult> Todo2Async(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 依 CompanyCode 查詢已生效保險公司資訊 (Submited)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCompanyInfoResponseResponseResult> SubmitedAsync(string companyCode, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 CompanyCode 查詢已生效保險公司資訊 (Submited)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCompanyInfoResponseResponseResult> SubmitedAsync(string companyCode, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 依 CompanyCode 查詢維護中保險公司資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCompanyInfoResponseResponseResult> TemporaryAsync(string companyCode, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 CompanyCode 查詢維護中保險公司資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCompanyInfoResponseResponseResult> TemporaryAsync(string companyCode, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 依 FormNo 查詢保險公司資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCompanyInfoResponseResponseResult> FormNo2Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 FormNo 查詢保險公司資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCompanyInfoResponseResponseResult> FormNo2Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 依 CompanyId 查詢保險公司資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCompanyInfoResponseResponseResult> CompanyIdAsync(int companyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 CompanyId 查詢保險公司資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCompanyInfoResponseResponseResult> CompanyIdAsync(int companyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 依 InsuranceCompanyId 查詢保險公司收款/支票</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetInsuranceCompanyInfoResponseResponseResult> InsuranceCompanyId3Async(int insuranceCompanyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 InsuranceCompanyId 查詢保險公司收款/支票</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetInsuranceCompanyInfoResponseResponseResult> InsuranceCompanyId3Async(int insuranceCompanyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 保險公司資料 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerApplyCompanyRespResponseResult> Save2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveCompanyReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 保險公司資料 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerApplyCompanyRespResponseResult> Save2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveCompanyReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 保險公司資料 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerApplyCompanyRespResponseResult> Submit2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitCompanyReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 保險公司資料 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerApplyCompanyRespResponseResult> Submit2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitCompanyReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 保險公司資料 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerCancelCompanyRespResponseResult> Cancel2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerCancelCompanyReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 保險公司資料 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerCancelCompanyRespResponseResult> Cancel2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerCancelCompanyReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 保險公司資料 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagerApproveCompanyInfoRespResponseResult> Approve2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveCompanyInfoReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 保險公司資料 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagerApproveCompanyInfoRespResponseResult> Approve2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveCompanyInfoReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 取得有合作的保險公司正式檔附件</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCompanyAttachRespResponseResult> AttachAsync(int insuranceCompanyId, string documentType, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得有合作的保險公司正式檔附件</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCompanyAttachRespResponseResult> AttachAsync(int insuranceCompanyId, string documentType, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 取得補保單 ToDo 清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchInsuranceForToBePolicyToDoListRespResponseResult> ToBePolicyListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得補保單 ToDo 清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchInsuranceForToBePolicyToDoListRespResponseResult> ToBePolicyListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 取得投保 ToDo 清單, status=(Draft/Approve/ReturnedList)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchDisbursementToDoListRespResponseResult> Todo3Async(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得投保 ToDo 清單, status=(Draft/Approve/ReturnedList)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchDisbursementToDoListRespResponseResult> Todo3Async(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 查詢撥款收款/支票</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchDisbursementInfoRespResponseResult> InfoAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchDisbursementInfoReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢撥款收款/支票</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchDisbursementInfoRespResponseResult> InfoAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchDisbursementInfoReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 查詢撥款項目</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchDisbursementItemRespResponseResult> ItemAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchDisbursementItemReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢撥款項目</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchDisbursementItemRespResponseResult> ItemAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchDisbursementItemReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 撥款 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagerApproveDisbursementRespResponseResult> Approve3Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveDisbursementReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 撥款 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagerApproveDisbursementRespResponseResult> Approve3Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveDisbursementReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 撥款 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerDisbmtApplyRespResponseResult> Save3Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerApplyDisbmtSaveReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 撥款 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerDisbmtApplyRespResponseResult> Save3Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerApplyDisbmtSaveReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 撥款 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerDisbmtApplyRespResponseResult> Submit3Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerApplyDisbmtSubmitReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 撥款 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerDisbmtApplyRespResponseResult> Submit3Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerApplyDisbmtSubmitReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 撥款 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerCancelDisbursementRespResponseResult> Cancel3Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerApplyDisbmtCancelReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 撥款 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerCancelDisbursementRespResponseResult> Cancel3Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerApplyDisbmtCancelReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 依 FormNo 查詢撥款資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetInsuranceDisbursementApplyInfoRespResponseResult> FormNo3Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 FormNo 查詢撥款資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetInsuranceDisbursementApplyInfoRespResponseResult> FormNo3Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Public] 取得報價資料</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequestQuotationDetailResp> RequestQuotationDetailAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestQuotationDetailReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 取得報價資料</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequestQuotationDetailResp> RequestQuotationDetailAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestQuotationDetailReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Public] 取得報價附件</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequestFileListResp> RequestFileListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestFileListReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 取得報價附件</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequestFileListResp> RequestFileListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestFileListReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Public] 取得SMS</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequestSMSURLResp> RequestSMSURLAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestSMSURLReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 取得SMS</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequestSMSURLResp> RequestSMSURLAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestSMSURLReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Public] 寄送EMAIL</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequestEMAILURLResp> RequestEMAILURLAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestEMAILURLReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 寄送EMAIL</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequestEMAILURLResp> RequestEMAILURLAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestEMAILURLReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Public] 付款前先取得交易序號</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequestPayTranIDResp> RequestPayTranIDAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestPayTranIDReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 付款前先取得交易序號</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequestPayTranIDResp> RequestPayTranIDAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestPayTranIDReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Public] 回傳交易結果</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReturnInsurancePayTraninfResp> ReturnInsurancePayTraninfAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ReturnInsurancePayTraninfReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 回傳交易結果</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReturnInsurancePayTraninfResp> ReturnInsurancePayTraninfAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ReturnInsurancePayTraninfReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Public] 回傳報價清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequestQuotationListResp> RequestQuotationListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestQuotationListReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 回傳報價清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequestQuotationListResp> RequestQuotationListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestQuotationListReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Public] 回傳最新報價明細</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequestQuotationLastOneResp> RequestQuotationLastOneAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestQuotationLastOneReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 回傳最新報價明細</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequestQuotationLastOneResp> RequestQuotationLastOneAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestQuotationLastOneReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Public] APP報價申請</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequestNewQuotationResp> RequestNewQuotationAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestNewQuotationReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] APP報價申請</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequestNewQuotationResp> RequestNewQuotationAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestNewQuotationReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Public] 是否購買ROAD TAX</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequestRoadTaxResp> RequestRoadTaxAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestRoadTaxReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 是否購買ROAD TAX</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequestRoadTaxResp> RequestRoadTaxAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestRoadTaxReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 取得FinanceFee ToDo 清單, status=(Draft/Approve/Applying)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchFinanceFeeToDoListRespResponseResult> Todo4Async(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得FinanceFee ToDo 清單, status=(Draft/Approve/Applying)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchFinanceFeeToDoListRespResponseResult> Todo4Async(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] FinanceFee 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerFinanceFeeRespResponseResult> Save4Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveFinanceFeeReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] FinanceFee 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerFinanceFeeRespResponseResult> Save4Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveFinanceFeeReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] FinanceFee 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerFinanceFeeRespResponseResult> Submit4Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitFinanceFeeReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] FinanceFee 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerFinanceFeeRespResponseResult> Submit4Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitFinanceFeeReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] FinanceFee 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerCancelFinanceFeeRespResponseResult> Cancel4Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerCancelFinanceFeeReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] FinanceFee 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerCancelFinanceFeeRespResponseResult> Cancel4Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerCancelFinanceFeeReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] FinanceFee 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagerApproveFinanceFeeRespResponseResult> Approve4Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveFinanceFeeReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] FinanceFee 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagerApproveFinanceFeeRespResponseResult> Approve4Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveFinanceFeeReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 依 FormNo 查詢FinanceFee資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFinanceFeeApplyInfoRespResponseResult> FormNo4Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 FormNo 查詢FinanceFee資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFinanceFeeApplyInfoRespResponseResult> FormNo4Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 查詢審核完成FinanceFee資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFinanceFeeApplyInfoRespResponseResult> QueryAsync(int insuranceCompanyId, string insuranceType, string productCode, string currency, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢審核完成FinanceFee資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetFinanceFeeApplyInfoRespResponseResult> QueryAsync(int insuranceCompanyId, string insuranceType, string productCode, string currency, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 查詢審核完成FinanceFee資訊是否正在維護中</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BooleanResponseResult> CheckAsync(int insuranceCompanyId, string insuranceType, string productCode, string currency, int masterId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢審核完成FinanceFee資訊是否正在維護中</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BooleanResponseResult> CheckAsync(int insuranceCompanyId, string insuranceType, string productCode, string currency, int masterId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Public] 取得保險客戶資料</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InsuranceCustomerInfoRespResponseResult> GetCustomerInfo2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, InsuranceCustomerInfoReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 取得保險客戶資料</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InsuranceCustomerInfoRespResponseResult> GetCustomerInfo2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, InsuranceCustomerInfoReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Public] 取得報價資料</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<QuotationInfoRespResponseResult> Info2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, QuotationInfoReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 取得報價資料</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<QuotationInfoRespResponseResult> Info2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, QuotationInfoReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Public] 產生待報價清單 From 外部系統
        /// 1=WEB進件、2=審查、3=保險、4=保險專區、5=Equotation</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateForQuoteListRespResponseResult> ForQuoteListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CreateForQuoteListReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 產生待報價清單 From 外部系統
        /// 1=WEB進件、2=審查、3=保險、4=保險專區、5=Equotation</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateForQuoteListRespResponseResult> ForQuoteListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CreateForQuoteListReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Public] 產生報價清單 From 外部系統
        /// 1=WEB進件、2=審查、3=保險、4=保險專區、5=Equotation</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateQuoteRespResponseResult> QuoteApplyAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CreateQuoteReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 產生報價清單 From 外部系統
        /// 1=WEB進件、2=審查、3=保險、4=保險專區、5=Equotation</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateQuoteRespResponseResult> QuoteApplyAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CreateQuoteReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Public] 產生待投保清單 From 外部系統
        /// 1=WEB進件、2=審查、3=保險、4=保險專區、5=Equotation</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateForApplyListRespResponseResult> ForApplyListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CreateForApplyListReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 產生待投保清單 From 外部系統
        /// 1=WEB進件、2=審查、3=保險、4=保險專區、5=Equotation</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateForApplyListRespResponseResult> ForApplyListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CreateForApplyListReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Public] 提供WEB/審查解析報價單Excel內容</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ParseExcelQuoteRespResponseResult> ExcelAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ParseExcelQuoteReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 提供WEB/審查解析報價單Excel內容</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ParseExcelQuoteRespResponseResult> ExcelAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ParseExcelQuoteReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Public]起租查詢保險費(還款計畫每期保險資訊)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCaseInsuranceRespResponseResult> GetCaseInsuranceAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, GetCaseInsuranceReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public]起租查詢保險費(還款計畫每期保險資訊)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCaseInsuranceRespResponseResult> GetCaseInsuranceAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, GetCaseInsuranceReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Public]查詢案件下的保險</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCaseInsurancePaymentRespResponseResult> GetCaseInsurancePaymentAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, GetCaseInsuranceReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public]查詢案件下的保險</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCaseInsurancePaymentRespResponseResult> GetCaseInsurancePaymentAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, GetCaseInsuranceReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Public]是否可以起租</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetInsuranceCommencementRespResponseResult> GetInsuranceCommencementAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, GetInsuranceCommencementReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public]是否可以起租</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetInsuranceCommencementRespResponseResult> GetInsuranceCommencementAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, GetInsuranceCommencementReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Public] 計算AutoLife、融資</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CalculateAutoLifeRespResponseResult> CalculateAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CalculateAutoLifeReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 計算AutoLife、融資</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CalculateAutoLifeRespResponseResult> CalculateAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CalculateAutoLifeReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Public] 更新保險撥款狀態</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DisbursementStatusFeedbackRespResponseResult> DisbursementStatusFeedbackAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, DisbursementStatusFeedbackReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 更新保險撥款狀態</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DisbursementStatusFeedbackRespResponseResult> DisbursementStatusFeedbackAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, DisbursementStatusFeedbackReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 取得欄位設定檔</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StringInsuranceApplyColumnSettingRespDictionaryResponseResult> ColumnSettingAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得欄位設定檔</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StringInsuranceApplyColumnSettingRespDictionaryResponseResult> ColumnSettingAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 取得流程中欄位控管</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InsuranceApplyControlRulesRespResponseResult> ControlRulesAsync(int insuranceApplyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得流程中欄位控管</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InsuranceApplyControlRulesRespResponseResult> ControlRulesAsync(int insuranceApplyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 查詢待投保清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ToBeApplyListRespResponseResult> ToBeApplyAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ToBeApplyListReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢待投保清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ToBeApplyListRespResponseResult> ToBeApplyAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ToBeApplyListReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 查詢投保基本資料列表(讀取投保清單)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchApplyInfoListRespResponseResult> List2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchApplyInfoListReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢投保基本資料列表(讀取投保清單)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchApplyInfoListRespResponseResult> List2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchApplyInfoListReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 查詢投保維護資料清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchApplyEditListRespResponseResult> Edit2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchApplyEditListReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢投保維護資料清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchApplyEditListRespResponseResult> Edit2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchApplyEditListReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 取得待投保 ToDo 清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchInsuranceApplyToBeApplyToDoListRespResponseResult> ToBeApplyListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得待投保 ToDo 清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchInsuranceApplyToBeApplyToDoListRespResponseResult> ToBeApplyListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 取得投保 ToDo 清單, status=(Draft/Approve/ReturnedList)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchInsuranceApplyToDoListRespResponseResult> Todo5Async(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得投保 ToDo 清單, status=(Draft/Approve/ReturnedList)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchInsuranceApplyToDoListRespResponseResult> Todo5Async(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 依 FormNo 查詢投保資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetInsuranceApplyInfoRespResponseResult> FormNo5Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 FormNo 查詢投保資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetInsuranceApplyInfoRespResponseResult> FormNo5Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 依 InsuranceNo查詢投保資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetInsuranceApplyInfoRespResponseResult> InsuranceNoAsync(string insuranceNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 InsuranceNo查詢投保資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetInsuranceApplyInfoRespResponseResult> InsuranceNoAsync(string insuranceNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 投保資料 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerInsuranceApplyRespResponseResult> Save5Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveInsuranceApplyReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 投保資料 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerInsuranceApplyRespResponseResult> Save5Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveInsuranceApplyReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 投保資料 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerInsuranceApplyRespResponseResult> Submit5Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitInsuranceApplyReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 投保資料 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerInsuranceApplyRespResponseResult> Submit5Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitInsuranceApplyReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 投保資料 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerCancelInsuranceApplyRespResponseResult> Cancel5Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerCancelInsuranceApplyReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 投保資料 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerCancelInsuranceApplyRespResponseResult> Cancel5Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerCancelInsuranceApplyReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 投保資料 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagerApproveInsuranceApplyRespResponseResult> Approve5Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveInsuranceApplyReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 投保資料 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagerApproveInsuranceApplyRespResponseResult> Approve5Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveInsuranceApplyReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 保單處理申請 可申請查詢</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ToBeProcessingListRespResponseResult> ToBeProcessingAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ToBeProcessingListReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 保單處理申請 可申請查詢</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ToBeProcessingListRespResponseResult> ToBeProcessingAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ToBeProcessingListReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 保單處理查詢</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PolicyProcessingListRespResponseResult> List3Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ToBeProcessingListReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 保單處理查詢</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PolicyProcessingListRespResponseResult> List3Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ToBeProcessingListReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 取得保單處理 ToDo 清單, status=(Draft/Approve/Applying)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchPolicyProcessToDoListRespResponseResult> Todo6Async(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得保單處理 ToDo 清單, status=(Draft/Approve/Applying)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchPolicyProcessToDoListRespResponseResult> Todo6Async(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 取得可保單處理明細</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetToBePolicyProcessInfoRespResponseResult> Info3Async(int insuranceApplyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得可保單處理明細</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetToBePolicyProcessInfoRespResponseResult> Info3Async(int insuranceApplyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 依 FormNo 查詢保單處理資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetPolicyProcessApplyInfoRespResponseResult> Info4Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 FormNo 查詢保單處理資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetPolicyProcessApplyInfoRespResponseResult> Info4Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 保單處理資料 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerApplyProcessingRespResponseResult> Save6Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveProcessingReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 保單處理資料 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerApplyProcessingRespResponseResult> Save6Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveProcessingReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 保單處理資料 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerApplyProcessingRespResponseResult> Submit6Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitProcessingReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 保單處理資料 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerApplyProcessingRespResponseResult> Submit6Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitProcessingReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 保單處理資料 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerCancelProcessingRespResponseResult> Cancel6Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseofficerCancelProcessingReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 保單處理資料 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerCancelProcessingRespResponseResult> Cancel6Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseofficerCancelProcessingReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 保單處理資料 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagerApproveProcessingRespResponseResult> Approve6Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveProcessingReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 保單處理資料 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagerApproveProcessingRespResponseResult> Approve6Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveProcessingReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Public] 提供WEB/審查解析報價單Excel內容</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ParseExcelQuoteRespResponseResult> Excel2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ParseExcelQuoteReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 提供WEB/審查解析報價單Excel內容</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ParseExcelQuoteRespResponseResult> Excel2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ParseExcelQuoteReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 取得欄位設定檔</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StringQuotationColumnSettingRespDictionaryResponseResult> ColumnSetting2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得欄位設定檔</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StringQuotationColumnSettingRespDictionaryResponseResult> ColumnSetting2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 取得報價 Draft 清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchDraftQuoteListRespResponseResult> QuotedAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得報價 Draft 清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchDraftQuoteListRespResponseResult> QuotedAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 取得待報價清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchToBeQuotedListRespResponseResult> ToBeQuotedAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得待報價清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchToBeQuotedListRespResponseResult> ToBeQuotedAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 查詢報價清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchQuotationListRespResponseResult> List4Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchQuotationListReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢報價清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchQuotationListRespResponseResult> List4Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchQuotationListReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 查詢可維護報價清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchQuotationEditListRespResponseResult> Edit3Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchQuotationListReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢可維護報價清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchQuotationEditListRespResponseResult> Edit3Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchQuotationListReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 查詢流程中報價單 (多年度)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<QueryQuotationInfoByFormNoRespResponseResult> InProcessingAsync(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢流程中報價單 (多年度)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<QueryQuotationInfoByFormNoRespResponseResult> InProcessingAsync(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 查詢暫存報價單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<QueryQuotationInfoByQuotedNoRespResponseResult> Temporary2Async(string quotedNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢暫存報價單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<QueryQuotationInfoByQuotedNoRespResponseResult> Temporary2Async(string quotedNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 查詢已完成報價單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<QueryQuotationInfoByQuotedNoRespResponseResult> Submited2Async(string quotedNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢已完成報價單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<QueryQuotationInfoByQuotedNoRespResponseResult> Submited2Async(string quotedNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 經辦報價 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerApplyQuoteRespResponseResult> Save7Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveQuoteReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 經辦報價 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerApplyQuoteRespResponseResult> Save7Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveQuoteReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 經辦報價 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerApplyQuoteRespResponseResult> Submit7Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitQuoteReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 經辦報價 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerApplyQuoteRespResponseResult> Submit7Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitQuoteReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 經辦報價 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerApplyQuoteRespResponseResult> Cancel7Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 經辦報價 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerApplyQuoteRespResponseResult> Cancel7Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 投保查詢已完成報價清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchQuotationListFromApplyRespResponseResult> CompleteAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchQuotationListFromApplyReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 投保查詢已完成報價清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchQuotationListFromApplyRespResponseResult> CompleteAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchQuotationListFromApplyReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 查詢已完成報價的附件 
        /// 1=進件參考附件、2=客戶報價單、3=報價試算表、4=其他</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchQuotationAttachRespResponseResult> Attach2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchQuotationAttachReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢已完成報價的附件 
        /// 1=進件參考附件、2=客戶報價單、3=報價試算表、4=其他</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchQuotationAttachRespResponseResult> Attach2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchQuotationAttachReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 退佣申請 可申請查詢</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ToBeRebateListRespResponseResult> ToBeRebateAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ToBeRebateListReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 退佣申請 可申請查詢</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ToBeRebateListRespResponseResult> ToBeRebateAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ToBeRebateListReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 退佣查詢</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchRebateListRespResponseResult> List5Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchRebateListReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 退佣查詢</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchRebateListRespResponseResult> List5Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchRebateListReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 取得退佣 ToDo 清單, status=(Draft/Approve/Applying)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchRebateToDoListRespResponseResult> Todo7Async(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得退佣 ToDo 清單, status=(Draft/Approve/Applying)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchRebateToDoListRespResponseResult> Todo7Async(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 依 FormNo 查詢退佣資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetRebateApplyInfoRespResponseResult> Info5Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 FormNo 查詢退佣資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetRebateApplyInfoRespResponseResult> Info5Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 依 FormNo 查詢退佣資訊 (ReadOnly)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetRebateApplyReadOnlyInfoRespResponseResult> ReadOnlyAsync(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 FormNo 查詢退佣資訊 (ReadOnly)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetRebateApplyReadOnlyInfoRespResponseResult> ReadOnlyAsync(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 退佣資料 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerApplyRebateCaseRespResponseResult> Save8Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveRebateCaseReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 退佣資料 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerApplyRebateCaseRespResponseResult> Save8Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveRebateCaseReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 退佣資料 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerApplyRebateCaseRespResponseResult> Submit8Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitRebateCaseReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 退佣資料 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseOfficerApplyRebateCaseRespResponseResult> Submit8Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitRebateCaseReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 退佣資料 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseofficerCancelRebateCaseRespResponseResult> Cancel8Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseofficerCancelRebateCaseReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 退佣資料 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseofficerCancelRebateCaseRespResponseResult> Cancel8Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseofficerCancelRebateCaseReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 退佣資料 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagerApproveRebateCaseRespResponseResult> Approve7Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveRebateCaseReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 退佣資料 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagerApproveRebateCaseRespResponseResult> Approve7Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveRebateCaseReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 查詢待續保清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ToBeRenewRespResponseResult> ToBeRenewAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ToBeRenewReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢待續保清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ToBeRenewRespResponseResult> ToBeRenewAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ToBeRenewReq body, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 依FormNo查詢保險到期待處理資料檔</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetInsuranceForRenewInfoRespResponseResult> FormNo6Async(string formNo, int fromSource, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依FormNo查詢保險到期待處理資料檔</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetInsuranceForRenewInfoRespResponseResult> FormNo6Async(string formNo, int fromSource, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken);

        /// <summary>[Private] 更新續保狀態為Reject</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BooleanResponseResult> UpdateStatusToRejectAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, UpdateStatusToRejectReq body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 更新續保狀態為Reject</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BooleanResponseResult> UpdateStatusToRejectAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, UpdateStatusToRejectReq body, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class InsuranceClient : IInsuranceClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public InsuranceClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>[Private] 取得Autolife ToDo 清單, status=(Draft/Approve/Applying)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchAutolifeToDoListRespResponseResult> TodoAsync(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return TodoAsync(status, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得Autolife ToDo 清單, status=(Draft/Approve/Applying)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchAutolifeToDoListRespResponseResult> TodoAsync(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Autolife/Query/Todo/{status}");
            urlBuilder_.Replace("{status}", System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchAutolifeToDoListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchAutolifeToDoListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] Autolife 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseOfficerAutolifeRespResponseResult> SaveAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveAutolifeReq body)
        {
            return SaveAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] Autolife 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseOfficerAutolifeRespResponseResult> SaveAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveAutolifeReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Autolife/CaseOfficer/Save");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseOfficerAutolifeRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CaseOfficerAutolifeRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] Autolife 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseOfficerAutolifeRespResponseResult> SubmitAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitAutolifeReq body)
        {
            return SubmitAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] Autolife 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseOfficerAutolifeRespResponseResult> SubmitAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitAutolifeReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Autolife/CaseOfficer/Submit");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseOfficerAutolifeRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CaseOfficerAutolifeRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] Autolife 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseOfficerCancelAutolifeRespResponseResult> CancelAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerCancelAutolifeReq body)
        {
            return CancelAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] Autolife 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseOfficerCancelAutolifeRespResponseResult> CancelAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerCancelAutolifeReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Autolife/CaseOfficer/Cancel");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseOfficerCancelAutolifeRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CaseOfficerCancelAutolifeRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] Autolife 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ManagerApproveAutolifeRespResponseResult> ApproveAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveAutolifeReq body)
        {
            return ApproveAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] Autolife 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ManagerApproveAutolifeRespResponseResult> ApproveAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveAutolifeReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Autolife/Manager/Approve");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ManagerApproveAutolifeRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ManagerApproveAutolifeRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 依 FormNo 查詢Autolife資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetAutolifeApplyInfoRespResponseResult> FormNoAsync(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return FormNoAsync(formNo, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 FormNo 查詢Autolife資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetAutolifeApplyInfoRespResponseResult> FormNoAsync(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (formNo == null)
                throw new System.ArgumentNullException("formNo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Autolife/Query/FormNo/{formNo}");
            urlBuilder_.Replace("{formNo}", System.Uri.EscapeDataString(ConvertToString(formNo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetAutolifeApplyInfoRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GetAutolifeApplyInfoRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 依 InsuranceCompanyId 查詢Autolife資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetAutolifeApplyInfoRespResponseResult> InsuranceCompanyIdAsync(int insuranceCompanyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return InsuranceCompanyIdAsync(insuranceCompanyId, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 InsuranceCompanyId 查詢Autolife資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetAutolifeApplyInfoRespResponseResult> InsuranceCompanyIdAsync(int insuranceCompanyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (insuranceCompanyId == null)
                throw new System.ArgumentNullException("insuranceCompanyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Autolife/Query/InsuranceCompanyId/{insuranceCompanyId}");
            urlBuilder_.Replace("{insuranceCompanyId}", System.Uri.EscapeDataString(ConvertToString(insuranceCompanyId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetAutolifeApplyInfoRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GetAutolifeApplyInfoRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 依 InsuranceCompanyId 檢查Autolife資訊是否正在維護中</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BooleanResponseResult> InsuranceCompanyId2Async(int insuranceCompanyId, int masterId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return InsuranceCompanyId2Async(insuranceCompanyId, masterId, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 InsuranceCompanyId 檢查Autolife資訊是否正在維護中</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BooleanResponseResult> InsuranceCompanyId2Async(int insuranceCompanyId, int masterId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (insuranceCompanyId == null)
                throw new System.ArgumentNullException("insuranceCompanyId");

            if (masterId == null)
                throw new System.ArgumentNullException("masterId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Autolife/Check/InsuranceCompanyId/{insuranceCompanyId}/{masterId}");
            urlBuilder_.Replace("{insuranceCompanyId}", System.Uri.EscapeDataString(ConvertToString(insuranceCompanyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{masterId}", System.Uri.EscapeDataString(ConvertToString(masterId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BooleanResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(BooleanResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 待辦事項筆數</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TodoCountRespListResponseResult> GetTodoListCountAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return GetTodoListCountAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 待辦事項筆數</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TodoCountRespListResponseResult> GetTodoListCountAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Common/GetTodoListCount");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TodoCountRespListResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(TodoCountRespListResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 流程備註紀錄</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ProcessLogRespListResponseResult> ProcessLogAsync(string processId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return ProcessLogAsync(processId, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 流程備註紀錄</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ProcessLogRespListResponseResult> ProcessLogAsync(string processId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (processId == null)
                throw new System.ArgumentNullException("processId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Common/ProcessLog?");
            urlBuilder_.Append(System.Uri.EscapeDataString("processId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(processId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProcessLogRespListResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ProcessLogRespListResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 取得多組系統參數</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SysParamRespListResponseResult> GetParametersAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Collections.Generic.IEnumerable<string> body)
        {
            return GetParametersAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得多組系統參數</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SysParamRespListResponseResult> GetParametersAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Common/GetParameters");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SysParamRespListResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SysParamRespListResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 取得中租共用下拉式選單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SysParamRespListResponseResult> GetDropDownListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SysParamReq body)
        {
            return GetDropDownListAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得中租共用下拉式選單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SysParamRespListResponseResult> GetDropDownListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SysParamReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Common/GetDropDownList");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SysParamRespListResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SysParamRespListResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 客戶姓名模糊搜尋取得客戶清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchCustomerInfoListRespResponseResult> SearchCustomerInfoAsync(string customerName, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return SearchCustomerInfoAsync(customerName, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 客戶姓名模糊搜尋取得客戶清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchCustomerInfoListRespResponseResult> SearchCustomerInfoAsync(string customerName, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (customerName == null)
                throw new System.ArgumentNullException("customerName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Common/SearchCustomerInfo?");
            urlBuilder_.Append(System.Uri.EscapeDataString("customerName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchCustomerInfoListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchCustomerInfoListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 取得保險客戶資料</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CustomerInfoRespResponseResult> GetCustomerInfoAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchCustomerInfoReq body)
        {
            return GetCustomerInfoAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得保險客戶資料</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CustomerInfoRespResponseResult> GetCustomerInfoAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchCustomerInfoReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Common/GetCustomerInfo");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerInfoRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CustomerInfoRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 取得最新的產品清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ProductsRespListResponseResult> GetProductListAsync(int companyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return GetProductListAsync(companyId, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得最新的產品清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ProductsRespListResponseResult> GetProductListAsync(int companyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (companyId == null)
                throw new System.ArgumentNullException("companyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Common/GetProductList/{companyId}");
            urlBuilder_.Replace("{companyId}", System.Uri.EscapeDataString(ConvertToString(companyId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductsRespListResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ProductsRespListResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Public] 提供Web進件/審查保險公司清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RequestInsuranceCompanyListRespResponseResult> RequestInsuranceCompanyListAsync(int? companyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return RequestInsuranceCompanyListAsync(companyId, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 提供Web進件/審查保險公司清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RequestInsuranceCompanyListRespResponseResult> RequestInsuranceCompanyListAsync(int? companyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Common/Insurance/RequestInsuranceCompanyList?");
            if (companyId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("companyId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(companyId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestInsuranceCompanyListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(RequestInsuranceCompanyListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Public] 提供Web進件/審查指定保險公司的保險試算表</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RequestInsuranceCompanyAttListRespResponseResult> RequestInsuranceCompanyListAttAsync(int? companyId, int? insuranceCompanyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return RequestInsuranceCompanyListAttAsync(companyId, insuranceCompanyId, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 提供Web進件/審查指定保險公司的保險試算表</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RequestInsuranceCompanyAttListRespResponseResult> RequestInsuranceCompanyListAttAsync(int? companyId, int? insuranceCompanyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Common/Insurance/RequestInsuranceCompanyListAtt?");
            if (companyId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("companyId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(companyId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (insuranceCompanyId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("insuranceCompanyId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(insuranceCompanyId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestInsuranceCompanyAttListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(RequestInsuranceCompanyAttListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 取得客戶暫收款餘額</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetCustomerTempBalanceInfoRespResponseResult> TempBalanceInfoAsync(string identificationType, string idNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return TempBalanceInfoAsync(identificationType, idNo, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得客戶暫收款餘額</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetCustomerTempBalanceInfoRespResponseResult> TempBalanceInfoAsync(string identificationType, string idNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (identificationType == null)
                throw new System.ArgumentNullException("identificationType");

            if (idNo == null)
                throw new System.ArgumentNullException("idNo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Common/Reconciliation/TempBalanceInfo?");
            urlBuilder_.Append(System.Uri.EscapeDataString("identificationType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(identificationType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("idNo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idNo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetCustomerTempBalanceInfoRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GetCustomerTempBalanceInfoRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 取得 Sales 清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetSalesInfoListRespResponseResult> GetSalesListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return GetSalesListAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得 Sales 清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetSalesInfoListRespResponseResult> GetSalesListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Common/GetSalesList");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetSalesInfoListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GetSalesInfoListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 取得系統可承作幣別</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetCurrencyRespResponseResult> GetCurrenciesAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return GetCurrenciesAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得系統可承作幣別</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetCurrencyRespResponseResult> GetCurrenciesAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Common/GetCurrencies");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetCurrencyRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GetCurrencyRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 查詢供應商清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchDealerListRespResponseResult> DealerListAsync(string dealerName, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return DealerListAsync(dealerName, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢供應商清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchDealerListRespResponseResult> DealerListAsync(string dealerName, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (dealerName == null)
                throw new System.ArgumentNullException("dealerName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Common/Dealer/DealerList?");
            urlBuilder_.Append(System.Uri.EscapeDataString("dealerName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dealerName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchDealerListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchDealerListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 查詢供應商業務清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchDealerSalesListRespResponseResult> DealerSalesAsync(string dealerCode, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return DealerSalesAsync(dealerCode, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢供應商業務清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchDealerSalesListRespResponseResult> DealerSalesAsync(string dealerCode, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (dealerCode == null)
                throw new System.ArgumentNullException("dealerCode");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Common/Dealer/DealerSales?");
            urlBuilder_.Append(System.Uri.EscapeDataString("dealerCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dealerCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchDealerSalesListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchDealerSalesListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 查詢代理商清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchAgentListRespResponseResult> AgentListAsync(string agentName, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return AgentListAsync(agentName, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢代理商清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchAgentListRespResponseResult> AgentListAsync(string agentName, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (agentName == null)
                throw new System.ArgumentNullException("agentName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Common/Agent/AgentList?");
            urlBuilder_.Append(System.Uri.EscapeDataString("agentName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(agentName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchAgentListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchAgentListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 查詢撥款項目</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetDisbmtItemRespResponseResult> GetDisbmtItemAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return GetDisbmtItemAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢撥款項目</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetDisbmtItemRespResponseResult> GetDisbmtItemAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Common/GetDisbmtItem");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetDisbmtItemRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GetDisbmtItemRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 取得案件資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchCreditCaseInfoRespResponseResult> GetCreditCaseInfoAsync(string caseNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return GetCreditCaseInfoAsync(caseNo, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得案件資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchCreditCaseInfoRespResponseResult> GetCreditCaseInfoAsync(string caseNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Common/Credit/GetCreditCaseInfo/{caseNo}");
            urlBuilder_.Replace("{caseNo}", System.Uri.EscapeDataString(ConvertToString(caseNo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchCreditCaseInfoRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchCreditCaseInfoRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 取得擔保品清單</summary>
        /// <param name="caseNo">案件編號</param>
        /// <param name="collateralProperty">擔保品性質</param>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetCollateralInfoRespResponseResult> GetCollateralInfoAsync(string caseNo, string collateralProperty, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return GetCollateralInfoAsync(caseNo, collateralProperty, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得擔保品清單</summary>
        /// <param name="caseNo">案件編號</param>
        /// <param name="collateralProperty">擔保品性質</param>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetCollateralInfoRespResponseResult> GetCollateralInfoAsync(string caseNo, string collateralProperty, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Common/Credit/GetCollateralInfo/{caseNo}/{collateralProperty}");
            urlBuilder_.Replace("{caseNo}", System.Uri.EscapeDataString(ConvertToString(caseNo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{collateralProperty}", System.Uri.EscapeDataString(ConvertToString(collateralProperty, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetCollateralInfoRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GetCollateralInfoRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 查詢保險公司最新資料列表</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchCompanyLastListRespResponseResult> LastAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return LastAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢保險公司最新資料列表</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchCompanyLastListRespResponseResult> LastAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("CompanyInfo/Query/Last");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchCompanyLastListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchCompanyLastListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 查詢保險公司基本資料列表</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchCompanyInfoListRespResponseResult> ListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchCompanyInfoListReq body)
        {
            return ListAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢保險公司基本資料列表</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchCompanyInfoListRespResponseResult> ListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchCompanyInfoListReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("CompanyInfo/Query/List");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchCompanyInfoListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchCompanyInfoListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 查詢保險公司維護資料列表</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchCompanyEditListRespResponseResult> EditAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchCompanyEditListReq body)
        {
            return EditAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢保險公司維護資料列表</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchCompanyEditListRespResponseResult> EditAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchCompanyEditListReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("CompanyInfo/Query/Edit");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchCompanyEditListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchCompanyEditListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 取得保險公司 ToDo 清單, status=(Draft/Approve/ReturnedList)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchCompanyTodoListRespResponseResult> Todo2Async(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return Todo2Async(status, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得保險公司 ToDo 清單, status=(Draft/Approve/ReturnedList)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchCompanyTodoListRespResponseResult> Todo2Async(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("CompanyInfo/Query/Todo/{status}");
            urlBuilder_.Replace("{status}", System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchCompanyTodoListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchCompanyTodoListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 依 CompanyCode 查詢已生效保險公司資訊 (Submited)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetCompanyInfoResponseResponseResult> SubmitedAsync(string companyCode, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return SubmitedAsync(companyCode, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 CompanyCode 查詢已生效保險公司資訊 (Submited)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetCompanyInfoResponseResponseResult> SubmitedAsync(string companyCode, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("CompanyInfo/Query/CompanyCode/Submited/{companyCode}");
            urlBuilder_.Replace("{companyCode}", System.Uri.EscapeDataString(ConvertToString(companyCode, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetCompanyInfoResponseResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GetCompanyInfoResponseResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 依 CompanyCode 查詢維護中保險公司資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetCompanyInfoResponseResponseResult> TemporaryAsync(string companyCode, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return TemporaryAsync(companyCode, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 CompanyCode 查詢維護中保險公司資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetCompanyInfoResponseResponseResult> TemporaryAsync(string companyCode, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("CompanyInfo/Query/CompanyCode/Temporary/{companyCode}");
            urlBuilder_.Replace("{companyCode}", System.Uri.EscapeDataString(ConvertToString(companyCode, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetCompanyInfoResponseResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GetCompanyInfoResponseResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 依 FormNo 查詢保險公司資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetCompanyInfoResponseResponseResult> FormNo2Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return FormNo2Async(formNo, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 FormNo 查詢保險公司資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetCompanyInfoResponseResponseResult> FormNo2Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("CompanyInfo/Query/FormNo/{formNo}");
            urlBuilder_.Replace("{formNo}", System.Uri.EscapeDataString(ConvertToString(formNo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetCompanyInfoResponseResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GetCompanyInfoResponseResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 依 CompanyId 查詢保險公司資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetCompanyInfoResponseResponseResult> CompanyIdAsync(int companyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return CompanyIdAsync(companyId, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 CompanyId 查詢保險公司資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetCompanyInfoResponseResponseResult> CompanyIdAsync(int companyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (companyId == null)
                throw new System.ArgumentNullException("companyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("CompanyInfo/Query/CompanyId/{companyId}");
            urlBuilder_.Replace("{companyId}", System.Uri.EscapeDataString(ConvertToString(companyId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetCompanyInfoResponseResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GetCompanyInfoResponseResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 依 InsuranceCompanyId 查詢保險公司收款/支票</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetInsuranceCompanyInfoResponseResponseResult> InsuranceCompanyId3Async(int insuranceCompanyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return InsuranceCompanyId3Async(insuranceCompanyId, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 InsuranceCompanyId 查詢保險公司收款/支票</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetInsuranceCompanyInfoResponseResponseResult> InsuranceCompanyId3Async(int insuranceCompanyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (insuranceCompanyId == null)
                throw new System.ArgumentNullException("insuranceCompanyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("CompanyInfo/Query/InsuranceCompanyId/{insuranceCompanyId}");
            urlBuilder_.Replace("{insuranceCompanyId}", System.Uri.EscapeDataString(ConvertToString(insuranceCompanyId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInsuranceCompanyInfoResponseResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GetInsuranceCompanyInfoResponseResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 保險公司資料 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseOfficerApplyCompanyRespResponseResult> Save2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveCompanyReq body)
        {
            return Save2Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 保險公司資料 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseOfficerApplyCompanyRespResponseResult> Save2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveCompanyReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("CompanyInfo/CaseOfficer/Save");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseOfficerApplyCompanyRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CaseOfficerApplyCompanyRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 保險公司資料 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseOfficerApplyCompanyRespResponseResult> Submit2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitCompanyReq body)
        {
            return Submit2Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 保險公司資料 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseOfficerApplyCompanyRespResponseResult> Submit2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitCompanyReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("CompanyInfo/CaseOfficer/Submit");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseOfficerApplyCompanyRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CaseOfficerApplyCompanyRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 保險公司資料 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseOfficerCancelCompanyRespResponseResult> Cancel2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerCancelCompanyReq body)
        {
            return Cancel2Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 保險公司資料 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseOfficerCancelCompanyRespResponseResult> Cancel2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerCancelCompanyReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("CompanyInfo/CaseOfficer/Cancel");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseOfficerCancelCompanyRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CaseOfficerCancelCompanyRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 保險公司資料 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ManagerApproveCompanyInfoRespResponseResult> Approve2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveCompanyInfoReq body)
        {
            return Approve2Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 保險公司資料 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ManagerApproveCompanyInfoRespResponseResult> Approve2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveCompanyInfoReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("CompanyInfo/Manager/Approve");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ManagerApproveCompanyInfoRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ManagerApproveCompanyInfoRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 取得有合作的保險公司正式檔附件</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetCompanyAttachRespResponseResult> AttachAsync(int insuranceCompanyId, string documentType, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return AttachAsync(insuranceCompanyId, documentType, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得有合作的保險公司正式檔附件</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetCompanyAttachRespResponseResult> AttachAsync(int insuranceCompanyId, string documentType, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (insuranceCompanyId == null)
                throw new System.ArgumentNullException("insuranceCompanyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("CompanyInfo/Query/Attach/{insuranceCompanyId}/{documentType}");
            urlBuilder_.Replace("{insuranceCompanyId}", System.Uri.EscapeDataString(ConvertToString(insuranceCompanyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{documentType}", System.Uri.EscapeDataString(ConvertToString(documentType, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetCompanyAttachRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GetCompanyAttachRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 取得補保單 ToDo 清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchInsuranceForToBePolicyToDoListRespResponseResult> ToBePolicyListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return ToBePolicyListAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得補保單 ToDo 清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchInsuranceForToBePolicyToDoListRespResponseResult> ToBePolicyListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Disbursement/Query/Todo/ToBePolicyList");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchInsuranceForToBePolicyToDoListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchInsuranceForToBePolicyToDoListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 取得投保 ToDo 清單, status=(Draft/Approve/ReturnedList)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchDisbursementToDoListRespResponseResult> Todo3Async(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return Todo3Async(status, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得投保 ToDo 清單, status=(Draft/Approve/ReturnedList)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchDisbursementToDoListRespResponseResult> Todo3Async(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Disbursement/Query/Todo/{status}");
            urlBuilder_.Replace("{status}", System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchDisbursementToDoListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchDisbursementToDoListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 查詢撥款收款/支票</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchDisbursementInfoRespResponseResult> InfoAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchDisbursementInfoReq body)
        {
            return InfoAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢撥款收款/支票</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchDisbursementInfoRespResponseResult> InfoAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchDisbursementInfoReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Disbursement/Query/Info");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchDisbursementInfoRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchDisbursementInfoRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 查詢撥款項目</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchDisbursementItemRespResponseResult> ItemAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchDisbursementItemReq body)
        {
            return ItemAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢撥款項目</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchDisbursementItemRespResponseResult> ItemAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchDisbursementItemReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Disbursement/Query/Item");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchDisbursementItemRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchDisbursementItemRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 撥款 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ManagerApproveDisbursementRespResponseResult> Approve3Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveDisbursementReq body)
        {
            return Approve3Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 撥款 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ManagerApproveDisbursementRespResponseResult> Approve3Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveDisbursementReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Disbursement/Manager/Approve");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ManagerApproveDisbursementRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ManagerApproveDisbursementRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 撥款 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseOfficerDisbmtApplyRespResponseResult> Save3Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerApplyDisbmtSaveReq body)
        {
            return Save3Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 撥款 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseOfficerDisbmtApplyRespResponseResult> Save3Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerApplyDisbmtSaveReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Disbursement/CaseOfficer/Save");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseOfficerDisbmtApplyRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CaseOfficerDisbmtApplyRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 撥款 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseOfficerDisbmtApplyRespResponseResult> Submit3Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerApplyDisbmtSubmitReq body)
        {
            return Submit3Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 撥款 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseOfficerDisbmtApplyRespResponseResult> Submit3Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerApplyDisbmtSubmitReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Disbursement/CaseOfficer/Submit");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseOfficerDisbmtApplyRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CaseOfficerDisbmtApplyRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 撥款 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseOfficerCancelDisbursementRespResponseResult> Cancel3Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerApplyDisbmtCancelReq body)
        {
            return Cancel3Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 撥款 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseOfficerCancelDisbursementRespResponseResult> Cancel3Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerApplyDisbmtCancelReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Disbursement/CaseOfficer/Cancel");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseOfficerCancelDisbursementRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CaseOfficerCancelDisbursementRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 依 FormNo 查詢撥款資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetInsuranceDisbursementApplyInfoRespResponseResult> FormNo3Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return FormNo3Async(formNo, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 FormNo 查詢撥款資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetInsuranceDisbursementApplyInfoRespResponseResult> FormNo3Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (formNo == null)
                throw new System.ArgumentNullException("formNo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Disbursement/Query/FormNo/{formNo}");
            urlBuilder_.Replace("{formNo}", System.Uri.EscapeDataString(ConvertToString(formNo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInsuranceDisbursementApplyInfoRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GetInsuranceDisbursementApplyInfoRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Public] 取得報價資料</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RequestQuotationDetailResp> RequestQuotationDetailAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestQuotationDetailReq body)
        {
            return RequestQuotationDetailAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 取得報價資料</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RequestQuotationDetailResp> RequestQuotationDetailAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestQuotationDetailReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("EQuotation/Query/RequestQuotationDetail");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestQuotationDetailResp>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(RequestQuotationDetailResp);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Public] 取得報價附件</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RequestFileListResp> RequestFileListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestFileListReq body)
        {
            return RequestFileListAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 取得報價附件</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RequestFileListResp> RequestFileListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestFileListReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("EQuotation/Query/RequestFileList");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestFileListResp>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(RequestFileListResp);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Public] 取得SMS</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RequestSMSURLResp> RequestSMSURLAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestSMSURLReq body)
        {
            return RequestSMSURLAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 取得SMS</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RequestSMSURLResp> RequestSMSURLAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestSMSURLReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("EQuotation/Query/RequestSMSURL");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestSMSURLResp>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(RequestSMSURLResp);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Public] 寄送EMAIL</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RequestEMAILURLResp> RequestEMAILURLAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestEMAILURLReq body)
        {
            return RequestEMAILURLAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 寄送EMAIL</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RequestEMAILURLResp> RequestEMAILURLAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestEMAILURLReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("EQuotation/Query/RequestEMAILURL");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestEMAILURLResp>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(RequestEMAILURLResp);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Public] 付款前先取得交易序號</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RequestPayTranIDResp> RequestPayTranIDAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestPayTranIDReq body)
        {
            return RequestPayTranIDAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 付款前先取得交易序號</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RequestPayTranIDResp> RequestPayTranIDAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestPayTranIDReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("EQuotation/Query/RequestPayTranID");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestPayTranIDResp>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(RequestPayTranIDResp);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Public] 回傳交易結果</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ReturnInsurancePayTraninfResp> ReturnInsurancePayTraninfAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ReturnInsurancePayTraninfReq body)
        {
            return ReturnInsurancePayTraninfAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 回傳交易結果</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ReturnInsurancePayTraninfResp> ReturnInsurancePayTraninfAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ReturnInsurancePayTraninfReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("EQuotation/Query/ReturnInsurancePayTraninf");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnInsurancePayTraninfResp>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ReturnInsurancePayTraninfResp);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Public] 回傳報價清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RequestQuotationListResp> RequestQuotationListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestQuotationListReq body)
        {
            return RequestQuotationListAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 回傳報價清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RequestQuotationListResp> RequestQuotationListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestQuotationListReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("EQuotation/Query/RequestQuotationList");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestQuotationListResp>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(RequestQuotationListResp);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Public] 回傳最新報價明細</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RequestQuotationLastOneResp> RequestQuotationLastOneAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestQuotationLastOneReq body)
        {
            return RequestQuotationLastOneAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 回傳最新報價明細</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RequestQuotationLastOneResp> RequestQuotationLastOneAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestQuotationLastOneReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("EQuotation/Query/RequestQuotationLastOne");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestQuotationLastOneResp>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(RequestQuotationLastOneResp);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Public] APP報價申請</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RequestNewQuotationResp> RequestNewQuotationAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestNewQuotationReq body)
        {
            return RequestNewQuotationAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] APP報價申請</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RequestNewQuotationResp> RequestNewQuotationAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestNewQuotationReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("EQuotation/Query/RequestNewQuotation");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestNewQuotationResp>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(RequestNewQuotationResp);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Public] 是否購買ROAD TAX</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RequestRoadTaxResp> RequestRoadTaxAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestRoadTaxReq body)
        {
            return RequestRoadTaxAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 是否購買ROAD TAX</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RequestRoadTaxResp> RequestRoadTaxAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, RequestRoadTaxReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("EQuotation/Query/RequestRoadTax");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestRoadTaxResp>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(RequestRoadTaxResp);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 取得FinanceFee ToDo 清單, status=(Draft/Approve/Applying)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchFinanceFeeToDoListRespResponseResult> Todo4Async(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return Todo4Async(status, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得FinanceFee ToDo 清單, status=(Draft/Approve/Applying)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchFinanceFeeToDoListRespResponseResult> Todo4Async(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("FinanceFee/Query/Todo/{status}");
            urlBuilder_.Replace("{status}", System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchFinanceFeeToDoListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchFinanceFeeToDoListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] FinanceFee 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseOfficerFinanceFeeRespResponseResult> Save4Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveFinanceFeeReq body)
        {
            return Save4Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] FinanceFee 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseOfficerFinanceFeeRespResponseResult> Save4Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveFinanceFeeReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("FinanceFee/CaseOfficer/Save");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseOfficerFinanceFeeRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CaseOfficerFinanceFeeRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] FinanceFee 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseOfficerFinanceFeeRespResponseResult> Submit4Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitFinanceFeeReq body)
        {
            return Submit4Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] FinanceFee 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseOfficerFinanceFeeRespResponseResult> Submit4Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitFinanceFeeReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("FinanceFee/CaseOfficer/Submit");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseOfficerFinanceFeeRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CaseOfficerFinanceFeeRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] FinanceFee 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseOfficerCancelFinanceFeeRespResponseResult> Cancel4Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerCancelFinanceFeeReq body)
        {
            return Cancel4Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] FinanceFee 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseOfficerCancelFinanceFeeRespResponseResult> Cancel4Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerCancelFinanceFeeReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("FinanceFee/CaseOfficer/Cancel");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseOfficerCancelFinanceFeeRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CaseOfficerCancelFinanceFeeRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] FinanceFee 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ManagerApproveFinanceFeeRespResponseResult> Approve4Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveFinanceFeeReq body)
        {
            return Approve4Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] FinanceFee 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ManagerApproveFinanceFeeRespResponseResult> Approve4Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveFinanceFeeReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("FinanceFee/Manager/Approve");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ManagerApproveFinanceFeeRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ManagerApproveFinanceFeeRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 依 FormNo 查詢FinanceFee資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetFinanceFeeApplyInfoRespResponseResult> FormNo4Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return FormNo4Async(formNo, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 FormNo 查詢FinanceFee資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetFinanceFeeApplyInfoRespResponseResult> FormNo4Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (formNo == null)
                throw new System.ArgumentNullException("formNo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("FinanceFee/Query/FormNo/{formNo}");
            urlBuilder_.Replace("{formNo}", System.Uri.EscapeDataString(ConvertToString(formNo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFinanceFeeApplyInfoRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GetFinanceFeeApplyInfoRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 查詢審核完成FinanceFee資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetFinanceFeeApplyInfoRespResponseResult> QueryAsync(int insuranceCompanyId, string insuranceType, string productCode, string currency, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return QueryAsync(insuranceCompanyId, insuranceType, productCode, currency, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢審核完成FinanceFee資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetFinanceFeeApplyInfoRespResponseResult> QueryAsync(int insuranceCompanyId, string insuranceType, string productCode, string currency, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (insuranceCompanyId == null)
                throw new System.ArgumentNullException("insuranceCompanyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("FinanceFee/Query/{insuranceCompanyId}/{insuranceType}/{productCode}/{currency}");
            urlBuilder_.Replace("{insuranceCompanyId}", System.Uri.EscapeDataString(ConvertToString(insuranceCompanyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{insuranceType}", System.Uri.EscapeDataString(ConvertToString(insuranceType, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{productCode}", System.Uri.EscapeDataString(ConvertToString(productCode, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{currency}", System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetFinanceFeeApplyInfoRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GetFinanceFeeApplyInfoRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 查詢審核完成FinanceFee資訊是否正在維護中</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BooleanResponseResult> CheckAsync(int insuranceCompanyId, string insuranceType, string productCode, string currency, int masterId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return CheckAsync(insuranceCompanyId, insuranceType, productCode, currency, masterId, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢審核完成FinanceFee資訊是否正在維護中</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BooleanResponseResult> CheckAsync(int insuranceCompanyId, string insuranceType, string productCode, string currency, int masterId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (insuranceCompanyId == null)
                throw new System.ArgumentNullException("insuranceCompanyId");

            if (masterId == null)
                throw new System.ArgumentNullException("masterId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("FinanceFee/Check/{insuranceCompanyId}/{insuranceType}/{productCode}/{currency}/{masterId}");
            urlBuilder_.Replace("{insuranceCompanyId}", System.Uri.EscapeDataString(ConvertToString(insuranceCompanyId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{insuranceType}", System.Uri.EscapeDataString(ConvertToString(insuranceType, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{productCode}", System.Uri.EscapeDataString(ConvertToString(productCode, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{currency}", System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{masterId}", System.Uri.EscapeDataString(ConvertToString(masterId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BooleanResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(BooleanResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Public] 取得保險客戶資料</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<InsuranceCustomerInfoRespResponseResult> GetCustomerInfo2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, InsuranceCustomerInfoReq body)
        {
            return GetCustomerInfo2Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 取得保險客戶資料</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<InsuranceCustomerInfoRespResponseResult> GetCustomerInfo2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, InsuranceCustomerInfoReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Insurance/GetCustomerInfo");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InsuranceCustomerInfoRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(InsuranceCustomerInfoRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Public] 取得報價資料</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<QuotationInfoRespResponseResult> Info2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, QuotationInfoReq body)
        {
            return Info2Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 取得報價資料</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<QuotationInfoRespResponseResult> Info2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, QuotationInfoReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Insurance/Quotation/Query/Info");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<QuotationInfoRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(QuotationInfoRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Public] 產生待報價清單 From 外部系統
        /// 1=WEB進件、2=審查、3=保險、4=保險專區、5=Equotation</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CreateForQuoteListRespResponseResult> ForQuoteListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CreateForQuoteListReq body)
        {
            return ForQuoteListAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 產生待報價清單 From 外部系統
        /// 1=WEB進件、2=審查、3=保險、4=保險專區、5=Equotation</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CreateForQuoteListRespResponseResult> ForQuoteListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CreateForQuoteListReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Insurance/Quotation/Create/ForQuoteList");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateForQuoteListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CreateForQuoteListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Public] 產生報價清單 From 外部系統
        /// 1=WEB進件、2=審查、3=保險、4=保險專區、5=Equotation</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CreateQuoteRespResponseResult> QuoteApplyAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CreateQuoteReq body)
        {
            return QuoteApplyAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 產生報價清單 From 外部系統
        /// 1=WEB進件、2=審查、3=保險、4=保險專區、5=Equotation</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CreateQuoteRespResponseResult> QuoteApplyAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CreateQuoteReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Insurance/Quotation/Create/QuoteApply");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateQuoteRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CreateQuoteRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Public] 產生待投保清單 From 外部系統
        /// 1=WEB進件、2=審查、3=保險、4=保險專區、5=Equotation</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CreateForApplyListRespResponseResult> ForApplyListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CreateForApplyListReq body)
        {
            return ForApplyListAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 產生待投保清單 From 外部系統
        /// 1=WEB進件、2=審查、3=保險、4=保險專區、5=Equotation</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CreateForApplyListRespResponseResult> ForApplyListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CreateForApplyListReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Insurance/Apply/Create/ForApplyList");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateForApplyListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CreateForApplyListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Public] 提供WEB/審查解析報價單Excel內容</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ParseExcelQuoteRespResponseResult> ExcelAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ParseExcelQuoteReq body)
        {
            return ExcelAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 提供WEB/審查解析報價單Excel內容</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ParseExcelQuoteRespResponseResult> ExcelAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ParseExcelQuoteReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Insurance/Quotation/Parse/Excel");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ParseExcelQuoteRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ParseExcelQuoteRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Public]起租查詢保險費(還款計畫每期保險資訊)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetCaseInsuranceRespResponseResult> GetCaseInsuranceAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, GetCaseInsuranceReq body)
        {
            return GetCaseInsuranceAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public]起租查詢保險費(還款計畫每期保險資訊)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetCaseInsuranceRespResponseResult> GetCaseInsuranceAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, GetCaseInsuranceReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Insurance/Operation/Query/GetCaseInsurance");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetCaseInsuranceRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GetCaseInsuranceRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Public]查詢案件下的保險</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetCaseInsurancePaymentRespResponseResult> GetCaseInsurancePaymentAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, GetCaseInsuranceReq body)
        {
            return GetCaseInsurancePaymentAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public]查詢案件下的保險</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetCaseInsurancePaymentRespResponseResult> GetCaseInsurancePaymentAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, GetCaseInsuranceReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Insurance/Operation/Query/GetCaseInsurancePayment");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetCaseInsurancePaymentRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GetCaseInsurancePaymentRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Public]是否可以起租</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetInsuranceCommencementRespResponseResult> GetInsuranceCommencementAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, GetInsuranceCommencementReq body)
        {
            return GetInsuranceCommencementAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public]是否可以起租</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetInsuranceCommencementRespResponseResult> GetInsuranceCommencementAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, GetInsuranceCommencementReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Insurance/Operation/Query/GetInsuranceCommencement");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInsuranceCommencementRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GetInsuranceCommencementRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Public] 計算AutoLife、融資</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CalculateAutoLifeRespResponseResult> CalculateAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CalculateAutoLifeReq body)
        {
            return CalculateAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 計算AutoLife、融資</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CalculateAutoLifeRespResponseResult> CalculateAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CalculateAutoLifeReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Insurance/AutoLife/Calculate");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CalculateAutoLifeRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CalculateAutoLifeRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Public] 更新保險撥款狀態</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DisbursementStatusFeedbackRespResponseResult> DisbursementStatusFeedbackAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, DisbursementStatusFeedbackReq body)
        {
            return DisbursementStatusFeedbackAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 更新保險撥款狀態</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DisbursementStatusFeedbackRespResponseResult> DisbursementStatusFeedbackAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, DisbursementStatusFeedbackReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Insurance/Disbursement/DisbursementStatusFeedback");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DisbursementStatusFeedbackRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(DisbursementStatusFeedbackRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 取得欄位設定檔</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<StringInsuranceApplyColumnSettingRespDictionaryResponseResult> ColumnSettingAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return ColumnSettingAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得欄位設定檔</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<StringInsuranceApplyColumnSettingRespDictionaryResponseResult> ColumnSettingAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("InsuranceApply/Query/ColumnSetting");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StringInsuranceApplyColumnSettingRespDictionaryResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(StringInsuranceApplyColumnSettingRespDictionaryResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 取得流程中欄位控管</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<InsuranceApplyControlRulesRespResponseResult> ControlRulesAsync(int insuranceApplyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return ControlRulesAsync(insuranceApplyId, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得流程中欄位控管</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<InsuranceApplyControlRulesRespResponseResult> ControlRulesAsync(int insuranceApplyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (insuranceApplyId == null)
                throw new System.ArgumentNullException("insuranceApplyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("InsuranceApply/Query/ControlRules/{insuranceApplyId}");
            urlBuilder_.Replace("{insuranceApplyId}", System.Uri.EscapeDataString(ConvertToString(insuranceApplyId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InsuranceApplyControlRulesRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(InsuranceApplyControlRulesRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 查詢待投保清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ToBeApplyListRespResponseResult> ToBeApplyAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ToBeApplyListReq body)
        {
            return ToBeApplyAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢待投保清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ToBeApplyListRespResponseResult> ToBeApplyAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ToBeApplyListReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("InsuranceApply/Query/ToBeApply");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ToBeApplyListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ToBeApplyListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 查詢投保基本資料列表(讀取投保清單)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchApplyInfoListRespResponseResult> List2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchApplyInfoListReq body)
        {
            return List2Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢投保基本資料列表(讀取投保清單)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchApplyInfoListRespResponseResult> List2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchApplyInfoListReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("InsuranceApply/Query/List");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchApplyInfoListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchApplyInfoListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 查詢投保維護資料清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchApplyEditListRespResponseResult> Edit2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchApplyEditListReq body)
        {
            return Edit2Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢投保維護資料清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchApplyEditListRespResponseResult> Edit2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchApplyEditListReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("InsuranceApply/Query/Edit");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchApplyEditListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchApplyEditListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 取得待投保 ToDo 清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchInsuranceApplyToBeApplyToDoListRespResponseResult> ToBeApplyListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return ToBeApplyListAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得待投保 ToDo 清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchInsuranceApplyToBeApplyToDoListRespResponseResult> ToBeApplyListAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("InsuranceApply/Query/Todo/ToBeApplyList");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchInsuranceApplyToBeApplyToDoListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchInsuranceApplyToBeApplyToDoListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 取得投保 ToDo 清單, status=(Draft/Approve/ReturnedList)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchInsuranceApplyToDoListRespResponseResult> Todo5Async(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return Todo5Async(status, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得投保 ToDo 清單, status=(Draft/Approve/ReturnedList)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchInsuranceApplyToDoListRespResponseResult> Todo5Async(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("InsuranceApply/Query/Todo/{status}");
            urlBuilder_.Replace("{status}", System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchInsuranceApplyToDoListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchInsuranceApplyToDoListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 依 FormNo 查詢投保資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetInsuranceApplyInfoRespResponseResult> FormNo5Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return FormNo5Async(formNo, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 FormNo 查詢投保資訊 (Temporary)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetInsuranceApplyInfoRespResponseResult> FormNo5Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (formNo == null)
                throw new System.ArgumentNullException("formNo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("InsuranceApply/Query/FormNo/{formNo}");
            urlBuilder_.Replace("{formNo}", System.Uri.EscapeDataString(ConvertToString(formNo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInsuranceApplyInfoRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GetInsuranceApplyInfoRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 依 InsuranceNo查詢投保資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetInsuranceApplyInfoRespResponseResult> InsuranceNoAsync(string insuranceNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return InsuranceNoAsync(insuranceNo, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 InsuranceNo查詢投保資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetInsuranceApplyInfoRespResponseResult> InsuranceNoAsync(string insuranceNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (insuranceNo == null)
                throw new System.ArgumentNullException("insuranceNo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("InsuranceApply/Query/InsuranceNo/{insuranceNo}");
            urlBuilder_.Replace("{insuranceNo}", System.Uri.EscapeDataString(ConvertToString(insuranceNo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInsuranceApplyInfoRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GetInsuranceApplyInfoRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 投保資料 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseOfficerInsuranceApplyRespResponseResult> Save5Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveInsuranceApplyReq body)
        {
            return Save5Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 投保資料 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseOfficerInsuranceApplyRespResponseResult> Save5Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveInsuranceApplyReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("InsuranceApply/CaseOfficer/Save");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseOfficerInsuranceApplyRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CaseOfficerInsuranceApplyRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 投保資料 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseOfficerInsuranceApplyRespResponseResult> Submit5Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitInsuranceApplyReq body)
        {
            return Submit5Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 投保資料 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseOfficerInsuranceApplyRespResponseResult> Submit5Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitInsuranceApplyReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("InsuranceApply/CaseOfficer/Submit");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseOfficerInsuranceApplyRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CaseOfficerInsuranceApplyRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 投保資料 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseOfficerCancelInsuranceApplyRespResponseResult> Cancel5Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerCancelInsuranceApplyReq body)
        {
            return Cancel5Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 投保資料 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseOfficerCancelInsuranceApplyRespResponseResult> Cancel5Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerCancelInsuranceApplyReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("InsuranceApply/CaseOfficer/Cancel");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseOfficerCancelInsuranceApplyRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CaseOfficerCancelInsuranceApplyRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 投保資料 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ManagerApproveInsuranceApplyRespResponseResult> Approve5Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveInsuranceApplyReq body)
        {
            return Approve5Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 投保資料 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ManagerApproveInsuranceApplyRespResponseResult> Approve5Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveInsuranceApplyReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("InsuranceApply/Manager/Approve");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ManagerApproveInsuranceApplyRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ManagerApproveInsuranceApplyRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 保單處理申請 可申請查詢</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ToBeProcessingListRespResponseResult> ToBeProcessingAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ToBeProcessingListReq body)
        {
            return ToBeProcessingAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 保單處理申請 可申請查詢</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ToBeProcessingListRespResponseResult> ToBeProcessingAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ToBeProcessingListReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("PolicyProcess/Query/ToBeProcessing");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ToBeProcessingListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ToBeProcessingListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 保單處理查詢</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PolicyProcessingListRespResponseResult> List3Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ToBeProcessingListReq body)
        {
            return List3Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 保單處理查詢</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PolicyProcessingListRespResponseResult> List3Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ToBeProcessingListReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("PolicyProcess/Query/List");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PolicyProcessingListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(PolicyProcessingListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 取得保單處理 ToDo 清單, status=(Draft/Approve/Applying)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchPolicyProcessToDoListRespResponseResult> Todo6Async(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return Todo6Async(status, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得保單處理 ToDo 清單, status=(Draft/Approve/Applying)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchPolicyProcessToDoListRespResponseResult> Todo6Async(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (status == null)
                throw new System.ArgumentNullException("status");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("PolicyProcess/Query/Todo/{status}");
            urlBuilder_.Replace("{status}", System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchPolicyProcessToDoListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchPolicyProcessToDoListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 取得可保單處理明細</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetToBePolicyProcessInfoRespResponseResult> Info3Async(int insuranceApplyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return Info3Async(insuranceApplyId, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得可保單處理明細</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetToBePolicyProcessInfoRespResponseResult> Info3Async(int insuranceApplyId, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (insuranceApplyId == null)
                throw new System.ArgumentNullException("insuranceApplyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("PolicyProcess/Query/ToBeProcessing/Info/{insuranceApplyId}");
            urlBuilder_.Replace("{insuranceApplyId}", System.Uri.EscapeDataString(ConvertToString(insuranceApplyId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetToBePolicyProcessInfoRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GetToBePolicyProcessInfoRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 依 FormNo 查詢保單處理資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetPolicyProcessApplyInfoRespResponseResult> Info4Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return Info4Async(formNo, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 FormNo 查詢保單處理資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetPolicyProcessApplyInfoRespResponseResult> Info4Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (formNo == null)
                throw new System.ArgumentNullException("formNo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("PolicyProcess/Query/Info/{formNo}");
            urlBuilder_.Replace("{formNo}", System.Uri.EscapeDataString(ConvertToString(formNo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPolicyProcessApplyInfoRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GetPolicyProcessApplyInfoRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 保單處理資料 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseOfficerApplyProcessingRespResponseResult> Save6Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveProcessingReq body)
        {
            return Save6Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 保單處理資料 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseOfficerApplyProcessingRespResponseResult> Save6Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveProcessingReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("PolicyProcess/CaseOfficer/Save");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseOfficerApplyProcessingRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CaseOfficerApplyProcessingRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 保單處理資料 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseOfficerApplyProcessingRespResponseResult> Submit6Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitProcessingReq body)
        {
            return Submit6Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 保單處理資料 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseOfficerApplyProcessingRespResponseResult> Submit6Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitProcessingReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("PolicyProcess/CaseOfficer/Submit");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseOfficerApplyProcessingRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CaseOfficerApplyProcessingRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 保單處理資料 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseOfficerCancelProcessingRespResponseResult> Cancel6Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseofficerCancelProcessingReq body)
        {
            return Cancel6Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 保單處理資料 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseOfficerCancelProcessingRespResponseResult> Cancel6Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseofficerCancelProcessingReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("PolicyProcess/CaseOfficer/Cancel");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseOfficerCancelProcessingRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CaseOfficerCancelProcessingRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 保單處理資料 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ManagerApproveProcessingRespResponseResult> Approve6Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveProcessingReq body)
        {
            return Approve6Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 保單處理資料 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ManagerApproveProcessingRespResponseResult> Approve6Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveProcessingReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("PolicyProcess/Manager/Approve");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ManagerApproveProcessingRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ManagerApproveProcessingRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Public] 提供WEB/審查解析報價單Excel內容</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ParseExcelQuoteRespResponseResult> Excel2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ParseExcelQuoteReq body)
        {
            return Excel2Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Public] 提供WEB/審查解析報價單Excel內容</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ParseExcelQuoteRespResponseResult> Excel2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ParseExcelQuoteReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Quotation/External/Parse/Excel");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ParseExcelQuoteRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ParseExcelQuoteRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 取得欄位設定檔</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<StringQuotationColumnSettingRespDictionaryResponseResult> ColumnSetting2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return ColumnSetting2Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得欄位設定檔</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<StringQuotationColumnSettingRespDictionaryResponseResult> ColumnSetting2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Quotation/Query/ColumnSetting");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StringQuotationColumnSettingRespDictionaryResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(StringQuotationColumnSettingRespDictionaryResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 取得報價 Draft 清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchDraftQuoteListRespResponseResult> QuotedAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return QuotedAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得報價 Draft 清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchDraftQuoteListRespResponseResult> QuotedAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Quotation/Query/Todo/Quoted");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchDraftQuoteListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchDraftQuoteListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 取得待報價清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchToBeQuotedListRespResponseResult> ToBeQuotedAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return ToBeQuotedAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得待報價清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchToBeQuotedListRespResponseResult> ToBeQuotedAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Quotation/Query/ToBeQuoted");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchToBeQuotedListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchToBeQuotedListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 查詢報價清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchQuotationListRespResponseResult> List4Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchQuotationListReq body)
        {
            return List4Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢報價清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchQuotationListRespResponseResult> List4Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchQuotationListReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Quotation/Query/List");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchQuotationListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchQuotationListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 查詢可維護報價清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchQuotationEditListRespResponseResult> Edit3Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchQuotationListReq body)
        {
            return Edit3Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢可維護報價清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchQuotationEditListRespResponseResult> Edit3Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchQuotationListReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Quotation/Query/Edit");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchQuotationEditListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchQuotationEditListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 查詢流程中報價單 (多年度)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<QueryQuotationInfoByFormNoRespResponseResult> InProcessingAsync(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return InProcessingAsync(formNo, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢流程中報價單 (多年度)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<QueryQuotationInfoByFormNoRespResponseResult> InProcessingAsync(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (formNo == null)
                throw new System.ArgumentNullException("formNo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Quotation/Query/InProcessing?");
            urlBuilder_.Append(System.Uri.EscapeDataString("formNo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(formNo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<QueryQuotationInfoByFormNoRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(QueryQuotationInfoByFormNoRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 查詢暫存報價單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<QueryQuotationInfoByQuotedNoRespResponseResult> Temporary2Async(string quotedNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return Temporary2Async(quotedNo, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢暫存報價單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<QueryQuotationInfoByQuotedNoRespResponseResult> Temporary2Async(string quotedNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (quotedNo == null)
                throw new System.ArgumentNullException("quotedNo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Quotation/Query/Quotation/Temporary?");
            urlBuilder_.Append(System.Uri.EscapeDataString("quotedNo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quotedNo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<QueryQuotationInfoByQuotedNoRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(QueryQuotationInfoByQuotedNoRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 查詢已完成報價單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<QueryQuotationInfoByQuotedNoRespResponseResult> Submited2Async(string quotedNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return Submited2Async(quotedNo, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢已完成報價單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<QueryQuotationInfoByQuotedNoRespResponseResult> Submited2Async(string quotedNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (quotedNo == null)
                throw new System.ArgumentNullException("quotedNo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Quotation/Query/Quotation/Submited?");
            urlBuilder_.Append(System.Uri.EscapeDataString("quotedNo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quotedNo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<QueryQuotationInfoByQuotedNoRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(QueryQuotationInfoByQuotedNoRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 經辦報價 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseOfficerApplyQuoteRespResponseResult> Save7Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveQuoteReq body)
        {
            return Save7Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 經辦報價 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseOfficerApplyQuoteRespResponseResult> Save7Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveQuoteReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Quotation/CaseOfficer/Save");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseOfficerApplyQuoteRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CaseOfficerApplyQuoteRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 經辦報價 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseOfficerApplyQuoteRespResponseResult> Submit7Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitQuoteReq body)
        {
            return Submit7Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 經辦報價 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseOfficerApplyQuoteRespResponseResult> Submit7Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitQuoteReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Quotation/CaseOfficer/Submit");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseOfficerApplyQuoteRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CaseOfficerApplyQuoteRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 經辦報價 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseOfficerApplyQuoteRespResponseResult> Cancel7Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return Cancel7Async(formNo, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 經辦報價 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseOfficerApplyQuoteRespResponseResult> Cancel7Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (formNo == null)
                throw new System.ArgumentNullException("formNo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Quotation/CaseOfficer/Cancel?");
            urlBuilder_.Append(System.Uri.EscapeDataString("formNo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(formNo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseOfficerApplyQuoteRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CaseOfficerApplyQuoteRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 投保查詢已完成報價清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchQuotationListFromApplyRespResponseResult> CompleteAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchQuotationListFromApplyReq body)
        {
            return CompleteAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 投保查詢已完成報價清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchQuotationListFromApplyRespResponseResult> CompleteAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchQuotationListFromApplyReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Quotation/Query/List/Complete");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchQuotationListFromApplyRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchQuotationListFromApplyRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 查詢已完成報價的附件 
        /// 1=進件參考附件、2=客戶報價單、3=報價試算表、4=其他</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchQuotationAttachRespResponseResult> Attach2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchQuotationAttachReq body)
        {
            return Attach2Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢已完成報價的附件 
        /// 1=進件參考附件、2=客戶報價單、3=報價試算表、4=其他</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchQuotationAttachRespResponseResult> Attach2Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchQuotationAttachReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Quotation/Query/List/Attach");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchQuotationAttachRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchQuotationAttachRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 退佣申請 可申請查詢</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ToBeRebateListRespResponseResult> ToBeRebateAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ToBeRebateListReq body)
        {
            return ToBeRebateAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 退佣申請 可申請查詢</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ToBeRebateListRespResponseResult> ToBeRebateAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ToBeRebateListReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Rebate/Query/ToBeRebate");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ToBeRebateListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ToBeRebateListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 退佣查詢</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchRebateListRespResponseResult> List5Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchRebateListReq body)
        {
            return List5Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 退佣查詢</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchRebateListRespResponseResult> List5Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, SearchRebateListReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Rebate/Query/List");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchRebateListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchRebateListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 取得退佣 ToDo 清單, status=(Draft/Approve/Applying)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchRebateToDoListRespResponseResult> Todo7Async(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return Todo7Async(status, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 取得退佣 ToDo 清單, status=(Draft/Approve/Applying)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchRebateToDoListRespResponseResult> Todo7Async(string status, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (status == null)
                throw new System.ArgumentNullException("status");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Rebate/Query/Todo/{status}");
            urlBuilder_.Replace("{status}", System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchRebateToDoListRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SearchRebateToDoListRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 依 FormNo 查詢退佣資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetRebateApplyInfoRespResponseResult> Info5Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return Info5Async(formNo, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 FormNo 查詢退佣資訊</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetRebateApplyInfoRespResponseResult> Info5Async(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (formNo == null)
                throw new System.ArgumentNullException("formNo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Rebate/Query/Info/{formNo}");
            urlBuilder_.Replace("{formNo}", System.Uri.EscapeDataString(ConvertToString(formNo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetRebateApplyInfoRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GetRebateApplyInfoRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 依 FormNo 查詢退佣資訊 (ReadOnly)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetRebateApplyReadOnlyInfoRespResponseResult> ReadOnlyAsync(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return ReadOnlyAsync(formNo, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依 FormNo 查詢退佣資訊 (ReadOnly)</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetRebateApplyReadOnlyInfoRespResponseResult> ReadOnlyAsync(string formNo, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (formNo == null)
                throw new System.ArgumentNullException("formNo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Rebate/Query/Info/ReadOnly/{formNo}");
            urlBuilder_.Replace("{formNo}", System.Uri.EscapeDataString(ConvertToString(formNo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetRebateApplyReadOnlyInfoRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GetRebateApplyReadOnlyInfoRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 退佣資料 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseOfficerApplyRebateCaseRespResponseResult> Save8Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveRebateCaseReq body)
        {
            return Save8Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 退佣資料 經辦 Save</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseOfficerApplyRebateCaseRespResponseResult> Save8Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSaveRebateCaseReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Rebate/CaseOfficer/Save");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseOfficerApplyRebateCaseRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CaseOfficerApplyRebateCaseRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 退佣資料 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseOfficerApplyRebateCaseRespResponseResult> Submit8Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitRebateCaseReq body)
        {
            return Submit8Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 退佣資料 經辦 Submit</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseOfficerApplyRebateCaseRespResponseResult> Submit8Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseOfficerSubmitRebateCaseReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Rebate/CaseOfficer/Submit");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseOfficerApplyRebateCaseRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CaseOfficerApplyRebateCaseRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 退佣資料 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseofficerCancelRebateCaseRespResponseResult> Cancel8Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseofficerCancelRebateCaseReq body)
        {
            return Cancel8Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 退佣資料 經辦 Cancel</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseofficerCancelRebateCaseRespResponseResult> Cancel8Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, CaseofficerCancelRebateCaseReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Rebate/CaseOfficer/Cancel");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseofficerCancelRebateCaseRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CaseofficerCancelRebateCaseRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 退佣資料 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ManagerApproveRebateCaseRespResponseResult> Approve7Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveRebateCaseReq body)
        {
            return Approve7Async(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 退佣資料 主管 Save/Submit/Return</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ManagerApproveRebateCaseRespResponseResult> Approve7Async(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ManagerApproveRebateCaseReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Rebate/Manager/Approve");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ManagerApproveRebateCaseRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ManagerApproveRebateCaseRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 查詢待續保清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ToBeRenewRespResponseResult> ToBeRenewAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ToBeRenewReq body)
        {
            return ToBeRenewAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 查詢待續保清單</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ToBeRenewRespResponseResult> ToBeRenewAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, ToBeRenewReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Renew/Query/ToBeRenew");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ToBeRenewRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ToBeRenewRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 依FormNo查詢保險到期待處理資料檔</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetInsuranceForRenewInfoRespResponseResult> FormNo6Async(string formNo, int fromSource, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date)
        {
            return FormNo6Async(formNo, fromSource, x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 依FormNo查詢保險到期待處理資料檔</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetInsuranceForRenewInfoRespResponseResult> FormNo6Async(string formNo, int fromSource, string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, System.Threading.CancellationToken cancellationToken)
        {
            if (fromSource == null)
                throw new System.ArgumentNullException("fromSource");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Renew/Query/FormNo/{formNo}/{fromSource}");
            urlBuilder_.Replace("{formNo}", System.Uri.EscapeDataString(ConvertToString(formNo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{fromSource}", System.Uri.EscapeDataString(ConvertToString(fromSource, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInsuranceForRenewInfoRespResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GetInsuranceForRenewInfoRespResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>[Private] 更新續保狀態為Reject</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BooleanResponseResult> UpdateStatusToRejectAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, UpdateStatusToRejectReq body)
        {
            return UpdateStatusToRejectAsync(x_From_Channel, x_Client_TraceId, x_Server_TraceId, x_Client_Date, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>[Private] 更新續保狀態為Reject</summary>
        /// <param name="x_From_Channel">From Channel (Example: Web、APP...)</param>
        /// <param name="x_Client_TraceId">Client side UUID</param>
        /// <param name="x_Server_TraceId">Server side UUID</param>
        /// <param name="x_Client_Date">Request time</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BooleanResponseResult> UpdateStatusToRejectAsync(string x_From_Channel, string x_Client_TraceId, string x_Server_TraceId, string x_Client_Date, UpdateStatusToRejectReq body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Renew/UpdateStatusToReject");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_From_Channel != null)
                        request_.Headers.TryAddWithoutValidation("X-From-Channel", ConvertToString(x_From_Channel, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-TraceId", ConvertToString(x_Client_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Server_TraceId != null)
                        request_.Headers.TryAddWithoutValidation("X-Server-TraceId", ConvertToString(x_Server_TraceId, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_Client_Date != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Date", ConvertToString(x_Client_Date, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BooleanResponseResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The server could not understand the request.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The request is unauthorized.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            string responseText_ = (response_.Content == null) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Occurred internal server error.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(BooleanResponseResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            return System.Convert.ToString(value, cultureInfo);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchAutolifeToDoListItem
    {
        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InsuranceCompanyId { get; set; }

        [Newtonsoft.Json.JsonProperty("applicationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationDate { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchAutolifeToDoListResp
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchAutolifeToDoListItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchAutolifeToDoListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchAutolifeToDoListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerAutolifeSetup
    {
        [Newtonsoft.Json.JsonProperty("autolifeSetupApplyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AutolifeSetupApplyId { get; set; }

        [Newtonsoft.Json.JsonProperty("age", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Age { get; set; }

        [Newtonsoft.Json.JsonProperty("year1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 999.99D)]
        public double? Year1 { get; set; }

        [Newtonsoft.Json.JsonProperty("year2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 999.99D)]
        public double? Year2 { get; set; }

        [Newtonsoft.Json.JsonProperty("year3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 999.99D)]
        public double? Year3 { get; set; }

        [Newtonsoft.Json.JsonProperty("year4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 999.99D)]
        public double? Year4 { get; set; }

        [Newtonsoft.Json.JsonProperty("year5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 999.99D)]
        public double? Year5 { get; set; }

        [Newtonsoft.Json.JsonProperty("year6", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 999.99D)]
        public double? Year6 { get; set; }

        [Newtonsoft.Json.JsonProperty("year7", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 999.99D)]
        public double? Year7 { get; set; }

        [Newtonsoft.Json.JsonProperty("year8", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 999.99D)]
        public double? Year8 { get; set; }

        [Newtonsoft.Json.JsonProperty("year9", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 999.99D)]
        public double? Year9 { get; set; }

        [Newtonsoft.Json.JsonProperty("year10", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 999.99D)]
        public double? Year10 { get; set; }

        [Newtonsoft.Json.JsonProperty("year11", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 999.99D)]
        public double? Year11 { get; set; }

        [Newtonsoft.Json.JsonProperty("year12", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 999.99D)]
        public double? Year12 { get; set; }

        [Newtonsoft.Json.JsonProperty("year13", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 999.99D)]
        public double? Year13 { get; set; }

        [Newtonsoft.Json.JsonProperty("year14", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 999.99D)]
        public double? Year14 { get; set; }

        [Newtonsoft.Json.JsonProperty("year15", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 999.99D)]
        public double? Year15 { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerSaveAutolifeReq
    {
        [Newtonsoft.Json.JsonProperty("isUpdating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsUpdating { get; set; }

        [Newtonsoft.Json.JsonProperty("isModify", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsModify { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompanyId { get; set; }

        [Newtonsoft.Json.JsonProperty("autolifeSetups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CaseOfficerAutolifeSetup> AutolifeSetups { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerAutolifeResp
    {
        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerAutolifeRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseOfficerAutolifeResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerSubmitAutolifeReq
    {
        [Newtonsoft.Json.JsonProperty("isUpdating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsUpdating { get; set; }

        [Newtonsoft.Json.JsonProperty("isModify", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsModify { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompanyId { get; set; }

        [Newtonsoft.Json.JsonProperty("autolifeSetups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CaseOfficerAutolifeSetup> AutolifeSetups { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerCancelAutolifeReq
    {
        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerCancelAutolifeResp
    {
        [Newtonsoft.Json.JsonProperty("isSuccess", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSuccess { get; set; }

        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerCancelAutolifeRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseOfficerCancelAutolifeResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ManagerApproveAutolifeReq
    {
        /// <summary>BPM Condition</summary>
        [Newtonsoft.Json.JsonProperty("condition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Condition { get; set; }

        /// <summary>BPM 備註</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ManagerApproveAutolifeResp
    {
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ManagerApproveAutolifeRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ManagerApproveAutolifeResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerAutolifeSetupInfo
    {
        [Newtonsoft.Json.JsonProperty("autolifeSetupApplyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AutolifeSetupApplyId { get; set; }

        [Newtonsoft.Json.JsonProperty("autolifeSetupId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AutolifeSetupId { get; set; }

        [Newtonsoft.Json.JsonProperty("age", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Age { get; set; }

        [Newtonsoft.Json.JsonProperty("year1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Year1 { get; set; }

        [Newtonsoft.Json.JsonProperty("year2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Year2 { get; set; }

        [Newtonsoft.Json.JsonProperty("year3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Year3 { get; set; }

        [Newtonsoft.Json.JsonProperty("year4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Year4 { get; set; }

        [Newtonsoft.Json.JsonProperty("year5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Year5 { get; set; }

        [Newtonsoft.Json.JsonProperty("year6", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Year6 { get; set; }

        [Newtonsoft.Json.JsonProperty("year7", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Year7 { get; set; }

        [Newtonsoft.Json.JsonProperty("year8", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Year8 { get; set; }

        [Newtonsoft.Json.JsonProperty("year9", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Year9 { get; set; }

        [Newtonsoft.Json.JsonProperty("year10", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Year10 { get; set; }

        [Newtonsoft.Json.JsonProperty("year11", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Year11 { get; set; }

        [Newtonsoft.Json.JsonProperty("year12", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Year12 { get; set; }

        [Newtonsoft.Json.JsonProperty("year13", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Year13 { get; set; }

        [Newtonsoft.Json.JsonProperty("year14", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Year14 { get; set; }

        [Newtonsoft.Json.JsonProperty("year15", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Year15 { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetAutolifeApplyInfoResp
    {
        [Newtonsoft.Json.JsonProperty("processId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessId { get; set; }

        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId { get; set; }

        [Newtonsoft.Json.JsonProperty("isModify", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsModify { get; set; }

        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompanyId { get; set; }

        [Newtonsoft.Json.JsonProperty("isUpdating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsUpdating { get; set; }

        [Newtonsoft.Json.JsonProperty("autolifeSetups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CaseOfficerAutolifeSetupInfo> AutolifeSetups { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetAutolifeApplyInfoRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetAutolifeApplyInfoResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BooleanResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Tasks
    {
        /// <summary>節點名稱</summary>
        [Newtonsoft.Json.JsonProperty("taskName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskName { get; set; }

        [Newtonsoft.Json.JsonProperty("taskDefKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskDefKey { get; set; }

        /// <summary>該節點總數</summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProcessCount
    {
        [Newtonsoft.Json.JsonProperty("processDefKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessDefKey { get; set; }

        /// <summary>待辦名稱</summary>
        [Newtonsoft.Json.JsonProperty("processName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessName { get; set; }

        /// <summary>該待辦總數</summary>
        [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        [Newtonsoft.Json.JsonProperty("tasks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Tasks> Tasks { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TodoCountResp
    {
        /// <summary>公司別</summary>
        [Newtonsoft.Json.JsonProperty("companyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CompanyId { get; set; }

        /// <summary>公司名稱</summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName { get; set; }

        /// <summary>待辦事項總數</summary>
        [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        /// <summary>待辦種類列表</summary>
        [Newtonsoft.Json.JsonProperty("processes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProcessCount> Processes { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TodoCountRespListResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TodoCountResp> Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProcessLogResp
    {
        /// <summary>節點操作編號</summary>
        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TaskId { get; set; }

        /// <summary>節點名稱</summary>
        [Newtonsoft.Json.JsonProperty("nodeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NodeName { get; set; }

        /// <summary>經辦人員</summary>
        [Newtonsoft.Json.JsonProperty("applicant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Applicant { get; set; }

        /// <summary>流程備註</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        /// <summary>操作日期時間</summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Time { get; set; }

        /// <summary>推關動作</summary>
        [Newtonsoft.Json.JsonProperty("completeAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompleteAction { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProcessLogRespListResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProcessLogResp> Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SysParam
    {
        /// <summary>參數種類</summary>
        [Newtonsoft.Json.JsonProperty("paramType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParamType { get; set; }

        /// <summary>參數編碼</summary>
        [Newtonsoft.Json.JsonProperty("paramCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParamCode { get; set; }

        /// <summary>顯示順序</summary>
        [Newtonsoft.Json.JsonProperty("paramOrder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ParamOrder { get; set; }

        /// <summary>參數值</summary>
        [Newtonsoft.Json.JsonProperty("paramName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParamName { get; set; }

        /// <summary>備註說明</summary>
        [Newtonsoft.Json.JsonProperty("paramDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParamDescription { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SysParamResp
    {
        /// <summary>參數種類</summary>
        [Newtonsoft.Json.JsonProperty("paramType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParamType { get; set; }

        /// <summary>參數內容</summary>
        [Newtonsoft.Json.JsonProperty("sysParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SysParam> SysParams { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SysParamRespListResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SysParamResp> Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SysParamItem
    {
        /// <summary>父層參數選項</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>參數種類</summary>
        [Newtonsoft.Json.JsonProperty("paramType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParamType { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SysParamReq
    {
        /// <summary>參數種類清單</summary>
        [Newtonsoft.Json.JsonProperty("paramTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SysParamItem> ParamTypes { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchCustomerInfoItem
    {
        /// <summary>身分證號/公司統編</summary>
        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNo { get; set; }

        /// <summary>姓名</summary>
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        /// <summary>證件類別</summary>
        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationType { get; set; }

        /// <summary>客戶類型</summary>
        [Newtonsoft.Json.JsonProperty("identityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentityType { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchCustomerInfoListResp
    {
        /// <summary>客戶資訊清單</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchCustomerInfoItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchCustomerInfoListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchCustomerInfoListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchCustomerInfoReq
    {
        /// <summary>證件類別</summary>
        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationType { get; set; }

        /// <summary>客戶類型</summary>
        [Newtonsoft.Json.JsonProperty("identityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentityType { get; set; }

        /// <summary>身分證號/公司統編</summary>
        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CustomerModel
    {
        /// <summary>客戶類型</summary>
        [Newtonsoft.Json.JsonProperty("identityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentityType { get; set; }

        /// <summary>客戶代碼</summary>
        [Newtonsoft.Json.JsonProperty("cifNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CifNo { get; set; }

        /// <summary>證件類別</summary>
        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationType { get; set; }

        /// <summary>客戶統編/身份證號</summary>
        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNo { get; set; }

        /// <summary>姓名</summary>
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        /// <summary>名</summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        /// <summary>姓</summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>負責人證件類型</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonIdentificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonIdentificationType { get; set; }

        /// <summary>負責人身份證號</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonIDNo { get; set; }

        /// <summary>負責人姓名</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonName { get; set; }

        /// <summary>負責人生日</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonBirthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonBirthDate { get; set; }

        /// <summary>出生日期/公司註冊日期</summary>
        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BirthDate { get; set; }

        /// <summary>性別/公司負責人性別</summary>
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gender { get; set; }

        /// <summary>戶籍地址/公司註冊地址Level1</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel1 { get; set; }

        /// <summary>戶籍地址/公司註冊地址Level2</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel2 { get; set; }

        /// <summary>戶籍地址/公司註冊地址Level3</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel3 { get; set; }

        /// <summary>戶籍地址/公司註冊地址Level4</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel4 { get; set; }

        /// <summary>戶籍地址/公司註冊地址</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddress { get; set; }

        /// <summary>聯絡地址Level1</summary>
        [Newtonsoft.Json.JsonProperty("contactAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel1 { get; set; }

        /// <summary>聯絡地址Level2</summary>
        [Newtonsoft.Json.JsonProperty("contactAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel2 { get; set; }

        /// <summary>聯絡地址Level3</summary>
        [Newtonsoft.Json.JsonProperty("contactAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel3 { get; set; }

        /// <summary>聯絡地址Level4</summary>
        [Newtonsoft.Json.JsonProperty("contactAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel4 { get; set; }

        /// <summary>聯絡地址</summary>
        [Newtonsoft.Json.JsonProperty("contactAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddress { get; set; }

        /// <summary>聯絡電話</summary>
        [Newtonsoft.Json.JsonProperty("contactPhoneNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPhoneNo { get; set; }

        /// <summary>電子信箱</summary>
        [Newtonsoft.Json.JsonProperty("contactEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactEmail { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CustomerInfoResp
    {
        /// <summary>是否有客戶資料</summary>
        [Newtonsoft.Json.JsonProperty("hasCustomer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasCustomer { get; set; }

        [Newtonsoft.Json.JsonProperty("customerInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerModel CustomerInfo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CustomerInfoRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerInfoResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProductsResp
    {
        /// <summary>版本</summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Version { get; set; }

        /// <summary>產品代碼</summary>
        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductCode { get; set; }

        /// <summary>產品組合名稱</summary>
        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }

        /// <summary>產品別</summary>
        [Newtonsoft.Json.JsonProperty("productType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductType { get; set; }

        /// <summary>產品別名稱</summary>
        [Newtonsoft.Json.JsonProperty("productTypeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductTypeName { get; set; }

        /// <summary>借款類型</summary>
        [Newtonsoft.Json.JsonProperty("lendingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LendingType { get; set; }

        /// <summary>專案名稱</summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProductsRespListResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductsResp> Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestInsuranceCompanyList
    {
        /// <summary>保險公司 key</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompanyId { get; set; }

        /// <summary>保險公司代碼</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyCode { get; set; }

        /// <summary>保險公司名稱</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyName { get; set; }

        /// <summary>撥款幣別</summary>
        [Newtonsoft.Json.JsonProperty("disbursementCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbursementCurrency { get; set; }

        /// <summary>退佣百分比(單位是%)</summary>
        [Newtonsoft.Json.JsonProperty("commissionRebateRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CommissionRebateRate { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestInsuranceCompanyListResp
    {
        /// <summary>保險公司清單</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RequestInsuranceCompanyList> InsuranceCompanyList { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestInsuranceCompanyListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequestInsuranceCompanyListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestInsuranceCompanyAttList
    {
        /// <summary>檔案 GUID</summary>
        [Newtonsoft.Json.JsonProperty("guid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Guid { get; set; }

        /// <summary>檔案原始名稱</summary>
        [Newtonsoft.Json.JsonProperty("originFileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginFileName { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestInsuranceCompanyAttListResp
    {
        /// <summary>檔案清單</summary>
        [Newtonsoft.Json.JsonProperty("fileList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RequestInsuranceCompanyAttList> FileList { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestInsuranceCompanyAttListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequestInsuranceCompanyAttListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TempBalanceItem
    {
        /// <summary>契約編號</summary>
        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        /// <summary>承作幣別</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>收款日期</summary>
        [Newtonsoft.Json.JsonProperty("rcvDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RcvDate { get; set; }

        /// <summary>暫收款 key</summary>
        [Newtonsoft.Json.JsonProperty("tempTransferIdKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TempTransferIdKey { get; set; }

        /// <summary>暫收款餘額</summary>
        [Newtonsoft.Json.JsonProperty("temporaryPaymentBalance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TemporaryPaymentBalance { get; set; }

        /// <summary>註記</summary>
        [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Remark { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetCustomerTempBalanceInfoResp
    {
        /// <summary>客戶暫收款明細</summary>
        [Newtonsoft.Json.JsonProperty("temporaryPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TempBalanceItem> TemporaryPayments { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetCustomerTempBalanceInfoRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetCustomerTempBalanceInfoResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SalesBasicInfoItem
    {
        /// <summary>中租 SalesCode + SalesName</summary>
        [Newtonsoft.Json.JsonProperty("sales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sales { get; set; }

        /// <summary>中租 Sales 原編</summary>
        [Newtonsoft.Json.JsonProperty("salesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesCode { get; set; }

        /// <summary>中租 Sales 姓名</summary>
        [Newtonsoft.Json.JsonProperty("salesName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesName { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetSalesInfoListResp
    {
        /// <summary>中租業務清單</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SalesBasicInfoItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetSalesInfoListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetSalesInfoListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CurrencyItem
    {
        /// <summary>幣別</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetCurrencyResp
    {
        /// <summary>幣別清單</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CurrencyItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetCurrencyRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetCurrencyResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchDealerListItem
    {
        /// <summary>供應商代碼</summary>
        [Newtonsoft.Json.JsonProperty("dealerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerCode { get; set; }

        /// <summary>供應商名稱</summary>
        [Newtonsoft.Json.JsonProperty("dealerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerName { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchDealerListResp
    {
        /// <summary>供應商清單</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchDealerListItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchDealerListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchDealerListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchDealerSalesItem
    {
        /// <summary>業務 email</summary>
        [Newtonsoft.Json.JsonProperty("dealerSalesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerSalesCode { get; set; }

        /// <summary>業務姓名</summary>
        [Newtonsoft.Json.JsonProperty("dealerSales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerSales { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchRemitAccount
    {
        /// <summary>受益人ID</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryIDNo { get; set; }

        /// <summary>受益人銀行</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryBank { get; set; }

        /// <summary>受益人姓名</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryName { get; set; }

        /// <summary>受益人銀行代碼</summary>
        [Newtonsoft.Json.JsonProperty("bankCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankCode { get; set; }

        /// <summary>受益人帳戶</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryAccountNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryAccountNo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchChequeAccount
    {
        /// <summary>支票 title</summary>
        [Newtonsoft.Json.JsonProperty("chequePayable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChequePayable { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchDealerSalesListResp
    {
        /// <summary>供應商業務清單</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchDealerSalesItem> Items { get; set; }

        /// <summary>供應商 Remit 帳戶</summary>
        [Newtonsoft.Json.JsonProperty("remits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchRemitAccount> Remits { get; set; }

        /// <summary>供應商 Cheque</summary>
        [Newtonsoft.Json.JsonProperty("cheques", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchChequeAccount> Cheques { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchDealerSalesListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchDealerSalesListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchAgentListItem
    {
        /// <summary>代理商代碼</summary>
        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCode { get; set; }

        /// <summary>代理商名稱</summary>
        [Newtonsoft.Json.JsonProperty("agentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentName { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchAgentListResp
    {
        /// <summary>代理商清單</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchAgentListItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchAgentListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchAgentListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DisbmtItem
    {
        [Newtonsoft.Json.JsonProperty("disbmtCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbmtCode { get; set; }

        [Newtonsoft.Json.JsonProperty("disbmtName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbmtName { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetDisbmtItemResp
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DisbmtItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetDisbmtItemRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetDisbmtItemResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollateralInfo
    {
        /// <summary>擔保品類型</summary>
        [Newtonsoft.Json.JsonProperty("collateralType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralType { get; set; }

        /// <summary>擔保品性質
        /// 1: Security Asset(擔保品限定)\n 2: Finance Asset(標的物限定) =&gt;審查
        /// s: Security Asset(擔保品限定)\n f: Finance Asset(標的物限定) =&gt;中租共用</summary>
        [Newtonsoft.Json.JsonProperty("collateralProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralProperty { get; set; }

        /// <summary>擔保品序號</summary>
        [Newtonsoft.Json.JsonProperty("subNo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SubNo { get; set; }

        /// <summary>規格型式</summary>
        [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Model { get; set; }

        /// <summary>廠牌</summary>
        [Newtonsoft.Json.JsonProperty("vehicleBrand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VehicleBrand { get; set; }

        /// <summary>車牌號碼</summary>
        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }

        /// <summary>引擎號碼</summary>
        [Newtonsoft.Json.JsonProperty("engineNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EngineNo { get; set; }

        /// <summary>底盤號碼</summary>
        [Newtonsoft.Json.JsonProperty("chassisNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChassisNo { get; set; }

        /// <summary>年份</summary>
        [Newtonsoft.Json.JsonProperty("manufactureYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufactureYear { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RepaymentPlanSetting
    {
        /// <summary>險種</summary>
        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceType { get; set; }

        /// <summary>鎖定還款計畫</summary>
        [Newtonsoft.Json.JsonProperty("lockRepaymentPlan", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool LockRepaymentPlan { get; set; }

        /// <summary>預設還款計畫</summary>
        [Newtonsoft.Json.JsonProperty("repaymentPlan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepaymentPlan { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchCreditCaseInfoResp
    {
        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }

        [Newtonsoft.Json.JsonProperty("identityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentityType { get; set; }

        [Newtonsoft.Json.JsonProperty("cifNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CifNo { get; set; }

        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationType { get; set; }

        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNo { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>出生日期/公司註冊日期</summary>
        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BirthDate { get; set; }

        /// <summary>性別/公司負責人性別</summary>
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gender { get; set; }

        /// <summary>負責人證件類型</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonIdentificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonIdentificationType { get; set; }

        /// <summary>負責人身份證號</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonIDNo { get; set; }

        /// <summary>負責人姓名</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonName { get; set; }

        /// <summary>負責人生日</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonBirthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonBirthDate { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel1 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel2 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel3 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel4 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel1 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel2 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel3 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel4 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddress { get; set; }

        /// <summary>聯絡電話</summary>
        [Newtonsoft.Json.JsonProperty("contactPhoneNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPhoneNo { get; set; }

        /// <summary>電子信箱</summary>
        [Newtonsoft.Json.JsonProperty("contactEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerCode { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerName { get; set; }

        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCode { get; set; }

        [Newtonsoft.Json.JsonProperty("agentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentName { get; set; }

        [Newtonsoft.Json.JsonProperty("financeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FinanceAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("financeTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FinanceTerms { get; set; }

        /// <summary>放 ProductCode</summary>
        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("lockRepaymentPlan", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool LockRepaymentPlan { get; set; }

        [Newtonsoft.Json.JsonProperty("repaymentPlan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepaymentPlan { get; set; }

        [Newtonsoft.Json.JsonProperty("collateralInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CollateralInfo> CollateralInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("repaymentPlanSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RepaymentPlanSetting> RepaymentPlanSettings { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchCreditCaseInfoRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchCreditCaseInfoResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetCollateralInfoResp
    {
        [Newtonsoft.Json.JsonProperty("collateralInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CollateralInfo> CollateralInfo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetCollateralInfoRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetCollateralInfoResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchCompanyLastListItem
    {
        [Newtonsoft.Json.JsonProperty("insuranceCompanyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompanyId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyCode { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceType { get; set; }

        [Newtonsoft.Json.JsonProperty("commissionRebateRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double CommissionRebateRate { get; set; }

        [Newtonsoft.Json.JsonProperty("disbursementCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbursementCurrency { get; set; }

        [Newtonsoft.Json.JsonProperty("cib", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cib { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchCompanyLastListResp
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchCompanyLastListItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchCompanyLastListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchCompanyLastListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchCompanyInfoListReq
    {
        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyIDNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceType { get; set; }

        [Newtonsoft.Json.JsonProperty("isCooperator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IsCooperator { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchCompanyInfoListItem
    {
        [Newtonsoft.Json.JsonProperty("insuranceCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyCode { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyIDNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceType { get; set; }

        [Newtonsoft.Json.JsonProperty("isCooperator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IsCooperator { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>聯絡窗口</summary>
        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPerson { get; set; }

        /// <summary>聯絡電話</summary>
        [Newtonsoft.Json.JsonProperty("contactPhoneNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPhoneNo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchCompanyInfoListResp
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchCompanyInfoListItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchCompanyInfoListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchCompanyInfoListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchCompanyEditListReq
    {
        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyIDNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceType { get; set; }

        [Newtonsoft.Json.JsonProperty("isCooperator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IsCooperator { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchCompanyEditListItem
    {
        [Newtonsoft.Json.JsonProperty("insuranceCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyCode { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyIDNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceType { get; set; }

        [Newtonsoft.Json.JsonProperty("isCooperator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IsCooperator { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchCompanyEditListResp
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchCompanyEditListItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchCompanyEditListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchCompanyEditListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchCompanyTodoListItem
    {
        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceType { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyIDNo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchCompanyTodoListResp
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchCompanyTodoListItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchCompanyTodoListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchCompanyTodoListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfCompanyInfoAddress
    {
        [Newtonsoft.Json.JsonProperty("addressLV1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLV1 { get; set; }

        [Newtonsoft.Json.JsonProperty("addressLV2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLV2 { get; set; }

        [Newtonsoft.Json.JsonProperty("addressLV3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLV3 { get; set; }

        [Newtonsoft.Json.JsonProperty("addressLV4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLV4 { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfCompanyInfoAttachment
    {
        [Newtonsoft.Json.JsonProperty("isEnable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsEnable { get; set; }

        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }

        [Newtonsoft.Json.JsonProperty("guid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Guid { get; set; }

        [Newtonsoft.Json.JsonProperty("uploadDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UploadDate { get; set; }

        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpiryDate { get; set; }

        [Newtonsoft.Json.JsonProperty("desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Desc { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfCompanyInfoPayment
    {
        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentType { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetCompanyInfoResponse
    {
        [Newtonsoft.Json.JsonProperty("companyReqAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseOfCompanyInfoAddress CompanyReqAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("billingAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseOfCompanyInfoAddress BillingAddress { get; set; }

        /// <summary>聯絡窗口</summary>
        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPerson { get; set; }

        /// <summary>聯絡電話</summary>
        [Newtonsoft.Json.JsonProperty("contactPhoneNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPhoneNo { get; set; }

        /// <summary>電子信箱</summary>
        [Newtonsoft.Json.JsonProperty("contactEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactEmail { get; set; }

        /// <summary>收款人身分證號</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryIDNo { get; set; }

        /// <summary>收款人姓名</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryName { get; set; }

        /// <summary>收款銀行代碼</summary>
        [Newtonsoft.Json.JsonProperty("bankCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankCode { get; set; }

        /// <summary>收款銀行</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryBank { get; set; }

        /// <summary>收款帳號</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryAccountNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryAccountNo { get; set; }

        /// <summary>支票抬頭</summary>
        [Newtonsoft.Json.JsonProperty("chequePayable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChequePayable { get; set; }

        /// <summary>退佣百分比</summary>
        [Newtonsoft.Json.JsonProperty("commissionRebateRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CommissionRebateRate { get; set; }

        /// <summary>退佣方式</summary>
        [Newtonsoft.Json.JsonProperty("commissionRebateDeduct", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommissionRebateDeduct { get; set; }

        /// <summary>是否有配合</summary>
        [Newtonsoft.Json.JsonProperty("isCooperator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IsCooperator { get; set; }

        /// <summary>保經公司</summary>
        [Newtonsoft.Json.JsonProperty("cib", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cib { get; set; }

        /// <summary>保經公司帳號</summary>
        [Newtonsoft.Json.JsonProperty("cibAccountNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CibAccountNo { get; set; }

        /// <summary>保險公司申請檔 ID</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyApplyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InsuranceCompanyApplyId { get; set; }

        /// <summary>保險公司正式檔 ID</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InsuranceCompanyId { get; set; }

        /// <summary>保險公司類型</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyType { get; set; }

        /// <summary>保險公司代碼</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyCode { get; set; }

        /// <summary>保險公司</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyName { get; set; }

        /// <summary>險種</summary>
        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceType { get; set; }

        /// <summary>保險公司統編</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyIDNo { get; set; }

        /// <summary>撥款幣別</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("processId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessId { get; set; }

        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId { get; set; }

        [Newtonsoft.Json.JsonProperty("attachment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CaseOfCompanyInfoAttachment> Attachment { get; set; }

        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CaseOfCompanyInfoPayment> Payment { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetCompanyInfoResponseResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetCompanyInfoResponse Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Remit
    {
        [Newtonsoft.Json.JsonProperty("beneficiaryIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryIDNo { get; set; }

        [Newtonsoft.Json.JsonProperty("beneficiaryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryName { get; set; }

        [Newtonsoft.Json.JsonProperty("bankCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankCode { get; set; }

        [Newtonsoft.Json.JsonProperty("beneficiaryBank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryBank { get; set; }

        [Newtonsoft.Json.JsonProperty("beneficiaryAccountNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryAccountNo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Cheque
    {
        [Newtonsoft.Json.JsonProperty("chequePayable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChequePayable { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetInsuranceCompanyInfoResponse
    {
        [Newtonsoft.Json.JsonProperty("remits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Remit> Remits { get; set; }

        [Newtonsoft.Json.JsonProperty("cheques", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Cheque> Cheques { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetInsuranceCompanyInfoResponseResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetInsuranceCompanyInfoResponse Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerApplyCompanyAddress
    {
        [Newtonsoft.Json.JsonProperty("addressLV1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string AddressLV1 { get; set; }

        [Newtonsoft.Json.JsonProperty("addressLV2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string AddressLV2 { get; set; }

        [Newtonsoft.Json.JsonProperty("addressLV3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string AddressLV3 { get; set; }

        [Newtonsoft.Json.JsonProperty("addressLV4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string AddressLV4 { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string Address { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerApplyCompanyAttachment
    {
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string DocumentType { get; set; }

        [Newtonsoft.Json.JsonProperty("guid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Guid { get; set; }

        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string FileName { get; set; }

        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpiryDate { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string Status { get; set; }

        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Reason { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerApplyCompanyPayment
    {
        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ProductName { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string PaymentType { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerSaveCompanyReq
    {
        /// <summary>是否起新版本維護</summary>
        [Newtonsoft.Json.JsonProperty("isModify", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsModify { get; set; }

        /// <summary>保險公司申請檔 ID</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyApplyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InsuranceCompanyApplyId { get; set; }

        /// <summary>保險公司類型</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string InsuranceCompanyType { get; set; }

        /// <summary>保險公司代碼</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string InsuranceCompanyCode { get; set; }

        /// <summary>BPM Description</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        /// <summary>保險公司</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string InsuranceCompanyName { get; set; }

        /// <summary>險種</summary>
        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string InsuranceType { get; set; }

        /// <summary>保險公司統編</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string InsuranceCompanyIDNo { get; set; }

        [Newtonsoft.Json.JsonProperty("companyReqAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseOfficerApplyCompanyAddress CompanyReqAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("billingAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseOfficerApplyCompanyAddress BillingAddress { get; set; }

        /// <summary>聯絡窗口</summary>
        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ContactPerson { get; set; }

        /// <summary>聯絡電話</summary>
        [Newtonsoft.Json.JsonProperty("contactPhoneNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ContactPhoneNo { get; set; }

        /// <summary>電子信箱</summary>
        [Newtonsoft.Json.JsonProperty("contactEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ContactEmail { get; set; }

        /// <summary>收款人身分證號</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BeneficiaryIDNo { get; set; }

        /// <summary>收款人姓名</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BeneficiaryName { get; set; }

        /// <summary>收款銀行代碼</summary>
        [Newtonsoft.Json.JsonProperty("bankCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BankCode { get; set; }

        /// <summary>收款銀行</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BeneficiaryBank { get; set; }

        /// <summary>收款帳號</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryAccountNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BeneficiaryAccountNo { get; set; }

        /// <summary>支票抬頭</summary>
        [Newtonsoft.Json.JsonProperty("chequePayable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ChequePayable { get; set; }

        /// <summary>退佣百分比</summary>
        [Newtonsoft.Json.JsonProperty("commissionRebateRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 9999.9999D)]
        public double? CommissionRebateRate { get; set; }

        /// <summary>退佣方式</summary>
        [Newtonsoft.Json.JsonProperty("commissionRebateDeduct", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string CommissionRebateDeduct { get; set; }

        /// <summary>是否有配合</summary>
        [Newtonsoft.Json.JsonProperty("isCooperator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string IsCooperator { get; set; }

        /// <summary>保經公司</summary>
        [Newtonsoft.Json.JsonProperty("cib", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Cib { get; set; }

        /// <summary>保經公司帳號</summary>
        [Newtonsoft.Json.JsonProperty("cibAccountNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string CibAccountNo { get; set; }

        /// <summary>撥款幣別</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("attachment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CaseOfficerApplyCompanyAttachment> Attachment { get; set; }

        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CaseOfficerApplyCompanyPayment> Payment { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerApplyCompanyResp
    {
        [Newtonsoft.Json.JsonProperty("insuranceCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyCode { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyApplyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompanyApplyId { get; set; }

        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerApplyCompanyRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseOfficerApplyCompanyResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerSubmitCompanyReq
    {
        /// <summary>是否起新版本維護</summary>
        [Newtonsoft.Json.JsonProperty("isModify", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsModify { get; set; }

        /// <summary>保險公司申請檔 ID</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyApplyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InsuranceCompanyApplyId { get; set; }

        /// <summary>保險公司類型</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string InsuranceCompanyType { get; set; }

        /// <summary>保險公司代碼</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string InsuranceCompanyCode { get; set; }

        /// <summary>BPM Description</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        /// <summary>保險公司</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string InsuranceCompanyName { get; set; }

        /// <summary>險種</summary>
        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string InsuranceType { get; set; }

        /// <summary>保險公司統編</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string InsuranceCompanyIDNo { get; set; }

        [Newtonsoft.Json.JsonProperty("companyReqAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseOfficerApplyCompanyAddress CompanyReqAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("billingAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseOfficerApplyCompanyAddress BillingAddress { get; set; }

        /// <summary>聯絡窗口</summary>
        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ContactPerson { get; set; }

        /// <summary>聯絡電話</summary>
        [Newtonsoft.Json.JsonProperty("contactPhoneNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ContactPhoneNo { get; set; }

        /// <summary>電子信箱</summary>
        [Newtonsoft.Json.JsonProperty("contactEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ContactEmail { get; set; }

        /// <summary>收款人身分證號</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BeneficiaryIDNo { get; set; }

        /// <summary>收款人姓名</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BeneficiaryName { get; set; }

        /// <summary>收款銀行代碼</summary>
        [Newtonsoft.Json.JsonProperty("bankCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BankCode { get; set; }

        /// <summary>收款銀行</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryBank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BeneficiaryBank { get; set; }

        /// <summary>收款帳號</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryAccountNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BeneficiaryAccountNo { get; set; }

        /// <summary>支票抬頭</summary>
        [Newtonsoft.Json.JsonProperty("chequePayable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ChequePayable { get; set; }

        /// <summary>退佣百分比</summary>
        [Newtonsoft.Json.JsonProperty("commissionRebateRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 9999.9999D)]
        public double? CommissionRebateRate { get; set; }

        /// <summary>退佣方式</summary>
        [Newtonsoft.Json.JsonProperty("commissionRebateDeduct", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string CommissionRebateDeduct { get; set; }

        /// <summary>是否有配合</summary>
        [Newtonsoft.Json.JsonProperty("isCooperator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string IsCooperator { get; set; }

        /// <summary>保經公司</summary>
        [Newtonsoft.Json.JsonProperty("cib", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Cib { get; set; }

        /// <summary>保經公司帳號</summary>
        [Newtonsoft.Json.JsonProperty("cibAccountNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string CibAccountNo { get; set; }

        /// <summary>撥款幣別</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("attachment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CaseOfficerApplyCompanyAttachment> Attachment { get; set; }

        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CaseOfficerApplyCompanyPayment> Payment { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerCancelCompanyReq
    {
        [Newtonsoft.Json.JsonProperty("insuranceCompanyApplyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompanyApplyId { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerCancelCompanyResp
    {
        [Newtonsoft.Json.JsonProperty("isSuccess", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSuccess { get; set; }

        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerCancelCompanyRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseOfficerCancelCompanyResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ManagerApproveCompanyInfoReq
    {
        /// <summary>BPM Condition</summary>
        [Newtonsoft.Json.JsonProperty("condition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Condition { get; set; }

        /// <summary>BPM 備註</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        /// <summary>公司Id</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyApplyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompanyApplyId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ManagerApproveCompanyInfoResp
    {
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ManagerApproveCompanyInfoRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ManagerApproveCompanyInfoResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CompanyAttach
    {
        [Newtonsoft.Json.JsonProperty("guid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Guid { get; set; }

        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetCompanyAttachResp
    {
        [Newtonsoft.Json.JsonProperty("companyAttachList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CompanyAttach> CompanyAttachList { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetCompanyAttachRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetCompanyAttachResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchInsuranceForToBePolicyToDoListItem
    {
        [Newtonsoft.Json.JsonProperty("insuranceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceNo { get; set; }

        [Newtonsoft.Json.JsonProperty("applicationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("quotedNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotedNo { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchInsuranceForToBePolicyToDoListResp
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchInsuranceForToBePolicyToDoListItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchInsuranceForToBePolicyToDoListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchInsuranceForToBePolicyToDoListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchDisbursementToDoListItem
    {
        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("disbmtItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbmtItem { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceDisbmtDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceDisbmtDate { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyWithDealer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyWithDealer { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchDisbursementToDoListResp
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchDisbursementToDoListItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchDisbursementToDoListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchDisbursementToDoListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchDisbursementInfoReq
    {
        [Newtonsoft.Json.JsonProperty("disbmtItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbmtItem { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompanyId { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerCode { get; set; }

        [Newtonsoft.Json.JsonProperty("disbursementCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbursementCurrency { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchDisbursementRemit
    {
        [Newtonsoft.Json.JsonProperty("beneficiaryIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryIDNo { get; set; }

        [Newtonsoft.Json.JsonProperty("beneficiaryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryName { get; set; }

        [Newtonsoft.Json.JsonProperty("bankCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankCode { get; set; }

        [Newtonsoft.Json.JsonProperty("beneficiaryBank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryBank { get; set; }

        [Newtonsoft.Json.JsonProperty("beneficiaryAccountNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryAccountNo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchDisbursementCheque
    {
        [Newtonsoft.Json.JsonProperty("chequePayable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChequePayable { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchDisbursementInfoResp
    {
        [Newtonsoft.Json.JsonProperty("insuranceDisbmtDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceDisbmtDate { get; set; }

        [Newtonsoft.Json.JsonProperty("remits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchDisbursementRemit> Remits { get; set; }

        [Newtonsoft.Json.JsonProperty("cheques", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchDisbursementCheque> Cheques { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchDisbursementInfoRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchDisbursementInfoResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchDisbursementItemReq
    {
        [Newtonsoft.Json.JsonProperty("disbmtItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbmtItem { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompanyId { get; set; }

        [Newtonsoft.Json.JsonProperty("policyIssueStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyIssueStartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("policyIssueEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyIssueEndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerCode { get; set; }

        [Newtonsoft.Json.JsonProperty("disbursementCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbursementCurrency { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchDisbursementInsuranceItem
    {
        [Newtonsoft.Json.JsonProperty("insuranceForDisbursementId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceForDisbursementId { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Status { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceNo { get; set; }

        [Newtonsoft.Json.JsonProperty("disbmtItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbmtItem { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceType { get; set; }

        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        [Newtonsoft.Json.JsonProperty("policyIssueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyIssueDate { get; set; }

        [Newtonsoft.Json.JsonProperty("actualPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ActualPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("commissionSharing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CommissionSharing { get; set; }

        [Newtonsoft.Json.JsonProperty("totalTaxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalTaxes { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyName { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchDisbursementIncentiveItem
    {
        [Newtonsoft.Json.JsonProperty("insuranceForDisbursementId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceForDisbursementId { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Status { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceNo { get; set; }

        [Newtonsoft.Json.JsonProperty("disbmtItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbmtItem { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyName { get; set; }

        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        [Newtonsoft.Json.JsonProperty("policyIssueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyIssueDate { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerIncentive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DealerIncentive { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerName { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchDisbursementItemResp
    {
        [Newtonsoft.Json.JsonProperty("disbursementInsuranceItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchDisbursementInsuranceItem> DisbursementInsuranceItem { get; set; }

        [Newtonsoft.Json.JsonProperty("disbursementIncentiveItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchDisbursementIncentiveItem> DisbursementIncentiveItem { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchDisbursementItemRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchDisbursementItemResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ManagerApproveDisbursementReq
    {
        /// <summary>BPM Condition</summary>
        [Newtonsoft.Json.JsonProperty("condition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Condition { get; set; }

        /// <summary>BPM 備註</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ManagerApproveDisbursementResp
    {
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ManagerApproveDisbursementRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ManagerApproveDisbursementResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DisbmtApplyItem
    {
        [Newtonsoft.Json.JsonProperty("insuranceForDisbursementId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceForDisbursementId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerApplyDisbmtSaveReq
    {
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("disbmtItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DisbmtItem { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InsuranceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DealerCode { get; set; }

        [Newtonsoft.Json.JsonProperty("disbursementCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbursementCurrency { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string PaymentMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceDisbmtDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceDisbmtDate { get; set; }

        [Newtonsoft.Json.JsonProperty("beneficiaryIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BeneficiaryIDNo { get; set; }

        [Newtonsoft.Json.JsonProperty("beneficiaryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BeneficiaryName { get; set; }

        [Newtonsoft.Json.JsonProperty("bankCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BankCode { get; set; }

        [Newtonsoft.Json.JsonProperty("beneficiaryBank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BeneficiaryBank { get; set; }

        [Newtonsoft.Json.JsonProperty("beneficiaryAccountNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BeneficiaryAccountNo { get; set; }

        [Newtonsoft.Json.JsonProperty("chequePayable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ChequePayable { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("disbmtApplyItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DisbmtApplyItem> DisbmtApplyItems { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerDisbmtApplyResp
    {
        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerDisbmtApplyRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseOfficerDisbmtApplyResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerApplyDisbmtSubmitReq
    {
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("disbmtItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DisbmtItem { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InsuranceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DealerCode { get; set; }

        [Newtonsoft.Json.JsonProperty("disbursementCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbursementCurrency { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string PaymentMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceDisbmtDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceDisbmtDate { get; set; }

        [Newtonsoft.Json.JsonProperty("beneficiaryIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BeneficiaryIDNo { get; set; }

        [Newtonsoft.Json.JsonProperty("beneficiaryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BeneficiaryName { get; set; }

        [Newtonsoft.Json.JsonProperty("bankCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BankCode { get; set; }

        [Newtonsoft.Json.JsonProperty("beneficiaryBank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BeneficiaryBank { get; set; }

        [Newtonsoft.Json.JsonProperty("beneficiaryAccountNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BeneficiaryAccountNo { get; set; }

        [Newtonsoft.Json.JsonProperty("chequePayable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ChequePayable { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("disbmtApplyItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DisbmtApplyItem> DisbmtApplyItems { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerApplyDisbmtCancelReq
    {
        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerCancelDisbursementResp
    {
        [Newtonsoft.Json.JsonProperty("isSuccess", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSuccess { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerCancelDisbursementRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseOfficerCancelDisbursementResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DisbursementInsuranceItem
    {
        [Newtonsoft.Json.JsonProperty("insuranceForDisbursementId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceForDisbursementId { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Status { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceNo { get; set; }

        [Newtonsoft.Json.JsonProperty("disbmtItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbmtItem { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceType { get; set; }

        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        [Newtonsoft.Json.JsonProperty("policyIssueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyIssueDate { get; set; }

        [Newtonsoft.Json.JsonProperty("actualPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ActualPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("commissionSharing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CommissionSharing { get; set; }

        [Newtonsoft.Json.JsonProperty("totalTaxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalTaxes { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyName { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DisbursementIncentiveItem
    {
        [Newtonsoft.Json.JsonProperty("insuranceForDisbursementId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceForDisbursementId { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Status { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceNo { get; set; }

        [Newtonsoft.Json.JsonProperty("disbmtItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbmtItem { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyName { get; set; }

        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        [Newtonsoft.Json.JsonProperty("policyIssueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyIssueDate { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerIncentive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DealerIncentive { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerName { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DisbursementRemit
    {
        [Newtonsoft.Json.JsonProperty("beneficiaryIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryIDNo { get; set; }

        [Newtonsoft.Json.JsonProperty("beneficiaryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryName { get; set; }

        [Newtonsoft.Json.JsonProperty("bankCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankCode { get; set; }

        [Newtonsoft.Json.JsonProperty("beneficiaryBank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryBank { get; set; }

        [Newtonsoft.Json.JsonProperty("beneficiaryAccountNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryAccountNo { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DisbursementCheque
    {
        [Newtonsoft.Json.JsonProperty("chequePayable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChequePayable { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetInsuranceDisbursementApplyInfoResp
    {
        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("disbmtItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbmtItem { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InsuranceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerCode { get; set; }

        [Newtonsoft.Json.JsonProperty("disbursementCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbursementCurrency { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("processId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessId { get; set; }

        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceDisbmtDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceDisbmtDate { get; set; }

        [Newtonsoft.Json.JsonProperty("disbursementInsuranceItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DisbursementInsuranceItem> DisbursementInsuranceItem { get; set; }

        [Newtonsoft.Json.JsonProperty("disbursementIncentiveItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DisbursementIncentiveItem> DisbursementIncentiveItem { get; set; }

        [Newtonsoft.Json.JsonProperty("remits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DisbursementRemit> Remits { get; set; }

        [Newtonsoft.Json.JsonProperty("cheques", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DisbursementCheque> Cheques { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetInsuranceDisbursementApplyInfoRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetInsuranceDisbursementApplyInfoResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestQuotationDetailReq
    {
        [Newtonsoft.Json.JsonProperty("quotatioN_ID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotatioN_ID { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestQuotationDetailResp
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

        [Newtonsoft.Json.JsonProperty("quotatioN_STAT", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuotatioN_STAT { get; set; }

        [Newtonsoft.Json.JsonProperty("quotatioN_STAT_NME", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotatioN_STAT_NME { get; set; }

        [Newtonsoft.Json.JsonProperty("quotatioN_ID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotatioN_ID { get; set; }

        [Newtonsoft.Json.JsonProperty("totaL_PAYABLE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotaL_PAYABLE { get; set; }

        [Newtonsoft.Json.JsonProperty("quotatioN_ISSUE_DATE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotatioN_ISSUE_DATE { get; set; }

        [Newtonsoft.Json.JsonProperty("quotatioN_EXPIRY_DATE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotatioN_EXPIRY_DATE { get; set; }

        [Newtonsoft.Json.JsonProperty("lasT_UPDATE_DATE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LasT_UPDATE_DATE { get; set; }

        [Newtonsoft.Json.JsonProperty("paymenT_DONE_DATE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymenT_DONE_DATE { get; set; }

        [Newtonsoft.Json.JsonProperty("quotatioN_CANCEL_DATE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotatioN_CANCEL_DATE { get; set; }

        [Newtonsoft.Json.JsonProperty("aplcnT_ID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AplcnT_ID { get; set; }

        [Newtonsoft.Json.JsonProperty("aplcnT_NME", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AplcnT_NME { get; set; }

        [Newtonsoft.Json.JsonProperty("aO_LIC_NO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AO_LIC_NO { get; set; }

        [Newtonsoft.Json.JsonProperty("insuraN_COMPANY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuraN_COMPANY { get; set; }

        [Newtonsoft.Json.JsonProperty("suM_ASSURED", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SuM_ASSURED { get; set; }

        [Newtonsoft.Json.JsonProperty("gross", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Gross { get; set; }

        [Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Discount { get; set; }

        [Newtonsoft.Json.JsonProperty("s_TAX_GST", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? S_TAX_GST { get; set; }

        [Newtonsoft.Json.JsonProperty("s_DUTY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? S_DUTY { get; set; }

        [Newtonsoft.Json.JsonProperty("roaD_TAX", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RoaD_TAX { get; set; }

        [Newtonsoft.Json.JsonProperty("roaD_TAX_RENEW_FEE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RoaD_TAX_RENEW_FEE { get; set; }

        [Newtonsoft.Json.JsonProperty("reneW_EXCESS_BAL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ReneW_EXCESS_BAL { get; set; }

        [Newtonsoft.Json.JsonProperty("cusT_NAME", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CusT_NAME { get; set; }

        [Newtonsoft.Json.JsonProperty("cusT_ID_NO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CusT_ID_NO { get; set; }

        [Newtonsoft.Json.JsonProperty("celL_PHONE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CelL_PHONE { get; set; }

        [Newtonsoft.Json.JsonProperty("celL_PHONE2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CelL_PHONE2 { get; set; }

        [Newtonsoft.Json.JsonProperty("cusT_EMAIL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CusT_EMAIL { get; set; }

        [Newtonsoft.Json.JsonProperty("ncd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Ncd { get; set; }

        [Newtonsoft.Json.JsonProperty("copY_BUTTON_DISPLAY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CopY_BUTTON_DISPLAY { get; set; }

        [Newtonsoft.Json.JsonProperty("coveR_NOTE_NO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CoveR_NOTE_NO { get; set; }

        [Newtonsoft.Json.JsonProperty("coveR_NOTE_DATE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CoveR_NOTE_DATE { get; set; }

        [Newtonsoft.Json.JsonProperty("insuraN_EXPIRED", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuraN_EXPIRED { get; set; }

        [Newtonsoft.Json.JsonProperty("roaD_TAX_EXPIRED", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RoaD_TAX_EXPIRED { get; set; }

        [Newtonsoft.Json.JsonProperty("filE_SEQ_ID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilE_SEQ_ID { get; set; }

        [Newtonsoft.Json.JsonProperty("filE_DTL_SEQ_ID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FilE_DTL_SEQ_ID { get; set; }

        [Newtonsoft.Json.JsonProperty("filE_TYPE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilE_TYPE { get; set; }

        [Newtonsoft.Json.JsonProperty("filE_NME", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilE_NME { get; set; }

        [Newtonsoft.Json.JsonProperty("paymenT_FAILED", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymenT_FAILED { get; set; }

        [Newtonsoft.Json.JsonProperty("discounT_PERCENTAGE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DiscounT_PERCENTAGE { get; set; }

        [Newtonsoft.Json.JsonProperty("cusT_REMARK", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CusT_REMARK { get; set; }

        [Newtonsoft.Json.JsonProperty("cS_REMARK", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CS_REMARK { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestFileListReq
    {
        [Newtonsoft.Json.JsonProperty("quotatioN_ID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotatioN_ID { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FileList
    {
        [Newtonsoft.Json.JsonProperty("filE_SEQ_ID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilE_SEQ_ID { get; set; }

        [Newtonsoft.Json.JsonProperty("filE_DTL_SEQ_ID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilE_DTL_SEQ_ID { get; set; }

        [Newtonsoft.Json.JsonProperty("orG_FILE_NME", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrG_FILE_NME { get; set; }

        [Newtonsoft.Json.JsonProperty("filE_REM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilE_REM { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EQuotationResult
    {
        [Newtonsoft.Json.JsonProperty("returnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ReturnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("returnMsg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnMsg { get; set; }

        [Newtonsoft.Json.JsonProperty("alert", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Alert { get; set; }

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestFileListResp
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FileList> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EQuotationResult Result { get; set; }

        [Newtonsoft.Json.JsonProperty("erroR_MSG", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErroR_MSG { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestSMSURLReq
    {
        [Newtonsoft.Json.JsonProperty("quotatioN_ID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotatioN_ID { get; set; }

        [Newtonsoft.Json.JsonProperty("cusT_NO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CusT_NO { get; set; }

        [Newtonsoft.Json.JsonProperty("cellphonE_NO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CellphonE_NO { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestSMSURLResp
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestEMAILURLReq
    {
        [Newtonsoft.Json.JsonProperty("quotatioN_ID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotatioN_ID { get; set; }

        [Newtonsoft.Json.JsonProperty("cusT_NO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CusT_NO { get; set; }

        [Newtonsoft.Json.JsonProperty("emaiL_ADDR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmaiL_ADDR { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestEMAILURLResp
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

        [Newtonsoft.Json.JsonProperty("erroR_MSG", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErroR_MSG { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestPayTranIDReq
    {
        [Newtonsoft.Json.JsonProperty("quotatioN_ID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotatioN_ID { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestPayTranIDResp
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

        [Newtonsoft.Json.JsonProperty("transactioN_ID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactioN_ID { get; set; }

        [Newtonsoft.Json.JsonProperty("erroR_MSG", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErroR_MSG { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReturnInsurancePayTraninfReq
    {
        [Newtonsoft.Json.JsonProperty("quotatioN_ID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotatioN_ID { get; set; }

        [Newtonsoft.Json.JsonProperty("transactioN_ID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactioN_ID { get; set; }

        [Newtonsoft.Json.JsonProperty("transactioN_DATETIME", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactioN_DATETIME { get; set; }

        [Newtonsoft.Json.JsonProperty("transactioN_AMOUNT", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactioN_AMOUNT { get; set; }

        [Newtonsoft.Json.JsonProperty("transactioN_STATUS", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactioN_STATUS { get; set; }

        [Newtonsoft.Json.JsonProperty("fpxtxnid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fpxtxnid { get; set; }

        [Newtonsoft.Json.JsonProperty("fpxtxntime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fpxtxntime { get; set; }

        [Newtonsoft.Json.JsonProperty("buyername", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Buyername { get; set; }

        [Newtonsoft.Json.JsonProperty("buyerbankid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Buyerbankid { get; set; }

        [Newtonsoft.Json.JsonProperty("buyerbankbranch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Buyerbankbranch { get; set; }

        [Newtonsoft.Json.JsonProperty("buyerid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Buyerid { get; set; }

        [Newtonsoft.Json.JsonProperty("makername", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Makername { get; set; }

        [Newtonsoft.Json.JsonProperty("buyeriban", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Buyeriban { get; set; }

        [Newtonsoft.Json.JsonProperty("debitauthcode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Debitauthcode { get; set; }

        [Newtonsoft.Json.JsonProperty("debitauthno", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Debitauthno { get; set; }

        [Newtonsoft.Json.JsonProperty("creditauthcode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Creditauthcode { get; set; }

        [Newtonsoft.Json.JsonProperty("creditauthno", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Creditauthno { get; set; }

        [Newtonsoft.Json.JsonProperty("sellerorderno", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sellerorderno { get; set; }

        [Newtonsoft.Json.JsonProperty("sellertxntime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sellertxntime { get; set; }

        [Newtonsoft.Json.JsonProperty("buyerbankname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Buyerbankname { get; set; }

        [Newtonsoft.Json.JsonProperty("accounttype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Accounttype { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReturnInsurancePayTraninfResp
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

        [Newtonsoft.Json.JsonProperty("erroR_MSG", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErroR_MSG { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestQuotationListReq
    {
        [Newtonsoft.Json.JsonProperty("cusT_ID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CusT_ID { get; set; }

        [Newtonsoft.Json.JsonProperty("querY_VECNO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuerY_VECNO { get; set; }

        [Newtonsoft.Json.JsonProperty("querY_CREATE_DT_S", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuerY_CREATE_DT_S { get; set; }

        [Newtonsoft.Json.JsonProperty("querY_CREATE_DT_E", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuerY_CREATE_DT_E { get; set; }

        [Newtonsoft.Json.JsonProperty("pagE_NUM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PagE_NUM { get; set; }

        [Newtonsoft.Json.JsonProperty("pagE_REC_COUNT", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PagE_REC_COUNT { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QuotationList
    {
        [Newtonsoft.Json.JsonProperty("quotatioN_STAT", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotatioN_STAT { get; set; }

        [Newtonsoft.Json.JsonProperty("quotatioN_ID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotatioN_ID { get; set; }

        [Newtonsoft.Json.JsonProperty("insuraN_AMT", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuraN_AMT { get; set; }

        [Newtonsoft.Json.JsonProperty("aO_LIC_NO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AO_LIC_NO { get; set; }

        [Newtonsoft.Json.JsonProperty("cusT_ID_NO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CusT_ID_NO { get; set; }

        [Newtonsoft.Json.JsonProperty("cusT_NAME", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CusT_NAME { get; set; }

        [Newtonsoft.Json.JsonProperty("celL_PHONE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CelL_PHONE { get; set; }

        [Newtonsoft.Json.JsonProperty("quotatioN_ISSUE_DATE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotatioN_ISSUE_DATE { get; set; }

        [Newtonsoft.Json.JsonProperty("quotatioN_EXPIRY_DATE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotatioN_EXPIRY_DATE { get; set; }

        [Newtonsoft.Json.JsonProperty("paymenT_DONE_DATE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymenT_DONE_DATE { get; set; }

        [Newtonsoft.Json.JsonProperty("quotatioN_CANCEL_DATE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotatioN_CANCEL_DATE { get; set; }

        [Newtonsoft.Json.JsonProperty("lasT_UPDATE_DATE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LasT_UPDATE_DATE { get; set; }

        [Newtonsoft.Json.JsonProperty("insuraN_COMPANY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuraN_COMPANY { get; set; }

        [Newtonsoft.Json.JsonProperty("cusT_REMARK", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CusT_REMARK { get; set; }

        [Newtonsoft.Json.JsonProperty("cS_REMARK", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CS_REMARK { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestQuotationListResp
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QuotationList> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EQuotationResult Result { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestQuotationLastOneReq
    {
        [Newtonsoft.Json.JsonProperty("cusT_ID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CusT_ID { get; set; }

        [Newtonsoft.Json.JsonProperty("agreemenT_NO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgreemenT_NO { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QuotationLastList
    {
        [Newtonsoft.Json.JsonProperty("requesT_BUTTON_DISPLAY", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RequesT_BUTTON_DISPLAY { get; set; }

        [Newtonsoft.Json.JsonProperty("quotatioN_STAT", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotatioN_STAT { get; set; }

        [Newtonsoft.Json.JsonProperty("quotatioN_ID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotatioN_ID { get; set; }

        [Newtonsoft.Json.JsonProperty("insuraN_AMT", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuraN_AMT { get; set; }

        [Newtonsoft.Json.JsonProperty("aO_LIC_NO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AO_LIC_NO { get; set; }

        [Newtonsoft.Json.JsonProperty("cusT_ID_NO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CusT_ID_NO { get; set; }

        [Newtonsoft.Json.JsonProperty("cusT_NAME", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CusT_NAME { get; set; }

        [Newtonsoft.Json.JsonProperty("celL_PHONE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CelL_PHONE { get; set; }

        [Newtonsoft.Json.JsonProperty("quotatioN_ISSUE_DATE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotatioN_ISSUE_DATE { get; set; }

        [Newtonsoft.Json.JsonProperty("quotatioN_EXPIRY_DATE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotatioN_EXPIRY_DATE { get; set; }

        [Newtonsoft.Json.JsonProperty("paymenT_DONE_DATE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymenT_DONE_DATE { get; set; }

        [Newtonsoft.Json.JsonProperty("quotatioN_CANCEL_DATE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotatioN_CANCEL_DATE { get; set; }

        [Newtonsoft.Json.JsonProperty("lasT_UPDATE_DATE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LasT_UPDATE_DATE { get; set; }

        [Newtonsoft.Json.JsonProperty("insuraN_COMPANY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuraN_COMPANY { get; set; }

        [Newtonsoft.Json.JsonProperty("totaL_COUNT", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotaL_COUNT { get; set; }

        [Newtonsoft.Json.JsonProperty("cusT_REMARK", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CusT_REMARK { get; set; }

        [Newtonsoft.Json.JsonProperty("cS_REMARK", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CS_REMARK { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestQuotationLastOneResp
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QuotationLastList> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

        [Newtonsoft.Json.JsonProperty("errormsg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Errormsg { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EQuotationResult Result { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestNewQuotationReq
    {
        [Newtonsoft.Json.JsonProperty("agreemenT_NO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgreemenT_NO { get; set; }

        [Newtonsoft.Json.JsonProperty("cusT_REMARK", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CusT_REMARK { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestNewQuotationResp
    {
        [Newtonsoft.Json.JsonProperty("quotatioN_ID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotatioN_ID { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

        [Newtonsoft.Json.JsonProperty("erroR_MSG", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErroR_MSG { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestRoadTaxReq
    {
        [Newtonsoft.Json.JsonProperty("quotatioN_ID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotatioN_ID { get; set; }

        [Newtonsoft.Json.JsonProperty("iS_PAY_ROADTAX", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IS_PAY_ROADTAX { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestRoadTaxResp
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

        [Newtonsoft.Json.JsonProperty("erroR_MSG", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErroR_MSG { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchFinanceFeeToDoListItem
    {
        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InsuranceCompanyId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceType { get; set; }

        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductCode { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("applicationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationDate { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchFinanceFeeToDoListResp
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchFinanceFeeToDoListItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchFinanceFeeToDoListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchFinanceFeeToDoListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerFinanceFeeSetup
    {
        [Newtonsoft.Json.JsonProperty("financeFeeSetupApplyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FinanceFeeSetupApplyId { get; set; }

        [Newtonsoft.Json.JsonProperty("minChargedPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? MinChargedPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("maxChargedPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? MaxChargedPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("financeForPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? FinanceForPremium { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerSaveFinanceFeeReq
    {
        [Newtonsoft.Json.JsonProperty("isUpdating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsUpdating { get; set; }

        [Newtonsoft.Json.JsonProperty("isModify", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsModify { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompanyId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceType { get; set; }

        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductCode { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("financeFeeSetups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CaseOfficerFinanceFeeSetup> FinanceFeeSetups { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerFinanceFeeResp
    {
        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerFinanceFeeRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseOfficerFinanceFeeResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerSubmitFinanceFeeReq
    {
        [Newtonsoft.Json.JsonProperty("isUpdating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsUpdating { get; set; }

        [Newtonsoft.Json.JsonProperty("isModify", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsModify { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompanyId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceType { get; set; }

        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductCode { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("financeFeeSetups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CaseOfficerFinanceFeeSetup> FinanceFeeSetups { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerCancelFinanceFeeReq
    {
        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerCancelFinanceFeeResp
    {
        [Newtonsoft.Json.JsonProperty("isSuccess", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSuccess { get; set; }

        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerCancelFinanceFeeRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseOfficerCancelFinanceFeeResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ManagerApproveFinanceFeeReq
    {
        /// <summary>BPM Condition</summary>
        [Newtonsoft.Json.JsonProperty("condition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Condition { get; set; }

        /// <summary>BPM 備註</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ManagerApproveFinanceFeeResp
    {
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ManagerApproveFinanceFeeRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ManagerApproveFinanceFeeResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerFinanceFeeSetupInfo
    {
        [Newtonsoft.Json.JsonProperty("financeFeeSetupApplyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FinanceFeeSetupApplyId { get; set; }

        [Newtonsoft.Json.JsonProperty("financeFeeSetupId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FinanceFeeSetupId { get; set; }

        [Newtonsoft.Json.JsonProperty("minChargedPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinChargedPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("maxChargedPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxChargedPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("financeForPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FinanceForPremium { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetFinanceFeeApplyInfoResp
    {
        [Newtonsoft.Json.JsonProperty("processId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessId { get; set; }

        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId { get; set; }

        [Newtonsoft.Json.JsonProperty("isModify", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsModify { get; set; }

        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompanyId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceType { get; set; }

        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductCode { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("isUpdating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsUpdating { get; set; }

        [Newtonsoft.Json.JsonProperty("financeFeeSetups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CaseOfficerFinanceFeeSetupInfo> FinanceFeeSetups { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetFinanceFeeApplyInfoRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetFinanceFeeApplyInfoResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InsuranceCustomerInfoReq
    {
        /// <summary>中租公司代碼</summary>
        [Newtonsoft.Json.JsonProperty("companyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CompanyId { get; set; }

        /// <summary>客戶類型(自然人/法人) Ind / Cor</summary>
        [Newtonsoft.Json.JsonProperty("identityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentityType { get; set; }

        /// <summary>證件類別</summary>
        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationType { get; set; }

        /// <summary>身分證號/統一證號</summary>
        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InsuranceCustomerInfoResp
    {
        /// <summary>客戶類型(自然人 / 法人) Ind / Cor</summary>
        [Newtonsoft.Json.JsonProperty("identityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentityType { get; set; }

        /// <summary>證件類別</summary>
        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationType { get; set; }

        /// <summary>身分證號 / 統一證號</summary>
        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNo { get; set; }

        /// <summary>客戶名</summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        /// <summary>客戶姓</summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>客戶姓名 / 公司名稱</summary>
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        /// <summary>負責人姓名</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonName { get; set; }

        /// <summary>負責人證件類別</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonIdentificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonIdentificationType { get; set; }

        /// <summary>負責人身分證號</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonIDNo { get; set; }

        /// <summary>負責人生日</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonBirthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ResponsiblePersonBirthDate { get; set; }

        /// <summary>性別 / 公司負責人性別(中租共用 Gender)</summary>
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gender { get; set; }

        /// <summary>出生日期 / 公司註冊日期 yyyy/MM/dd</summary>
        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? BirthDate { get; set; }

        /// <summary>戶籍地址 / 公司註冊地址Level1 (中租共用 AddressLevel1)</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel1 { get; set; }

        /// <summary>戶籍地址 / 公司註冊地址Level2 (中租共用 AddressLevel2)</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel2 { get; set; }

        /// <summary>戶籍地址 / 公司註冊地址Level3 (中租共用 AddressLevel3)</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel3 { get; set; }

        /// <summary>戶籍地址 / 公司註冊地址Level4 (中租共用 AddressLevel4)</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel4 { get; set; }

        /// <summary>戶籍地址 / 公司註冊地址</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddress { get; set; }

        /// <summary>聯絡地址Level1 (中租共用 AddressLevel)</summary>
        [Newtonsoft.Json.JsonProperty("contactAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel1 { get; set; }

        /// <summary>聯絡地址Level2 (中租共用 AddressLeve2)</summary>
        [Newtonsoft.Json.JsonProperty("contactAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel2 { get; set; }

        /// <summary>聯絡地址Level3 (中租共用 AddressLeve3)</summary>
        [Newtonsoft.Json.JsonProperty("contactAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel3 { get; set; }

        /// <summary>聯絡地址Level4 (中租共用 AddressLeve4)</summary>
        [Newtonsoft.Json.JsonProperty("contactAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel4 { get; set; }

        /// <summary>聯絡地址</summary>
        [Newtonsoft.Json.JsonProperty("contactAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddress { get; set; }

        /// <summary>聯絡電話</summary>
        [Newtonsoft.Json.JsonProperty("contactPhoneNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPhoneNo { get; set; }

        /// <summary>電子信箱</summary>
        [Newtonsoft.Json.JsonProperty("contactEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactEmail { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InsuranceCustomerInfoRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InsuranceCustomerInfoResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QuotationInfoReq
    {
        /// <summary>公司代號</summary>
        [Newtonsoft.Json.JsonProperty("companyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CompanyId { get; set; }

        /// <summary>報價單號</summary>
        [Newtonsoft.Json.JsonProperty("quotedNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotedNo { get; set; }

        /// <summary>批號</summary>
        [Newtonsoft.Json.JsonProperty("batchNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchNo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum FromSource
    {
        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Attachment
    {
        [Newtonsoft.Json.JsonProperty("fileGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string FileGuid { get; set; }

        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string FileName { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QuotationInfoResp
    {
        /// <summary>與案件相關保險或純保險</summary>
        [Newtonsoft.Json.JsonProperty("isCaseRelated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsCaseRelated { get; set; }

        /// <summary>案件編號</summary>
        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }

        /// <summary>契約編號</summary>
        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        /// <summary>客戶類型</summary>
        [Newtonsoft.Json.JsonProperty("identityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentityType { get; set; }

        /// <summary>要保人名</summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        /// <summary>要保人姓</summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>要保人姓名/公司名稱</summary>
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        /// <summary>客戶代碼</summary>
        [Newtonsoft.Json.JsonProperty("cifNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CifNo { get; set; }

        /// <summary>識別類型</summary>
        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationType { get; set; }

        /// <summary>客戶統編/身份證號</summary>
        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNo { get; set; }

        /// <summary>負責人姓名</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonName { get; set; }

        /// <summary>負責人證件類別</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonIdentificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonIdentificationType { get; set; }

        /// <summary>負責人身分證號</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonIDNo { get; set; }

        /// <summary>負責人生日負責人生日</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonBirthdate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonBirthdate { get; set; }

        /// <summary>性別/公司負責人性別</summary>
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gender { get; set; }

        /// <summary>出生日期/公司註冊日期</summary>
        [Newtonsoft.Json.JsonProperty("birthdate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Birthdate { get; set; }

        /// <summary>戶籍地址/公司註冊地址Level1</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel1 { get; set; }

        /// <summary>戶籍地址/公司註冊地址Level2</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel2 { get; set; }

        /// <summary>戶籍地址/公司註冊地址Level3</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel3 { get; set; }

        /// <summary>戶籍地址/公司註冊地址Level4</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel4 { get; set; }

        /// <summary>戶籍地址/公司註冊地址</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddress { get; set; }

        /// <summary>聯絡地址Level1</summary>
        [Newtonsoft.Json.JsonProperty("contactAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel1 { get; set; }

        /// <summary>聯絡地址Level2</summary>
        [Newtonsoft.Json.JsonProperty("contactAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel2 { get; set; }

        /// <summary>聯絡地址Level3</summary>
        [Newtonsoft.Json.JsonProperty("contactAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel3 { get; set; }

        /// <summary>聯絡地址Level4</summary>
        [Newtonsoft.Json.JsonProperty("contactAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel4 { get; set; }

        /// <summary>聯絡地址</summary>
        [Newtonsoft.Json.JsonProperty("contactAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddress { get; set; }

        /// <summary>聯絡電話</summary>
        [Newtonsoft.Json.JsonProperty("contactPhoneNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPhoneNo { get; set; }

        /// <summary>電子信箱</summary>
        [Newtonsoft.Json.JsonProperty("contactEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactEmail { get; set; }

        /// <summary>供應商代碼</summary>
        [Newtonsoft.Json.JsonProperty("dealerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerCode { get; set; }

        /// <summary>供應商名稱</summary>
        [Newtonsoft.Json.JsonProperty("dealerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerName { get; set; }

        /// <summary>供應商業務人員代碼</summary>
        [Newtonsoft.Json.JsonProperty("dealerSalesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerSalesCode { get; set; }

        /// <summary>供應商業務人員姓名</summary>
        [Newtonsoft.Json.JsonProperty("dealerSales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerSales { get; set; }

        /// <summary>經銷商代碼</summary>
        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCode { get; set; }

        /// <summary>經銷商名稱</summary>
        [Newtonsoft.Json.JsonProperty("agentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentName { get; set; }

        /// <summary>中租業務人員代碼</summary>
        [Newtonsoft.Json.JsonProperty("salesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesCode { get; set; }

        /// <summary>中租業務人員姓名</summary>
        [Newtonsoft.Json.JsonProperty("salesName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesName { get; set; }

        /// <summary>險種</summary>
        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceType { get; set; }

        /// <summary>貸款金額</summary>
        [Newtonsoft.Json.JsonProperty("financeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FinanceAmount { get; set; }

        /// <summary>承作期數</summary>
        [Newtonsoft.Json.JsonProperty("financeTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FinanceTerms { get; set; }

        /// <summary>產品類別</summary>
        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductCode { get; set; }

        /// <summary>擔保品性質</summary>
        [Newtonsoft.Json.JsonProperty("collateralProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralProperty { get; set; }

        /// <summary>擔保品類型</summary>
        [Newtonsoft.Json.JsonProperty("collateralType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralType { get; set; }

        /// <summary>擔保品序號</summary>
        [Newtonsoft.Json.JsonProperty("subNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubNo { get; set; }

        /// <summary>規格型式</summary>
        [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Model { get; set; }

        /// <summary>車牌號碼</summary>
        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }

        /// <summary>年份</summary>
        [Newtonsoft.Json.JsonProperty("manufactureYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufactureYear { get; set; }

        /// <summary>廠牌</summary>
        [Newtonsoft.Json.JsonProperty("vehicleBrand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VehicleBrand { get; set; }

        /// <summary>引擎號碼</summary>
        [Newtonsoft.Json.JsonProperty("engineNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EngineNo { get; set; }

        /// <summary>底盤號碼</summary>
        [Newtonsoft.Json.JsonProperty("chassisNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChassisNo { get; set; }

        /// <summary>客戶配合之租賃公司</summary>
        [Newtonsoft.Json.JsonProperty("financeCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinanceCompany { get; set; }

        /// <summary>舊車賣掉的保險折扣%</summary>
        [Newtonsoft.Json.JsonProperty("ncd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Ncd { get; set; }

        /// <summary>賣掉的舊車車牌號碼</summary>
        [Newtonsoft.Json.JsonProperty("ncdPlateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NcdPlateNo { get; set; }

        /// <summary>加保-鏡子破裂</summary>
        [Newtonsoft.Json.JsonProperty("windscreenCoverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WindscreenCoverage { get; set; }

        /// <summary>保險價值</summary>
        [Newtonsoft.Json.JsonProperty("insuredValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InsuredValue { get; set; }

        /// <summary>加保-保障除了主駕外的駕駛</summary>
        [Newtonsoft.Json.JsonProperty("additionalDriver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AdditionalDriver { get; set; }

        /// <summary>加保-駕駛受傷(賠償車子的錢)</summary>
        [Newtonsoft.Json.JsonProperty("personalAccident", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PersonalAccident { get; set; }

        /// <summary>加保-開車門撞到機車</summary>
        [Newtonsoft.Json.JsonProperty("legalLiabilityOfPassenger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LegalLiabilityOfPassenger { get; set; }

        /// <summary>加保-副駕受傷賠償</summary>
        [Newtonsoft.Json.JsonProperty("legalLiabilityToPassenger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LegalLiabilityToPassenger { get; set; }

        /// <summary>備註</summary>
        [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Remark { get; set; }

        /// <summary>年度</summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Year { get; set; }

        /// <summary>申請日期</summary>
        [Newtonsoft.Json.JsonProperty("applicationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationDate { get; set; }

        /// <summary>報價日期</summary>
        [Newtonsoft.Json.JsonProperty("quotedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotedDate { get; set; }

        /// <summary>報價單號</summary>
        [Newtonsoft.Json.JsonProperty("quotedNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotedNo { get; set; }

        /// <summary>保險公司代碼</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompanyId { get; set; }

        /// <summary>保險起始日</summary>
        [Newtonsoft.Json.JsonProperty("insuranceStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceStartDate { get; set; }

        /// <summary>實際保額</summary>
        [Newtonsoft.Json.JsonProperty("actualSumInsured", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ActualSumInsured { get; set; }

        /// <summary>申請保額</summary>
        [Newtonsoft.Json.JsonProperty("applySumInsured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ApplySumInsured { get; set; }

        /// <summary>實際保費</summary>
        [Newtonsoft.Json.JsonProperty("actualPremium", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ActualPremium { get; set; }

        /// <summary>撥款幣別</summary>
        [Newtonsoft.Json.JsonProperty("disbursementCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbursementCurrency { get; set; }

        /// <summary>客戶應付保費</summary>
        [Newtonsoft.Json.JsonProperty("chargedPremium", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ChargedPremium { get; set; }

        /// <summary>保費</summary>
        [Newtonsoft.Json.JsonProperty("grossPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossPremium { get; set; }

        /// <summary>印花稅</summary>
        [Newtonsoft.Json.JsonProperty("stampDuty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StampDuty { get; set; }

        /// <summary>服務稅</summary>
        [Newtonsoft.Json.JsonProperty("serviceTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ServiceTax { get; set; }

        /// <summary>道路稅</summary>
        [Newtonsoft.Json.JsonProperty("roadTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RoadTax { get; set; }

        /// <summary>道路稅服務費</summary>
        [Newtonsoft.Json.JsonProperty("roadTaxFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RoadTaxFee { get; set; }

        /// <summary>折扣</summary>
        [Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Discount { get; set; }

        /// <summary>稅費</summary>
        [Newtonsoft.Json.JsonProperty("totalTaxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalTaxes { get; set; }

        /// <summary>承辦幣別</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCurrency { get; set; }

        /// <summary>還款計畫</summary>
        [Newtonsoft.Json.JsonProperty("repaymentPlan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepaymentPlan { get; set; }

        /// <summary>是否有效</summary>
        [Newtonsoft.Json.JsonProperty("isValid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsValid { get; set; }

        /// <summary>是否更新中</summary>
        [Newtonsoft.Json.JsonProperty("isUpdating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsUpdating { get; set; }

        /// <summary>批號</summary>
        [Newtonsoft.Json.JsonProperty("batchNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchNo { get; set; }

        /// <summary>Equotation付款連結</summary>
        [Newtonsoft.Json.JsonProperty("eQuotationLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EQuotationLink { get; set; }

        /// <summary>Equotation狀態</summary>
        [Newtonsoft.Json.JsonProperty("equotationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EquotationStatus { get; set; }

        /// <summary>Equotation付款完成日期</summary>
        [Newtonsoft.Json.JsonProperty("equotationPaymentDoneDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EquotationPaymentDoneDate { get; set; }

        /// <summary>Equotation付款KEY</summary>
        [Newtonsoft.Json.JsonProperty("equotationSellerOrderNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EquotationSellerOrderNo { get; set; }

        /// <summary>客戶留言</summary>
        [Newtonsoft.Json.JsonProperty("customerRemark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerRemark { get; set; }

        /// <summary>客服留言</summary>
        [Newtonsoft.Json.JsonProperty("customerServicesRemark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerServicesRemark { get; set; }

        [Newtonsoft.Json.JsonProperty("fromSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FromSource FromSource { get; set; }

        /// <summary>起單人</summary>
        [Newtonsoft.Json.JsonProperty("csId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CsId { get; set; }

        /// <summary>起單人部門別</summary>
        [Newtonsoft.Json.JsonProperty("csDeptId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CsDeptId { get; set; }

        /// <summary>附件</summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Attachment> Attachments { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QuotationInfoRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuotationInfoResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateForQuoteListAttachment
    {
        [Newtonsoft.Json.JsonProperty("guid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Guid { get; set; }

        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string FileName { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QuotationYear
    {
        /// <summary>報價年度</summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Year { get; set; }

        /// <summary>申請日期</summary>
        [Newtonsoft.Json.JsonProperty("applicationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ApplicationDate { get; set; }

        /// <summary>保險公司代碼</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InsuranceCompanyId { get; set; }

        /// <summary>保險起始日</summary>
        [Newtonsoft.Json.JsonProperty("insuranceStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InsuranceStartDate { get; set; }

        /// <summary>實際保額</summary>
        [Newtonsoft.Json.JsonProperty("actualSumInsured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? ActualSumInsured { get; set; }

        /// <summary>申請保額</summary>
        [Newtonsoft.Json.JsonProperty("applySumInsured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? ApplySumInsured { get; set; }

        /// <summary>實際保額</summary>
        [Newtonsoft.Json.JsonProperty("actualPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? ActualPremium { get; set; }

        /// <summary>撥款幣別</summary>
        [Newtonsoft.Json.JsonProperty("disbursementCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DisbursementCurrency { get; set; }

        /// <summary>客戶應付保費</summary>
        [Newtonsoft.Json.JsonProperty("chargedPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? ChargedPremium { get; set; }

        /// <summary>客戶應付保費</summary>
        [Newtonsoft.Json.JsonProperty("grossPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? GrossPremium { get; set; }

        /// <summary>印花稅</summary>
        [Newtonsoft.Json.JsonProperty("stampDuty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? StampDuty { get; set; }

        /// <summary>服務稅</summary>
        [Newtonsoft.Json.JsonProperty("serviceTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? ServiceTax { get; set; }

        /// <summary>道路稅</summary>
        [Newtonsoft.Json.JsonProperty("roadTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? RoadTax { get; set; }

        /// <summary>道路稅服務費</summary>
        [Newtonsoft.Json.JsonProperty("roadTaxFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? RoadTaxFee { get; set; }

        /// <summary>折扣</summary>
        [Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? Discount { get; set; }

        /// <summary>稅費</summary>
        [Newtonsoft.Json.JsonProperty("totalTaxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? TotalTaxes { get; set; }

        /// <summary>案件幣別</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string InsuranceCurrency { get; set; }

        /// <summary>附件</summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CreateForQuoteListAttachment> Attachments { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateForQuoteListReq
    {
        /// <summary>中租公司代碼</summary>
        [Newtonsoft.Json.JsonProperty("companyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CompanyId { get; set; }

        /// <summary>是否案件相關</summary>
        [Newtonsoft.Json.JsonProperty("isCaseRelated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsCaseRelated { get; set; }

        /// <summary>案件編號</summary>
        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CaseNo { get; set; }

        /// <summary>契約編號</summary>
        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ContractNo { get; set; }

        /// <summary>客戶類別 (自然人 / 法人) Ind / Cor</summary>
        [Newtonsoft.Json.JsonProperty("identityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string IdentityType { get; set; }

        /// <summary>要保人名</summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000)]
        public string FirstName { get; set; }

        /// <summary>要保人姓</summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000)]
        public string LastName { get; set; }

        /// <summary>要保人姓名</summary>
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string CustomerName { get; set; }

        /// <summary>中租客戶代碼</summary>
        [Newtonsoft.Json.JsonProperty("cifNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CifNo { get; set; }

        /// <summary>證件類別</summary>
        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string IdentificationType { get; set; }

        /// <summary>身分證號 / 統一證號</summary>
        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string IdNo { get; set; }

        /// <summary>負責人姓名</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ResponsiblePersonName { get; set; }

        /// <summary>負責人證件類別</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonIdentificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ResponsiblePersonIdentificationType { get; set; }

        /// <summary>負責人身分證號</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ResponsiblePersonIDNo { get; set; }

        /// <summary>負責人生日</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonBirthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ResponsiblePersonBirthDate { get; set; }

        /// <summary>性別</summary>
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string Gender { get; set; }

        /// <summary>出生日期/公司註冊日期</summary>
        [Newtonsoft.Json.JsonProperty("birthdate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Birthdate { get; set; }

        /// <summary>戶籍地址/公司註冊地址Level1</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel1 { get; set; }

        /// <summary>戶籍地址/公司註冊地址Level2</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel2 { get; set; }

        /// <summary>戶籍地址/公司註冊地址Level3</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel3 { get; set; }

        /// <summary>戶籍地址/公司註冊地址Level4</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel4 { get; set; }

        /// <summary>戶籍地址/公司註冊地址</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string RegisteredAddress { get; set; }

        /// <summary>聯絡地址Level1</summary>
        [Newtonsoft.Json.JsonProperty("contactAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel1 { get; set; }

        /// <summary>聯絡地址Level2</summary>
        [Newtonsoft.Json.JsonProperty("contactAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel2 { get; set; }

        /// <summary>聯絡地址Level3</summary>
        [Newtonsoft.Json.JsonProperty("contactAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel3 { get; set; }

        /// <summary>聯絡地址Level4</summary>
        [Newtonsoft.Json.JsonProperty("contactAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel4 { get; set; }

        /// <summary>聯絡地址</summary>
        [Newtonsoft.Json.JsonProperty("contactAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string ContactAddress { get; set; }

        /// <summary>聯絡電話</summary>
        [Newtonsoft.Json.JsonProperty("contactPhoneNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ContactPhoneNo { get; set; }

        /// <summary>電子信箱</summary>
        [Newtonsoft.Json.JsonProperty("contactEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ContactEmail { get; set; }

        /// <summary>供應商代碼</summary>
        [Newtonsoft.Json.JsonProperty("dealerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DealerCode { get; set; }

        /// <summary>供應商名稱</summary>
        [Newtonsoft.Json.JsonProperty("dealerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string DealerName { get; set; }

        /// <summary>供應商業務人員代碼</summary>
        [Newtonsoft.Json.JsonProperty("dealerSalesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string DealerSalesCode { get; set; }

        /// <summary>供應商業務人員姓名</summary>
        [Newtonsoft.Json.JsonProperty("dealerSales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string DealerSales { get; set; }

        /// <summary>經銷商代碼</summary>
        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AgentCode { get; set; }

        /// <summary>經銷商名稱</summary>
        [Newtonsoft.Json.JsonProperty("agentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string AgentName { get; set; }

        /// <summary>中租業務人員代碼</summary>
        [Newtonsoft.Json.JsonProperty("salesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string SalesCode { get; set; }

        /// <summary>供應商業務人員姓名</summary>
        [Newtonsoft.Json.JsonProperty("salesName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string SalesName { get; set; }

        /// <summary>險種</summary>
        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string InsuranceType { get; set; }

        /// <summary>貸款金額</summary>
        [Newtonsoft.Json.JsonProperty("financeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? FinanceAmount { get; set; }

        /// <summary>承作期數</summary>
        [Newtonsoft.Json.JsonProperty("financeTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FinanceTerms { get; set; }

        /// <summary>產品類別</summary>
        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ProductCode { get; set; }

        /// <summary>擔保品性質 1=標的物(Finance Asset)、2=擔保品(Security Asset)</summary>
        [Newtonsoft.Json.JsonProperty("collateralProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string CollateralProperty { get; set; }

        /// <summary>擔保品類型</summary>
        [Newtonsoft.Json.JsonProperty("collateralType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string CollateralType { get; set; }

        /// <summary>擔保品序號</summary>
        [Newtonsoft.Json.JsonProperty("subNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubNo { get; set; }

        /// <summary>規格型式</summary>
        [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Model { get; set; }

        /// <summary>車牌號碼</summary>
        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PlateNo { get; set; }

        /// <summary>年份</summary>
        [Newtonsoft.Json.JsonProperty("manufactureYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ManufactureYear { get; set; }

        /// <summary>廠牌</summary>
        [Newtonsoft.Json.JsonProperty("vehicleBrand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string VehicleBrand { get; set; }

        /// <summary>引擎號碼</summary>
        [Newtonsoft.Json.JsonProperty("engineNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string EngineNo { get; set; }

        /// <summary>底盤號碼</summary>
        [Newtonsoft.Json.JsonProperty("chassisNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ChassisNo { get; set; }

        /// <summary>客戶配合之租賃公司</summary>
        [Newtonsoft.Json.JsonProperty("financeCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string FinanceCompany { get; set; }

        /// <summary>舊車賣掉的保險折扣%</summary>
        [Newtonsoft.Json.JsonProperty("ncd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 9999.9999D)]
        public double? Ncd { get; set; }

        /// <summary>賣掉的舊車車牌號碼</summary>
        [Newtonsoft.Json.JsonProperty("ncdPlateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string NcdPlateNo { get; set; }

        /// <summary>加保-鏡子破裂</summary>
        [Newtonsoft.Json.JsonProperty("windscreenCoverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WindscreenCoverage { get; set; }

        /// <summary>保險價值</summary>
        [Newtonsoft.Json.JsonProperty("insuredValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? InsuredValue { get; set; }

        /// <summary>加保-保障除了主駕外的駕駛</summary>
        [Newtonsoft.Json.JsonProperty("additionalDriver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AdditionalDriver { get; set; }

        /// <summary>加保-駕駛受傷(賠償車子的錢)</summary>
        [Newtonsoft.Json.JsonProperty("personalAccident", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PersonalAccident { get; set; }

        /// <summary>加保-開車門撞到機車</summary>
        [Newtonsoft.Json.JsonProperty("legalLiabilityOfPassenger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LegalLiabilityOfPassenger { get; set; }

        /// <summary>加保-副駕受傷賠償</summary>
        [Newtonsoft.Json.JsonProperty("legalLiabilityToPassenger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LegalLiabilityToPassenger { get; set; }

        /// <summary>備註</summary>
        [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Remark { get; set; }

        /// <summary>還款計畫</summary>
        [Newtonsoft.Json.JsonProperty("repaymentPlan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string RepaymentPlan { get; set; }

        [Newtonsoft.Json.JsonProperty("quotationYears", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QuotationYear> QuotationYears { get; set; }

        /// <summary>批號</summary>
        [Newtonsoft.Json.JsonProperty("batchNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string BatchNo { get; set; }

        [Newtonsoft.Json.JsonProperty("fromSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FromSource FromSource { get; set; }

        /// <summary>申請人</summary>
        [Newtonsoft.Json.JsonProperty("applyUserNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ApplyUserNo { get; set; }

        /// <summary>申請人名稱</summary>
        [Newtonsoft.Json.JsonProperty("applicantName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ApplicantName { get; set; }

        /// <summary>申請人所屬部門id</summary>
        [Newtonsoft.Json.JsonProperty("applyDeptID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ApplyDeptID { get; set; }

        /// <summary>申請人所屬部門名稱</summary>
        [Newtonsoft.Json.JsonProperty("applicantDeptCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ApplicantDeptCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateForQuoteListResp
    {
        /// <summary>批號</summary>
        [Newtonsoft.Json.JsonProperty("batchNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchNo { get; set; }

        /// <summary>待報價清單KEY</summary>
        [Newtonsoft.Json.JsonProperty("insuranceForQuoteMasterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceForQuoteMasterId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateForQuoteListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreateForQuoteListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateQuoteAttachment
    {
        [Newtonsoft.Json.JsonProperty("guid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Guid { get; set; }

        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string FileName { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateQuotationYear
    {
        /// <summary>年度</summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Year { get; set; }

        /// <summary>申請日期</summary>
        [Newtonsoft.Json.JsonProperty("applicationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ApplicationDate { get; set; }

        /// <summary>報價日期</summary>
        [Newtonsoft.Json.JsonProperty("quotedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset QuotedDate { get; set; }

        /// <summary>保險公司代碼</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompanyId { get; set; }

        /// <summary>實際保額</summary>
        [Newtonsoft.Json.JsonProperty("actualSumInsured", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double ActualSumInsured { get; set; }

        /// <summary>申請保額</summary>
        [Newtonsoft.Json.JsonProperty("applySumInsured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? ApplySumInsured { get; set; }

        /// <summary>實際保額</summary>
        [Newtonsoft.Json.JsonProperty("actualPremium", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double ActualPremium { get; set; }

        /// <summary>撥款幣別</summary>
        [Newtonsoft.Json.JsonProperty("disbursementCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DisbursementCurrency { get; set; }

        /// <summary>客戶應付保費</summary>
        [Newtonsoft.Json.JsonProperty("chargedPremium", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double ChargedPremium { get; set; }

        /// <summary>客戶應付保費</summary>
        [Newtonsoft.Json.JsonProperty("grossPremium", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double GrossPremium { get; set; }

        /// <summary>印花稅</summary>
        [Newtonsoft.Json.JsonProperty("stampDuty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? StampDuty { get; set; }

        /// <summary>服務稅</summary>
        [Newtonsoft.Json.JsonProperty("serviceTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? ServiceTax { get; set; }

        /// <summary>道路稅</summary>
        [Newtonsoft.Json.JsonProperty("roadTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? RoadTax { get; set; }

        /// <summary>道路稅服務費</summary>
        [Newtonsoft.Json.JsonProperty("roadTaxFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? RoadTaxFee { get; set; }

        /// <summary>折扣</summary>
        [Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? Discount { get; set; }

        /// <summary>稅費</summary>
        [Newtonsoft.Json.JsonProperty("totalTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double TotalTaxes { get; set; }

        /// <summary>案件幣別</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string InsuranceCurrency { get; set; }

        /// <summary>附件</summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CreateQuoteAttachment> Attachments { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateQuoteReq
    {
        /// <summary>中租公司代碼</summary>
        [Newtonsoft.Json.JsonProperty("companyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CompanyId { get; set; }

        /// <summary>報價單號</summary>
        [Newtonsoft.Json.JsonProperty("quotedNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string QuotedNo { get; set; }

        /// <summary>是否案件相關</summary>
        [Newtonsoft.Json.JsonProperty("isCaseRelated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsCaseRelated { get; set; }

        /// <summary>案件編號</summary>
        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CaseNo { get; set; }

        /// <summary>契約編號</summary>
        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ContractNo { get; set; }

        /// <summary>客戶類別 (自然人 / 法人) Ind / Cor</summary>
        [Newtonsoft.Json.JsonProperty("identityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string IdentityType { get; set; }

        /// <summary>要保人名</summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000)]
        public string FirstName { get; set; }

        /// <summary>要保人姓</summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000)]
        public string LastName { get; set; }

        /// <summary>要保人姓名</summary>
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string CustomerName { get; set; }

        /// <summary>中租客戶代碼</summary>
        [Newtonsoft.Json.JsonProperty("cifNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CifNo { get; set; }

        /// <summary>證件類別</summary>
        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string IdentificationType { get; set; }

        /// <summary>身分證號 / 統一證號</summary>
        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string IdNo { get; set; }

        /// <summary>負責人姓名</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ResponsiblePersonName { get; set; }

        /// <summary>負責人證件類別</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonIdentificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ResponsiblePersonIdentificationType { get; set; }

        /// <summary>負責人身分證號</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ResponsiblePersonIDNo { get; set; }

        /// <summary>負責人生日</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonBirthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ResponsiblePersonBirthDate { get; set; }

        /// <summary>性別</summary>
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string Gender { get; set; }

        /// <summary>出生日期/公司註冊日期</summary>
        [Newtonsoft.Json.JsonProperty("birthdate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Birthdate { get; set; }

        /// <summary>戶籍地址/公司註冊地址Level1</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel1 { get; set; }

        /// <summary>戶籍地址/公司註冊地址Level2</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel2 { get; set; }

        /// <summary>戶籍地址/公司註冊地址Level3</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel3 { get; set; }

        /// <summary>戶籍地址/公司註冊地址Level4</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel4 { get; set; }

        /// <summary>戶籍地址/公司註冊地址</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string RegisteredAddress { get; set; }

        /// <summary>聯絡地址Level1</summary>
        [Newtonsoft.Json.JsonProperty("contactAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel1 { get; set; }

        /// <summary>聯絡地址Level2</summary>
        [Newtonsoft.Json.JsonProperty("contactAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel2 { get; set; }

        /// <summary>聯絡地址Level3</summary>
        [Newtonsoft.Json.JsonProperty("contactAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel3 { get; set; }

        /// <summary>聯絡地址Level4</summary>
        [Newtonsoft.Json.JsonProperty("contactAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel4 { get; set; }

        /// <summary>聯絡地址</summary>
        [Newtonsoft.Json.JsonProperty("contactAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string ContactAddress { get; set; }

        /// <summary>聯絡電話</summary>
        [Newtonsoft.Json.JsonProperty("contactPhoneNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ContactPhoneNo { get; set; }

        /// <summary>電子信箱</summary>
        [Newtonsoft.Json.JsonProperty("contactEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ContactEmail { get; set; }

        /// <summary>供應商代碼</summary>
        [Newtonsoft.Json.JsonProperty("dealerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerCode { get; set; }

        /// <summary>供應商名稱</summary>
        [Newtonsoft.Json.JsonProperty("dealerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string DealerName { get; set; }

        /// <summary>供應商業務人員代碼</summary>
        [Newtonsoft.Json.JsonProperty("dealerSalesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string DealerSalesCode { get; set; }

        /// <summary>供應商業務人員姓名</summary>
        [Newtonsoft.Json.JsonProperty("dealerSales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string DealerSales { get; set; }

        /// <summary>經銷商代碼</summary>
        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCode { get; set; }

        /// <summary>經銷商名稱</summary>
        [Newtonsoft.Json.JsonProperty("agentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentName { get; set; }

        /// <summary>中租業務人員代碼</summary>
        [Newtonsoft.Json.JsonProperty("salesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesCode { get; set; }

        /// <summary>供應商業務人員姓名</summary>
        [Newtonsoft.Json.JsonProperty("salesName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string SalesName { get; set; }

        /// <summary>險種</summary>
        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string InsuranceType { get; set; }

        /// <summary>貸款金額</summary>
        [Newtonsoft.Json.JsonProperty("financeAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double FinanceAmount { get; set; }

        /// <summary>承作期數</summary>
        [Newtonsoft.Json.JsonProperty("financeTerms", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FinanceTerms { get; set; }

        /// <summary>產品類別</summary>
        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ProductCode { get; set; }

        /// <summary>擔保品性質 1=標的物(Finance Asset)、2=擔保品(Security Asset)</summary>
        [Newtonsoft.Json.JsonProperty("collateralProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string CollateralProperty { get; set; }

        /// <summary>擔保品類型</summary>
        [Newtonsoft.Json.JsonProperty("collateralType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string CollateralType { get; set; }

        /// <summary>擔保品序號</summary>
        [Newtonsoft.Json.JsonProperty("subNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubNo { get; set; }

        /// <summary>規格型式</summary>
        [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Model { get; set; }

        /// <summary>車牌號碼</summary>
        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PlateNo { get; set; }

        /// <summary>年份</summary>
        [Newtonsoft.Json.JsonProperty("manufactureYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ManufactureYear { get; set; }

        /// <summary>廠牌</summary>
        [Newtonsoft.Json.JsonProperty("vehicleBrand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string VehicleBrand { get; set; }

        /// <summary>引擎號碼</summary>
        [Newtonsoft.Json.JsonProperty("engineNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string EngineNo { get; set; }

        /// <summary>底盤號碼</summary>
        [Newtonsoft.Json.JsonProperty("chassisNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ChassisNo { get; set; }

        /// <summary>客戶配合之租賃公司</summary>
        [Newtonsoft.Json.JsonProperty("financeCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string FinanceCompany { get; set; }

        /// <summary>舊車賣掉的保險折扣%</summary>
        [Newtonsoft.Json.JsonProperty("ncd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 999.99D)]
        public double? Ncd { get; set; }

        /// <summary>賣掉的舊車車牌號碼</summary>
        [Newtonsoft.Json.JsonProperty("ncdPlateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string NcdPlateNo { get; set; }

        /// <summary>加保-鏡子破裂</summary>
        [Newtonsoft.Json.JsonProperty("windscreenCoverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WindscreenCoverage { get; set; }

        /// <summary>保險價值</summary>
        [Newtonsoft.Json.JsonProperty("insuredValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? InsuredValue { get; set; }

        /// <summary>加保-保障除了主駕外的駕駛</summary>
        [Newtonsoft.Json.JsonProperty("additionalDriver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AdditionalDriver { get; set; }

        /// <summary>加保-駕駛受傷(賠償車子的錢)</summary>
        [Newtonsoft.Json.JsonProperty("personalAccident", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PersonalAccident { get; set; }

        /// <summary>加保-開車門撞到機車</summary>
        [Newtonsoft.Json.JsonProperty("legalLiabilityOfPassenger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LegalLiabilityOfPassenger { get; set; }

        /// <summary>加保-副駕受傷賠償</summary>
        [Newtonsoft.Json.JsonProperty("legalLiabilityToPassenger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LegalLiabilityToPassenger { get; set; }

        /// <summary>備註</summary>
        [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Remark { get; set; }

        /// <summary>還款計畫</summary>
        [Newtonsoft.Json.JsonProperty("repaymentPlan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string RepaymentPlan { get; set; }

        /// <summary>批號</summary>
        [Newtonsoft.Json.JsonProperty("batchNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string BatchNo { get; set; }

        [Newtonsoft.Json.JsonProperty("fromSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FromSource FromSource { get; set; }

        /// <summary>報價資訊</summary>
        [Newtonsoft.Json.JsonProperty("quotationYears", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CreateQuotationYear> QuotationYears { get; set; }

        /// <summary>申請人</summary>
        [Newtonsoft.Json.JsonProperty("applyUserNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ApplyUserNo { get; set; }

        /// <summary>申請人名稱</summary>
        [Newtonsoft.Json.JsonProperty("applicantName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ApplicantName { get; set; }

        /// <summary>申請人所屬部門id</summary>
        [Newtonsoft.Json.JsonProperty("applyDeptID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ApplyDeptID { get; set; }

        /// <summary>申請人所屬部門名稱</summary>
        [Newtonsoft.Json.JsonProperty("applicantDeptCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ApplicantDeptCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateQuoteItem
    {
        /// <summary>年度</summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Year { get; set; }

        /// <summary>報價單號</summary>
        [Newtonsoft.Json.JsonProperty("quotedNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotedNo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateQuoteResp
    {
        [Newtonsoft.Json.JsonProperty("batchNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchNo { get; set; }

        [Newtonsoft.Json.JsonProperty("quotedInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CreateQuoteItem> QuotedInfo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateQuoteRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreateQuoteResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateForApplyListAttachment
    {
        [Newtonsoft.Json.JsonProperty("guid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Guid { get; set; }

        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string FileName { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InsuredYear
    {
        /// <summary>報價年度</summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Year { get; set; }

        [Newtonsoft.Json.JsonProperty("insuredType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string InsuredType { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string InsuranceCurrency { get; set; }

        [Newtonsoft.Json.JsonProperty("quotedNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string QuotedNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InsuranceStartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceExpiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InsuranceExpiryDate { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InsuranceCompanyId { get; set; }

        [Newtonsoft.Json.JsonProperty("actualSumInsured", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double ActualSumInsured { get; set; }

        [Newtonsoft.Json.JsonProperty("applySumInsured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? ApplySumInsured { get; set; }

        [Newtonsoft.Json.JsonProperty("actualPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? ActualPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("disbursementCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbursementCurrency { get; set; }

        [Newtonsoft.Json.JsonProperty("chargedPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? ChargedPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("grossPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? GrossPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("stampDuty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? StampDuty { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? ServiceTax { get; set; }

        [Newtonsoft.Json.JsonProperty("roadTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? RoadTax { get; set; }

        [Newtonsoft.Json.JsonProperty("roadTaxFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? RoadTaxFee { get; set; }

        [Newtonsoft.Json.JsonProperty("roadTaxFeeExpired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RoadTaxFeeExpired { get; set; }

        [Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? Discount { get; set; }

        [Newtonsoft.Json.JsonProperty("totalTaxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? TotalTaxes { get; set; }

        [Newtonsoft.Json.JsonProperty("policyIssueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PolicyIssueDate { get; set; }

        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string PolicyNo { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerIncentiveRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 99999.9999D)]
        public double? DealerIncentiveRate { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerIncentive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? DealerIncentive { get; set; }

        [Newtonsoft.Json.JsonProperty("commissionSharing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? CommissionSharing { get; set; }

        /// <summary>還款計畫</summary>
        [Newtonsoft.Json.JsonProperty("repaymentPlan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string RepaymentPlan { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string PaymentMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("chequeShareSum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ChequeShareSum { get; set; }

        /// <summary>附件</summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CreateForApplyListAttachment> Attachments { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateForApplyListReq
    {
        /// <summary>中租公司代碼</summary>
        [Newtonsoft.Json.JsonProperty("companyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CompanyId { get; set; }

        /// <summary>是否案件相關</summary>
        [Newtonsoft.Json.JsonProperty("isCaseRelated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsCaseRelated { get; set; }

        /// <summary>案件編號</summary>
        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CaseNo { get; set; }

        /// <summary>契約編號</summary>
        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ContractNo { get; set; }

        /// <summary>客戶類別 (自然人 / 法人) Ind / Cor</summary>
        [Newtonsoft.Json.JsonProperty("identityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string IdentityType { get; set; }

        /// <summary>要保人名</summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000)]
        public string FirstName { get; set; }

        /// <summary>要保人姓</summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000)]
        public string LastName { get; set; }

        /// <summary>要保人姓名</summary>
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string CustomerName { get; set; }

        /// <summary>中租客戶代碼</summary>
        [Newtonsoft.Json.JsonProperty("cifNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CifNo { get; set; }

        /// <summary>證件類別</summary>
        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string IdentificationType { get; set; }

        /// <summary>身分證號 / 統一證號</summary>
        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string IdNo { get; set; }

        /// <summary>負責人姓名</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ResponsiblePersonName { get; set; }

        /// <summary>負責人證件類別</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonIdentificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ResponsiblePersonIdentificationType { get; set; }

        /// <summary>負責人身分證號</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ResponsiblePersonIDNo { get; set; }

        /// <summary>負責人生日</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonBirthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ResponsiblePersonBirthDate { get; set; }

        /// <summary>性別</summary>
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string Gender { get; set; }

        /// <summary>出生日期/公司註冊日期</summary>
        [Newtonsoft.Json.JsonProperty("birthdate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Birthdate { get; set; }

        /// <summary>戶籍地址/公司註冊地址Level1</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel1 { get; set; }

        /// <summary>戶籍地址/公司註冊地址Level2</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel2 { get; set; }

        /// <summary>戶籍地址/公司註冊地址Level3</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel3 { get; set; }

        /// <summary>戶籍地址/公司註冊地址Level4</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel4 { get; set; }

        /// <summary>戶籍地址/公司註冊地址</summary>
        [Newtonsoft.Json.JsonProperty("registeredAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string RegisteredAddress { get; set; }

        /// <summary>聯絡地址Level1</summary>
        [Newtonsoft.Json.JsonProperty("contactAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel1 { get; set; }

        /// <summary>聯絡地址Level2</summary>
        [Newtonsoft.Json.JsonProperty("contactAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel2 { get; set; }

        /// <summary>聯絡地址Level3</summary>
        [Newtonsoft.Json.JsonProperty("contactAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel3 { get; set; }

        /// <summary>聯絡地址Level4</summary>
        [Newtonsoft.Json.JsonProperty("contactAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel4 { get; set; }

        /// <summary>聯絡地址</summary>
        [Newtonsoft.Json.JsonProperty("contactAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string ContactAddress { get; set; }

        /// <summary>聯絡電話</summary>
        [Newtonsoft.Json.JsonProperty("contactPhoneNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ContactPhoneNo { get; set; }

        /// <summary>電子信箱</summary>
        [Newtonsoft.Json.JsonProperty("contactEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ContactEmail { get; set; }

        /// <summary>供應商代碼</summary>
        [Newtonsoft.Json.JsonProperty("dealerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DealerCode { get; set; }

        /// <summary>供應商名稱</summary>
        [Newtonsoft.Json.JsonProperty("dealerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string DealerName { get; set; }

        /// <summary>供應商業務人員代碼</summary>
        [Newtonsoft.Json.JsonProperty("dealerSalesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string DealerSalesCode { get; set; }

        /// <summary>供應商業務人員姓名</summary>
        [Newtonsoft.Json.JsonProperty("dealerSales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string DealerSales { get; set; }

        /// <summary>經銷商代碼</summary>
        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AgentCode { get; set; }

        /// <summary>經銷商名稱</summary>
        [Newtonsoft.Json.JsonProperty("agentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string AgentName { get; set; }

        /// <summary>中租業務人員代碼</summary>
        [Newtonsoft.Json.JsonProperty("salesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string SalesCode { get; set; }

        /// <summary>供應商業務人員姓名</summary>
        [Newtonsoft.Json.JsonProperty("salesName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string SalesName { get; set; }

        /// <summary>險種</summary>
        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string InsuranceType { get; set; }

        /// <summary>貸款金額</summary>
        [Newtonsoft.Json.JsonProperty("financeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? FinanceAmount { get; set; }

        /// <summary>承作期數</summary>
        [Newtonsoft.Json.JsonProperty("financeTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FinanceTerms { get; set; }

        /// <summary>產品類別</summary>
        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ProductCode { get; set; }

        /// <summary>擔保品性質 1=標的物(Finance Asset)、2=擔保品(Security Asset)</summary>
        [Newtonsoft.Json.JsonProperty("collateralProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string CollateralProperty { get; set; }

        /// <summary>擔保品類型</summary>
        [Newtonsoft.Json.JsonProperty("collateralType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string CollateralType { get; set; }

        /// <summary>擔保品序號</summary>
        [Newtonsoft.Json.JsonProperty("subNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubNo { get; set; }

        /// <summary>規格型式</summary>
        [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Model { get; set; }

        /// <summary>車牌號碼</summary>
        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PlateNo { get; set; }

        /// <summary>年份</summary>
        [Newtonsoft.Json.JsonProperty("manufactureYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ManufactureYear { get; set; }

        /// <summary>廠牌</summary>
        [Newtonsoft.Json.JsonProperty("vehicleBrand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string VehicleBrand { get; set; }

        /// <summary>引擎號碼</summary>
        [Newtonsoft.Json.JsonProperty("engineNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string EngineNo { get; set; }

        /// <summary>底盤號碼</summary>
        [Newtonsoft.Json.JsonProperty("chassisNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ChassisNo { get; set; }

        /// <summary>保費付款人
        /// 1=Chailease 2=Customer</summary>
        [Newtonsoft.Json.JsonProperty("premiumPayer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PremiumPayer { get; set; }

        /// <summary>客戶配合之租賃公司</summary>
        [Newtonsoft.Json.JsonProperty("financeCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string FinanceCompany { get; set; }

        /// <summary>舊車賣掉的保險折扣%</summary>
        [Newtonsoft.Json.JsonProperty("ncd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 9999.9999D)]
        public double? Ncd { get; set; }

        /// <summary>賣掉的舊車車牌號碼</summary>
        [Newtonsoft.Json.JsonProperty("ncdPlateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string NcdPlateNo { get; set; }

        /// <summary>加保-鏡子破裂</summary>
        [Newtonsoft.Json.JsonProperty("windscreenCoverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WindscreenCoverage { get; set; }

        /// <summary>保險價值</summary>
        [Newtonsoft.Json.JsonProperty("insuredValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? InsuredValue { get; set; }

        /// <summary>加保-保障除了主駕外的駕駛</summary>
        [Newtonsoft.Json.JsonProperty("additionalDriver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AdditionalDriver { get; set; }

        /// <summary>加保-駕駛受傷(賠償車子的錢)</summary>
        [Newtonsoft.Json.JsonProperty("personalAccident", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PersonalAccident { get; set; }

        /// <summary>加保-開車門撞到機車</summary>
        [Newtonsoft.Json.JsonProperty("legalLiabilityOfPassenger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LegalLiabilityOfPassenger { get; set; }

        /// <summary>加保-副駕受傷賠償</summary>
        [Newtonsoft.Json.JsonProperty("legalLiabilityToPassenger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LegalLiabilityToPassenger { get; set; }

        [Newtonsoft.Json.JsonProperty("insuredYears", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InsuredYear> InsuredYears { get; set; }

        /// <summary>批號</summary>
        [Newtonsoft.Json.JsonProperty("batchNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string BatchNo { get; set; }

        [Newtonsoft.Json.JsonProperty("fromSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FromSource FromSource { get; set; }

        /// <summary>申請人</summary>
        [Newtonsoft.Json.JsonProperty("applyUserNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ApplyUserNo { get; set; }

        /// <summary>申請人名稱</summary>
        [Newtonsoft.Json.JsonProperty("applicantName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ApplicantName { get; set; }

        /// <summary>申請人所屬部門id</summary>
        [Newtonsoft.Json.JsonProperty("applyDeptID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ApplyDeptID { get; set; }

        /// <summary>申請人所屬部門名稱</summary>
        [Newtonsoft.Json.JsonProperty("applicantDeptCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ApplicantDeptCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateForApplyListResp
    {
        /// <summary>批號</summary>
        [Newtonsoft.Json.JsonProperty("batchNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchNo { get; set; }

        /// <summary>待投保清單KEY</summary>
        [Newtonsoft.Json.JsonProperty("insuranceForApplyMasterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceForApplyMasterId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateForApplyListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreateForApplyListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParseExcelQuoteReq
    {
        /// <summary>公司別</summary>
        [Newtonsoft.Json.JsonProperty("companyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CompanyId { get; set; }

        /// <summary>附件檔GUID</summary>
        [Newtonsoft.Json.JsonProperty("fileGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileGuid { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParseExcelQuoteResp
    {
        [Newtonsoft.Json.JsonProperty("sumInsured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SumInsured { get; set; }

        [Newtonsoft.Json.JsonProperty("actualPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ActualPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("chargedPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ChargedPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("totalTaxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalTaxes { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCommissionSharing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InsuranceCommissionSharing { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerIncentive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DealerIncentive { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParseExcelQuoteRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParseExcelQuoteResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetCaseInsuranceReq
    {
        [Newtonsoft.Json.JsonProperty("companyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CompanyId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ARList
    {
        [Newtonsoft.Json.JsonProperty("arItemID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ArItemID { get; set; }

        [Newtonsoft.Json.JsonProperty("arTypeID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArTypeID { get; set; }

        [Newtonsoft.Json.JsonProperty("aramt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Aramt { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InsuranceFeeItem
    {
        /// <summary>投保編號</summary>
        [Newtonsoft.Json.JsonProperty("insuranceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceNo { get; set; }

        /// <summary>客戶統編</summary>
        [Newtonsoft.Json.JsonProperty("idno", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Idno { get; set; }

        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>客戶名稱</summary>
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        /// <summary>險種</summary>
        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceType { get; set; }

        /// <summary>保險公司</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompany { get; set; }

        /// <summary>保險公司代碼</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyCode { get; set; }

        /// <summary>保單編號</summary>
        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        /// <summary>保單申請日</summary>
        [Newtonsoft.Json.JsonProperty("policyIssueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PolicyIssueDate { get; set; }

        /// <summary>投保類別</summary>
        [Newtonsoft.Json.JsonProperty("insuredType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredType { get; set; }

        /// <summary>投保起始日</summary>
        [Newtonsoft.Json.JsonProperty("insuranceStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InsuranceStartDate { get; set; }

        /// <summary>投保到期日</summary>
        [Newtonsoft.Json.JsonProperty("insuranceExpiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InsuranceExpiryDate { get; set; }

        /// <summary>保額</summary>
        [Newtonsoft.Json.JsonProperty("actualSumInsured", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ActualSumInsured { get; set; }

        /// <summary>實際保費</summary>
        [Newtonsoft.Json.JsonProperty("grossPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossPremium { get; set; }

        /// <summary>承辦客服</summary>
        [Newtonsoft.Json.JsonProperty("csid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Csid { get; set; }

        /// <summary>道路稅</summary>
        [Newtonsoft.Json.JsonProperty("roadTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RoadTax { get; set; }

        /// <summary>道路稅服務費</summary>
        [Newtonsoft.Json.JsonProperty("roadTaxFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RoadTaxFee { get; set; }

        /// <summary>印花稅</summary>
        [Newtonsoft.Json.JsonProperty("stampDuty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StampDuty { get; set; }

        /// <summary>服務稅</summary>
        [Newtonsoft.Json.JsonProperty("serviceTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ServiceTax { get; set; }

        /// <summary>稅費</summary>
        [Newtonsoft.Json.JsonProperty("totalTaxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalTaxes { get; set; }

        /// <summary>折扣</summary>
        [Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Discount { get; set; }

        /// <summary>道路稅到期日</summary>
        [Newtonsoft.Json.JsonProperty("roadTaxExpiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RoadTaxExpiryDate { get; set; }

        /// <summary>客戶應付保費</summary>
        [Newtonsoft.Json.JsonProperty("chargedPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ChargedPremium { get; set; }

        /// <summary>實際保費</summary>
        [Newtonsoft.Json.JsonProperty("acturalPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ActuralPremium { get; set; }

        /// <summary>佣金</summary>
        [Newtonsoft.Json.JsonProperty("commissionSharing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CommissionSharing { get; set; }

        /// <summary>投保狀態</summary>
        [Newtonsoft.Json.JsonProperty("insuranceStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceStatus { get; set; }

        /// <summary>是否共票</summary>
        [Newtonsoft.Json.JsonProperty("chequeShareSum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ChequeShareSum { get; set; }

        /// <summary>是否 Deduct</summary>
        [Newtonsoft.Json.JsonProperty("deductStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DeductStatus { get; set; }

        /// <summary>是否融資</summary>
        [Newtonsoft.Json.JsonProperty("financeStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FinanceStatus { get; set; }

        /// <summary>還款計畫</summary>
        [Newtonsoft.Json.JsonProperty("repaymentPlan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepaymentPlan { get; set; }

        [Newtonsoft.Json.JsonProperty("arList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ARList> ArList { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollateralItem
    {
        /// <summary>擔保品 Seq</summary>
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Sequence { get; set; }

        /// <summary>擔保品種類</summary>
        [Newtonsoft.Json.JsonProperty("collateralType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralType { get; set; }

        /// <summary>車號</summary>
        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }

        /// <summary>保險費清單</summary>
        [Newtonsoft.Json.JsonProperty("insuranceFeeList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InsuranceFeeItem> InsuranceFeeList { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetCaseInsuranceResp
    {
        /// <summary>公司別</summary>
        [Newtonsoft.Json.JsonProperty("companyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CompanyId { get; set; }

        /// <summary>案件編號</summary>
        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }

        /// <summary>擔保品資料</summary>
        [Newtonsoft.Json.JsonProperty("collatorList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CollateralItem> CollatorList { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetCaseInsuranceRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetCaseInsuranceResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentDataItem
    {
        /// <summary>日期</summary>
        [Newtonsoft.Json.JsonProperty("paymentDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset PaymentDate { get; set; }

        /// <summary>保險費</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetCaseInsurancePaymentResp
    {
        /// <summary>公司別</summary>
        [Newtonsoft.Json.JsonProperty("companyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CompanyId { get; set; }

        /// <summary>案件編號</summary>
        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PaymentDataItem> PaymentData { get; set; }

        /// <summary>票據總額</summary>
        [Newtonsoft.Json.JsonProperty("chequeShareSum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ChequeShareSum { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetCaseInsurancePaymentRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetCaseInsurancePaymentResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetInsuranceCommencementItem
    {
        /// <summary>擔保品 Seq</summary>
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Sequence { get; set; }

        /// <summary>擔保品類型</summary>
        [Newtonsoft.Json.JsonProperty("collatoralType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollatoralType { get; set; }

        /// <summary>委託購買/自行購買</summary>
        [Newtonsoft.Json.JsonProperty("buySelf", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool BuySelf { get; set; }

        /// <summary>是否強制保險</summary>
        [Newtonsoft.Json.JsonProperty("mustInsurance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool MustInsurance { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetInsuranceCommencementReq
    {
        /// <summary>公司別</summary>
        [Newtonsoft.Json.JsonProperty("companyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CompanyId { get; set; }

        /// <summary>案件編號</summary>
        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }

        /// <summary>是否 Autolife</summary>
        [Newtonsoft.Json.JsonProperty("mustAutolife", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool MustAutolife { get; set; }

        /// <summary>擔保品資料</summary>
        [Newtonsoft.Json.JsonProperty("collatorList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GetInsuranceCommencementItem> CollatorList { get; set; }

        /// <summary>保費</summary>
        [Newtonsoft.Json.JsonProperty("insuranceFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? InsuranceFee { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetInsuranceCommencementResp
    {
        /// <summary>可否起租</summary>
        [Newtonsoft.Json.JsonProperty("canCommencement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CanCommencement { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetInsuranceCommencementRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetInsuranceCommencementResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CalculateAutoLifeReq
    {
        /// <summary>中租公司代碼</summary>
        [Newtonsoft.Json.JsonProperty("companyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CompanyId { get; set; }

        /// <summary>生日：yyyy/MM/dd</summary>
        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BirthDate { get; set; }

        /// <summary>期數</summary>
        [Newtonsoft.Json.JsonProperty("policyTerm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PolicyTerm { get; set; }

        /// <summary>幾月一付</summary>
        [Newtonsoft.Json.JsonProperty("paymentFrequency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PaymentFrequency { get; set; }

        /// <summary>幣別</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>保險公司</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InsuranceCompanyID { get; set; }

        /// <summary>險種</summary>
        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceType { get; set; }

        /// <summary>保額</summary>
        [Newtonsoft.Json.JsonProperty("autolifeSumInsured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AutolifeSumInsured { get; set; }

        /// <summary>保費</summary>
        [Newtonsoft.Json.JsonProperty("chargePremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ChargePremium { get; set; }

        /// <summary>產品類型</summary>
        [Newtonsoft.Json.JsonProperty("productType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductType { get; set; }

        /// <summary>產品代碼</summary>
        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CalculateAutoLifeResp
    {
        /// <summary>AutoLife 保費</summary>
        [Newtonsoft.Json.JsonProperty("chargePremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ChargePremium { get; set; }

        /// <summary>融資保費</summary>
        [Newtonsoft.Json.JsonProperty("financePremium", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double FinancePremium { get; set; }

        /// <summary>推算保額</summary>
        [Newtonsoft.Json.JsonProperty("sumInsured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SumInsured { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CalculateAutoLifeRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalculateAutoLifeResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DisbursementStatusFeedbackReq
    {
        [Newtonsoft.Json.JsonProperty("companyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CompanyId { get; set; }

        [Newtonsoft.Json.JsonProperty("sourceNDisbmtId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SourceNDisbmtId { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

        /// <summary>撥款單號</summary>
        [Newtonsoft.Json.JsonProperty("disbmtNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbmtNo { get; set; }

        /// <summary>撥款子單號</summary>
        [Newtonsoft.Json.JsonProperty("disbursementSubNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbursementSubNo { get; set; }

        /// <summary>撥款完成日</summary>
        [Newtonsoft.Json.JsonProperty("disbursmentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DisbursmentDate { get; set; }

        /// <summary>撥款系統退回說明</summary>
        [Newtonsoft.Json.JsonProperty("disbursementWithdrawRemark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbursementWithdrawRemark { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DisbursementStatusFeedbackResp
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DisbursementStatusFeedbackRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisbursementStatusFeedbackResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InsuranceApplyColumnSettingResp
    {
        [Newtonsoft.Json.JsonProperty("display", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Display { get; set; }

        [Newtonsoft.Json.JsonProperty("validate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Validate { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StringInsuranceApplyColumnSettingRespDictionaryResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, InsuranceApplyColumnSettingResp> Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentTermInfo
    {
        [Newtonsoft.Json.JsonProperty("isWriteOff", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsWriteOff { get; set; }

        [Newtonsoft.Json.JsonProperty("serialNo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SerialNo { get; set; }

        [Newtonsoft.Json.JsonProperty("arDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArDate { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InsuranceApplyControlRulesResp
    {
        /// <summary>全輸入欄位鎖定</summary>
        [Newtonsoft.Json.JsonProperty("lockTotalColumn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool LockTotalColumn { get; set; }

        /// <summary>金額計算欄位鎖定</summary>
        [Newtonsoft.Json.JsonProperty("lockAmountColumn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool LockAmountColumn { get; set; }

        /// <summary>AR 欄位鎖定</summary>
        [Newtonsoft.Json.JsonProperty("lockPaymentSchedule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool LockPaymentSchedule { get; set; }

        /// <summary>還款計畫鎖定</summary>
        [Newtonsoft.Json.JsonProperty("lockRepaymentPlan", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool LockRepaymentPlan { get; set; }

        /// <summary>正式檔還款計畫</summary>
        [Newtonsoft.Json.JsonProperty("originalRepaymentPlan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalRepaymentPlan { get; set; }

        /// <summary>是否可取消投保</summary>
        [Newtonsoft.Json.JsonProperty("enableWithdraw", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableWithdraw { get; set; }

        /// <summary>正式檔 AR</summary>
        [Newtonsoft.Json.JsonProperty("originalPaymentTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PaymentTermInfo> OriginalPaymentTerms { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InsuranceApplyControlRulesRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InsuranceApplyControlRulesResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ToBeApplyListReq
    {
        [Newtonsoft.Json.JsonProperty("quotedNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotedNo { get; set; }

        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNo { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationType { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ToBeApplyListItem
    {
        [Newtonsoft.Json.JsonProperty("quotedNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotedNo { get; set; }

        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationType { get; set; }

        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNo { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ToBeApplyListResp
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ToBeApplyListItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ToBeApplyListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ToBeApplyListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchApplyInfoListReq
    {
        [Newtonsoft.Json.JsonProperty("applicationStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationStartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("applicationEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationEndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceNo { get; set; }

        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("quotedNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotedNo { get; set; }

        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchApplyInfoListItem
    {
        [Newtonsoft.Json.JsonProperty("insuranceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceNo { get; set; }

        [Newtonsoft.Json.JsonProperty("applicationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("quotedNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotedNo { get; set; }

        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchApplyInfoListResp
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchApplyInfoListItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchApplyInfoListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchApplyInfoListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchApplyEditListReq
    {
        [Newtonsoft.Json.JsonProperty("applicationStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationStartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("applicationEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationEndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceNo { get; set; }

        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("quotedNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotedNo { get; set; }

        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchApplyEditListItem
    {
        [Newtonsoft.Json.JsonProperty("insuranceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceNo { get; set; }

        [Newtonsoft.Json.JsonProperty("applicationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("quotedNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotedNo { get; set; }

        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchApplyEditListResp
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchApplyEditListItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchApplyEditListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchApplyEditListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchInsuranceApplyToBeApplyToDoListItem
    {
        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("quotedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("quotedNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotedNo { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceType { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchInsuranceApplyToBeApplyToDoListResp
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchInsuranceApplyToBeApplyToDoListItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchInsuranceApplyToBeApplyToDoListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchInsuranceApplyToBeApplyToDoListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchInsuranceApplyToDoListItem
    {
        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> InsuranceNo { get; set; }

        [Newtonsoft.Json.JsonProperty("quotedNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> QuotedNo { get; set; }

        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> PolicyNo { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchInsuranceApplyToDoListResp
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchInsuranceApplyToDoListItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchInsuranceApplyToDoListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchInsuranceApplyToDoListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TemporaryPaymentInfo
    {
        /// <summary>契約編號</summary>
        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        /// <summary>承作幣別</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>收款日期</summary>
        [Newtonsoft.Json.JsonProperty("rcvDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RcvDate { get; set; }

        /// <summary>暫收款 key</summary>
        [Newtonsoft.Json.JsonProperty("tempTransferIdKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TempTransferIdKey { get; set; }

        /// <summary>暫收款餘額</summary>
        [Newtonsoft.Json.JsonProperty("temporaryPaymentBalance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TemporaryPaymentBalance { get; set; }

        /// <summary>註記</summary>
        [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Remark { get; set; }

        /// <summary>是否被勾選</summary>
        [Newtonsoft.Json.JsonProperty("isSelect", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSelect { get; set; }

        /// <summary>是否已無暫收款</summary>
        [Newtonsoft.Json.JsonProperty("removed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Removed { get; set; }

        [Newtonsoft.Json.JsonProperty("offsetAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double OffsetAmount { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChequeInfo
    {
        [Newtonsoft.Json.JsonProperty("insuranceForApplyChequeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceForApplyChequeId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceApplyChequeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceApplyChequeId { get; set; }

        [Newtonsoft.Json.JsonProperty("chequeNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChequeNo { get; set; }

        [Newtonsoft.Json.JsonProperty("chequeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChequeDate { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentBankCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentBankCode { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentBank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentBank { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("chequeIssuerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChequeIssuerName { get; set; }

        [Newtonsoft.Json.JsonProperty("chequeAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ChequeAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("lumpSum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LumpSum { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InsuredBlockInfo
    {
        [Newtonsoft.Json.JsonProperty("insuranceForApplyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceForApplyId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceApplyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceApplyId { get; set; }

        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Year { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuredType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredType { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("quotedNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotedNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InsuranceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("cib", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cib { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceStartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceExpiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceExpiryDate { get; set; }

        [Newtonsoft.Json.JsonProperty("actualSumInsured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ActualSumInsured { get; set; }

        [Newtonsoft.Json.JsonProperty("applySumInsured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ApplySumInsured { get; set; }

        [Newtonsoft.Json.JsonProperty("actualPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ActualPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("disbursementCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbursementCurrency { get; set; }

        [Newtonsoft.Json.JsonProperty("chargedPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ChargedPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("grossPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("stampDuty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StampDuty { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ServiceTax { get; set; }

        [Newtonsoft.Json.JsonProperty("roadTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RoadTax { get; set; }

        [Newtonsoft.Json.JsonProperty("roadTaxFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RoadTaxFee { get; set; }

        [Newtonsoft.Json.JsonProperty("roadTaxFeeExpired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RoadTaxFeeExpired { get; set; }

        [Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Discount { get; set; }

        [Newtonsoft.Json.JsonProperty("totalTaxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalTaxes { get; set; }

        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        [Newtonsoft.Json.JsonProperty("policyIssueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyIssueDate { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerIncentiveRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DealerIncentiveRate { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerIncentive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DealerIncentive { get; set; }

        [Newtonsoft.Json.JsonProperty("commissionSharing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CommissionSharing { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        [Newtonsoft.Json.JsonProperty("repaymentPlan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepaymentPlan { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("chequeShareSum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ChequeShareSum { get; set; }

        [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Remark { get; set; }

        [Newtonsoft.Json.JsonProperty("reasonOfWithdraw", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReasonOfWithdraw { get; set; }

        [Newtonsoft.Json.JsonProperty("batchNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchNo { get; set; }

        [Newtonsoft.Json.JsonProperty("temporaryPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TemporaryPaymentInfo> TemporaryPayments { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PaymentTermInfo> PaymentTerms { get; set; }

        /// <summary>進件附件</summary>
        [Newtonsoft.Json.JsonProperty("webSubmissionAttachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Attachment> WebSubmissionAttachments { get; set; }

        /// <summary>客戶保單附件</summary>
        [Newtonsoft.Json.JsonProperty("customerInsuranceAttachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Attachment> CustomerInsuranceAttachments { get; set; }

        /// <summary>其他附件</summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Attachment> Attachments { get; set; }

        [Newtonsoft.Json.JsonProperty("cheques", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChequeInfo> Cheques { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetInsuranceApplyInfoResp
    {
        [Newtonsoft.Json.JsonProperty("processId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessId { get; set; }

        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId { get; set; }

        [Newtonsoft.Json.JsonProperty("maintainance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Maintainance { get; set; }

        [Newtonsoft.Json.JsonProperty("isWithdraw", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsWithdraw { get; set; }

        [Newtonsoft.Json.JsonProperty("reasonOfWithdraw", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReasonOfWithdraw { get; set; }

        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCase { get; set; }

        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("identityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentityType { get; set; }

        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        [Newtonsoft.Json.JsonProperty("cifNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CifNo { get; set; }

        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationType { get; set; }

        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNo { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BirthDate { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonIdentificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonIdentificationType { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonIDNo { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonName { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonBirthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonBirthDate { get; set; }

        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gender { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel1 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel2 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel3 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel4 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel1 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel2 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel3 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel4 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("contactPhoneNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPhoneNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPerson { get; set; }

        [Newtonsoft.Json.JsonProperty("contactEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerCode { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerName { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerSalesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerSalesCode { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerSales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerSales { get; set; }

        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCode { get; set; }

        [Newtonsoft.Json.JsonProperty("agentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentName { get; set; }

        [Newtonsoft.Json.JsonProperty("salesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesCode { get; set; }

        [Newtonsoft.Json.JsonProperty("salesName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesName { get; set; }

        [Newtonsoft.Json.JsonProperty("sales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sales { get; set; }

        [Newtonsoft.Json.JsonProperty("applicationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceType { get; set; }

        [Newtonsoft.Json.JsonProperty("premiumPayer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PremiumPayer { get; set; }

        [Newtonsoft.Json.JsonProperty("financeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FinanceAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("financeTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FinanceTerms { get; set; }

        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }

        [Newtonsoft.Json.JsonProperty("collateralProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralProperty { get; set; }

        [Newtonsoft.Json.JsonProperty("collateralType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralType { get; set; }

        [Newtonsoft.Json.JsonProperty("subNo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SubNo { get; set; }

        [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Model { get; set; }

        [Newtonsoft.Json.JsonProperty("vehicleBrand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VehicleBrand { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("engineNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EngineNo { get; set; }

        [Newtonsoft.Json.JsonProperty("chassisNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChassisNo { get; set; }

        [Newtonsoft.Json.JsonProperty("manufactureYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufactureYear { get; set; }

        [Newtonsoft.Json.JsonProperty("financeCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinanceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("ncd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Ncd { get; set; }

        [Newtonsoft.Json.JsonProperty("ncdPlateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NcdPlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("windscreenCoverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WindscreenCoverage { get; set; }

        [Newtonsoft.Json.JsonProperty("insuredValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InsuredValue { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalDriver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdditionalDriver { get; set; }

        [Newtonsoft.Json.JsonProperty("personalAccident", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalAccident { get; set; }

        [Newtonsoft.Json.JsonProperty("legalLiabilityOfPassenger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LegalLiabilityOfPassenger { get; set; }

        [Newtonsoft.Json.JsonProperty("legalLiabilityToPassenger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LegalLiabilityToPassenger { get; set; }

        [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Remark { get; set; }

        [Newtonsoft.Json.JsonProperty("notificationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotificationStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("notificationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotificationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("reasonOfReject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReasonOfReject { get; set; }

        [Newtonsoft.Json.JsonProperty("renewFromSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RenewFromSource { get; set; }

        [Newtonsoft.Json.JsonProperty("renewFromInsuranceApplyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RenewFromInsuranceApplyId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuredBlocks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InsuredBlockInfo> InsuredBlocks { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetInsuranceApplyInfoRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetInsuranceApplyInfoResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerTemporaryPayment
    {
        [Newtonsoft.Json.JsonProperty("tempTransferIdKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TempTransferIdKey { get; set; }

        [Newtonsoft.Json.JsonProperty("offsetAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double OffsetAmount { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerPaymentTerms
    {
        [Newtonsoft.Json.JsonProperty("serialNo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SerialNo { get; set; }

        [Newtonsoft.Json.JsonProperty("arDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArDate { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double Amount { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerCheque
    {
        [Newtonsoft.Json.JsonProperty("insuranceForApplyChequeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceForApplyChequeId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceApplyChequeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceApplyChequeId { get; set; }

        [Newtonsoft.Json.JsonProperty("chequeNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ChequeNo { get; set; }

        [Newtonsoft.Json.JsonProperty("chequeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChequeDate { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentBankCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string PaymentBankCode { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentBank", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string PaymentBank { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string PaymentAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("chequeIssuerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ChequeIssuerName { get; set; }

        [Newtonsoft.Json.JsonProperty("chequeAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double ChequeAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("lumpSum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string LumpSum { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerInsuredBlock
    {
        [Newtonsoft.Json.JsonProperty("insuranceForApplyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceForApplyId { get; set; }

        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Year { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string InsuranceNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuredType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string InsuredType { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("quotedNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string QuotedNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InsuranceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("cib", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Cib { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceStartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceExpiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceExpiryDate { get; set; }

        [Newtonsoft.Json.JsonProperty("actualSumInsured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? ActualSumInsured { get; set; }

        [Newtonsoft.Json.JsonProperty("applySumInsured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? ApplySumInsured { get; set; }

        [Newtonsoft.Json.JsonProperty("actualPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? ActualPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("disbursementCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbursementCurrency { get; set; }

        [Newtonsoft.Json.JsonProperty("chargedPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? ChargedPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("grossPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? GrossPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("stampDuty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? StampDuty { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? ServiceTax { get; set; }

        [Newtonsoft.Json.JsonProperty("roadTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? RoadTax { get; set; }

        [Newtonsoft.Json.JsonProperty("roadTaxFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? RoadTaxFee { get; set; }

        [Newtonsoft.Json.JsonProperty("roadTaxFeeExpired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RoadTaxFeeExpired { get; set; }

        [Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? Discount { get; set; }

        [Newtonsoft.Json.JsonProperty("totalTaxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? TotalTaxes { get; set; }

        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string PolicyNo { get; set; }

        [Newtonsoft.Json.JsonProperty("policyIssueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyIssueDate { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerIncentiveRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 99999.9999D)]
        public double? DealerIncentiveRate { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerIncentive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? DealerIncentive { get; set; }

        [Newtonsoft.Json.JsonProperty("commissionSharing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? CommissionSharing { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Status { get; set; }

        [Newtonsoft.Json.JsonProperty("repaymentPlan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string RepaymentPlan { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string PaymentMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("chequeShareSum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ChequeShareSum { get; set; }

        [Newtonsoft.Json.JsonProperty("batchNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchNo { get; set; }

        [Newtonsoft.Json.JsonProperty("temporaryPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CaseOfficerTemporaryPayment> TemporaryPayments { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CaseOfficerPaymentTerms> PaymentTerms { get; set; }

        /// <summary>進件附件</summary>
        [Newtonsoft.Json.JsonProperty("webSubmissionAttachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Attachment> WebSubmissionAttachments { get; set; }

        /// <summary>客戶保單附件</summary>
        [Newtonsoft.Json.JsonProperty("customerInsuranceAttachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Attachment> CustomerInsuranceAttachments { get; set; }

        /// <summary>其他附件</summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Attachment> Attachments { get; set; }

        [Newtonsoft.Json.JsonProperty("cheques", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CaseOfficerCheque> Cheques { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerSaveInsuranceApplyReq
    {
        [Newtonsoft.Json.JsonProperty("isModify", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsModify { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("isWithdraw", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsWithdraw { get; set; }

        [Newtonsoft.Json.JsonProperty("reasonOfWithdraw", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReasonOfWithdraw { get; set; }

        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCase { get; set; }

        [Newtonsoft.Json.JsonProperty("identityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string IdentityType { get; set; }

        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CaseNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("cifNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CifNo { get; set; }

        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string IdentificationType { get; set; }

        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string IdNo { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1500)]
        public string FirstName { get; set; }

        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1500)]
        public string LastName { get; set; }

        /// <summary>BirthDate(自然人) or Date of Incorporation(法人)</summary>
        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BirthDate { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonIdentificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ResponsiblePersonIdentificationType { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ResponsiblePersonIDNo { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ResponsiblePersonName { get; set; }

        /// <summary>法人負責人生日</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonBirthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonBirthDate { get; set; }

        /// <summary>Gender(自然人) or Responsible Person Gender(法人)</summary>
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string Gender { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel1 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel2 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel3 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel4 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string RegisteredAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel1 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel2 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel3 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel4 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string ContactAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("contactPhoneNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ContactPhoneNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contactEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ContactEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string ContactPerson { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DealerCode { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string DealerName { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerSalesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string DealerSalesCode { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerSales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string DealerSales { get; set; }

        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AgentCode { get; set; }

        [Newtonsoft.Json.JsonProperty("agentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string AgentName { get; set; }

        [Newtonsoft.Json.JsonProperty("salesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string SalesCode { get; set; }

        [Newtonsoft.Json.JsonProperty("salesName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string SalesName { get; set; }

        [Newtonsoft.Json.JsonProperty("applicationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string InsuranceType { get; set; }

        [Newtonsoft.Json.JsonProperty("premiumPayer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PremiumPayer { get; set; }

        [Newtonsoft.Json.JsonProperty("financeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? FinanceAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("financeTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FinanceTerms { get; set; }

        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ProductName { get; set; }

        [Newtonsoft.Json.JsonProperty("collateralProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string CollateralProperty { get; set; }

        [Newtonsoft.Json.JsonProperty("collateralType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string CollateralType { get; set; }

        [Newtonsoft.Json.JsonProperty("subNo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SubNo { get; set; }

        [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Model { get; set; }

        [Newtonsoft.Json.JsonProperty("vehicleBrand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string VehicleBrand { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("engineNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string EngineNo { get; set; }

        [Newtonsoft.Json.JsonProperty("chassisNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ChassisNo { get; set; }

        [Newtonsoft.Json.JsonProperty("manufactureYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ManufactureYear { get; set; }

        [Newtonsoft.Json.JsonProperty("financeCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string FinanceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("ncd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 9999.9999D)]
        public double? Ncd { get; set; }

        [Newtonsoft.Json.JsonProperty("ncdPlateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string NcdPlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("windscreenCoverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string WindscreenCoverage { get; set; }

        [Newtonsoft.Json.JsonProperty("insuredValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? InsuredValue { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalDriver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string AdditionalDriver { get; set; }

        [Newtonsoft.Json.JsonProperty("personalAccident", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string PersonalAccident { get; set; }

        [Newtonsoft.Json.JsonProperty("legalLiabilityOfPassenger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string LegalLiabilityOfPassenger { get; set; }

        [Newtonsoft.Json.JsonProperty("legalLiabilityToPassenger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string LegalLiabilityToPassenger { get; set; }

        [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Remark { get; set; }

        [Newtonsoft.Json.JsonProperty("notificationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotificationStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("notificationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotificationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("reasonOfReject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string ReasonOfReject { get; set; }

        [Newtonsoft.Json.JsonProperty("renewFromSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RenewFromSource { get; set; }

        [Newtonsoft.Json.JsonProperty("renewFromInsuranceApplyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RenewFromInsuranceApplyId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceForRenewId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InsuranceForRenewId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuredBlocks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CaseOfficerInsuredBlock> InsuredBlocks { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerInsuranceApplyResp
    {
        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerInsuranceApplyRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseOfficerInsuranceApplyResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerSubmitInsuranceApplyReq
    {
        [Newtonsoft.Json.JsonProperty("isModify", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsModify { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("isWithdraw", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsWithdraw { get; set; }

        [Newtonsoft.Json.JsonProperty("reasonOfWithdraw", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReasonOfWithdraw { get; set; }

        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCase { get; set; }

        [Newtonsoft.Json.JsonProperty("identityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string IdentityType { get; set; }

        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CaseNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("cifNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CifNo { get; set; }

        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string IdentificationType { get; set; }

        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string IdNo { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1500)]
        public string FirstName { get; set; }

        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1500)]
        public string LastName { get; set; }

        /// <summary>BirthDate(自然人) or Date of Incorporation(法人)</summary>
        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BirthDate { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonIdentificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ResponsiblePersonIdentificationType { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ResponsiblePersonIDNo { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ResponsiblePersonName { get; set; }

        /// <summary>法人負責人生日</summary>
        [Newtonsoft.Json.JsonProperty("responsiblePersonBirthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonBirthDate { get; set; }

        /// <summary>Gender(自然人) or Responsible Person Gender(法人)</summary>
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string Gender { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel1 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel2 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel3 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel4 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string RegisteredAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel1 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel2 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel3 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel4 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string ContactAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("contactPhoneNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ContactPhoneNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contactEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ContactEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string ContactPerson { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DealerCode { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string DealerName { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerSalesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string DealerSalesCode { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerSales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string DealerSales { get; set; }

        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AgentCode { get; set; }

        [Newtonsoft.Json.JsonProperty("agentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string AgentName { get; set; }

        [Newtonsoft.Json.JsonProperty("salesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string SalesCode { get; set; }

        [Newtonsoft.Json.JsonProperty("salesName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string SalesName { get; set; }

        [Newtonsoft.Json.JsonProperty("applicationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string InsuranceType { get; set; }

        [Newtonsoft.Json.JsonProperty("premiumPayer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PremiumPayer { get; set; }

        [Newtonsoft.Json.JsonProperty("financeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? FinanceAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("financeTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FinanceTerms { get; set; }

        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ProductName { get; set; }

        [Newtonsoft.Json.JsonProperty("collateralProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string CollateralProperty { get; set; }

        [Newtonsoft.Json.JsonProperty("collateralType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string CollateralType { get; set; }

        [Newtonsoft.Json.JsonProperty("subNo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SubNo { get; set; }

        [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Model { get; set; }

        [Newtonsoft.Json.JsonProperty("vehicleBrand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string VehicleBrand { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("engineNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string EngineNo { get; set; }

        [Newtonsoft.Json.JsonProperty("chassisNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ChassisNo { get; set; }

        [Newtonsoft.Json.JsonProperty("manufactureYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ManufactureYear { get; set; }

        [Newtonsoft.Json.JsonProperty("financeCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string FinanceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("ncd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 9999.9999D)]
        public double? Ncd { get; set; }

        [Newtonsoft.Json.JsonProperty("ncdPlateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string NcdPlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("windscreenCoverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string WindscreenCoverage { get; set; }

        [Newtonsoft.Json.JsonProperty("insuredValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? InsuredValue { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalDriver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string AdditionalDriver { get; set; }

        [Newtonsoft.Json.JsonProperty("personalAccident", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string PersonalAccident { get; set; }

        [Newtonsoft.Json.JsonProperty("legalLiabilityOfPassenger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string LegalLiabilityOfPassenger { get; set; }

        [Newtonsoft.Json.JsonProperty("legalLiabilityToPassenger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string LegalLiabilityToPassenger { get; set; }

        [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Remark { get; set; }

        [Newtonsoft.Json.JsonProperty("notificationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotificationStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("notificationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotificationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("reasonOfReject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string ReasonOfReject { get; set; }

        [Newtonsoft.Json.JsonProperty("renewFromSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RenewFromSource { get; set; }

        [Newtonsoft.Json.JsonProperty("renewFromInsuranceApplyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RenewFromInsuranceApplyId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceForRenewId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InsuranceForRenewId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuredBlocks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CaseOfficerInsuredBlock> InsuredBlocks { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerCancelInsuranceApplyReq
    {
        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerCancelInsuranceApplyResp
    {
        [Newtonsoft.Json.JsonProperty("isSuccess", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSuccess { get; set; }

        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerCancelInsuranceApplyRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseOfficerCancelInsuranceApplyResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ManagerApproveInsuranceApplyReq
    {
        /// <summary>BPM Condition</summary>
        [Newtonsoft.Json.JsonProperty("condition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Condition { get; set; }

        /// <summary>BPM 備註</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ManagerApproveInsuranceApplyResp
    {
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ManagerApproveInsuranceApplyRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ManagerApproveInsuranceApplyResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ToBeProcessingListReq
    {
        /// <summary>契約編號</summary>
        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        /// <summary>保單號碼</summary>
        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        /// <summary>客戶編號</summary>
        [Newtonsoft.Json.JsonProperty("cifNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CifNo { get; set; }

        /// <summary>要保人姓名 / 公司名稱</summary>
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        /// <summary>車牌號碼</summary>
        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ToBeProcessingItem
    {
        [Newtonsoft.Json.JsonProperty("insuranceApplyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceApplyId { get; set; }

        /// <summary>契約編號</summary>
        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        /// <summary>保單號碼</summary>
        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        /// <summary>客戶編號</summary>
        [Newtonsoft.Json.JsonProperty("cifNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CifNo { get; set; }

        /// <summary>要保人姓名 / 公司名稱</summary>
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        /// <summary>車牌號碼</summary>
        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }

        /// <summary>保險公司IDNo</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyIDNo { get; set; }

        /// <summary>保險公司Id</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompany { get; set; }

        /// <summary>保險公司名稱</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyName { get; set; }

        /// <summary>保險起始日</summary>
        [Newtonsoft.Json.JsonProperty("insuranceStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceStartDate { get; set; }

        /// <summary>保險到期日</summary>
        [Newtonsoft.Json.JsonProperty("insuranceExpiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceExpiryDate { get; set; }

        /// <summary>撥款日期</summary>
        [Newtonsoft.Json.JsonProperty("disbmtDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbmtDate { get; set; }

        /// <summary>實際保額</summary>
        [Newtonsoft.Json.JsonProperty("actualPremium", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ActualPremium { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ToBeProcessingListResp
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ToBeProcessingItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ToBeProcessingListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ToBeProcessingListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PolicyProcessingItem
    {
        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        /// <summary>契約編號</summary>
        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        /// <summary>保單號碼</summary>
        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        /// <summary>客戶編號</summary>
        [Newtonsoft.Json.JsonProperty("cifNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CifNo { get; set; }

        /// <summary>要保人姓名 / 公司名稱</summary>
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        /// <summary>車牌號碼</summary>
        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }

        /// <summary>保險公司IDNo</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyIDNo { get; set; }

        /// <summary>保險公司Id</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompany { get; set; }

        /// <summary>保險公司名稱</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyName { get; set; }

        /// <summary>保險起始日</summary>
        [Newtonsoft.Json.JsonProperty("insuranceStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceStartDate { get; set; }

        /// <summary>保險到期日</summary>
        [Newtonsoft.Json.JsonProperty("insuranceExpiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceExpiryDate { get; set; }

        /// <summary>撥款日期</summary>
        [Newtonsoft.Json.JsonProperty("disbmtDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbmtDate { get; set; }

        /// <summary>實際保額</summary>
        [Newtonsoft.Json.JsonProperty("actualPremium", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ActualPremium { get; set; }

        /// <summary>狀態</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PolicyProcessingListResp
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PolicyProcessingItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PolicyProcessingListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PolicyProcessingListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PolicyProcessToDoItem
    {
        /// <summary>保單處理 FormNo</summary>
        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        /// <summary>契約編號</summary>
        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        /// <summary>保單號碼</summary>
        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        /// <summary>客戶編號</summary>
        [Newtonsoft.Json.JsonProperty("cifNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CifNo { get; set; }

        /// <summary>要保人姓名 / 公司名稱</summary>
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        /// <summary>車牌號碼</summary>
        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }

        /// <summary>保險公司IDNo</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyIDNo { get; set; }

        /// <summary>保險公司Id</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompany { get; set; }

        /// <summary>保險公司名稱</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyName { get; set; }

        /// <summary>保險起始日</summary>
        [Newtonsoft.Json.JsonProperty("insuranceStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceStartDate { get; set; }

        /// <summary>保險到期日</summary>
        [Newtonsoft.Json.JsonProperty("insuranceExpiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceExpiryDate { get; set; }

        /// <summary>撥款日期</summary>
        [Newtonsoft.Json.JsonProperty("disbmtDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbmtDate { get; set; }

        /// <summary>實際保額</summary>
        [Newtonsoft.Json.JsonProperty("actualPremium", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ActualPremium { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchPolicyProcessToDoListResp
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PolicyProcessToDoItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchPolicyProcessToDoListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchPolicyProcessToDoListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TemporaryReceiptInfo
    {
        /// <summary>契約編號</summary>
        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        /// <summary>承作幣別</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>收款日期</summary>
        [Newtonsoft.Json.JsonProperty("rcvDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RcvDate { get; set; }

        /// <summary>暫收款 key</summary>
        [Newtonsoft.Json.JsonProperty("tempTransferIdKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TempTransferIdKey { get; set; }

        /// <summary>暫收款餘額</summary>
        [Newtonsoft.Json.JsonProperty("temporaryPaymentBalance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TemporaryPaymentBalance { get; set; }

        /// <summary>註記</summary>
        [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Remark { get; set; }

        /// <summary>是否被勾選</summary>
        [Newtonsoft.Json.JsonProperty("isSelect", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSelect { get; set; }

        /// <summary>是否已無暫收款</summary>
        [Newtonsoft.Json.JsonProperty("removed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Removed { get; set; }

        [Newtonsoft.Json.JsonProperty("transferAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TransferAmount { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TransferTo
    {
        /// <summary>金額</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetToBePolicyProcessInfoResp
    {
        [Newtonsoft.Json.JsonProperty("insuranceApplyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceApplyId { get; set; }

        /// <summary>案件相關</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCase { get; set; }

        /// <summary>保單號碼</summary>
        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyIDNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyName { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNo { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceStartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceExpiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceExpiryDate { get; set; }

        [Newtonsoft.Json.JsonProperty("actualPremium", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ActualPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("actualSumInsured", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ActualSumInsured { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCurrency { get; set; }

        [Newtonsoft.Json.JsonProperty("disbursementCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbursementCurrency { get; set; }

        /// <summary>客戶暫收款明細</summary>
        [Newtonsoft.Json.JsonProperty("temporaryReceipts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TemporaryReceiptInfo> TemporaryReceipts { get; set; }

        [Newtonsoft.Json.JsonProperty("customerAccount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransferTo CustomerAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("chaileaseAccount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransferTo ChaileaseAccount { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetToBePolicyProcessInfoRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetToBePolicyProcessInfoResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetPolicyProcessApplyInfoResp
    {
        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("processId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessId { get; set; }

        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceApplyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceApplyId { get; set; }

        /// <summary>案件相關</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCase { get; set; }

        /// <summary>保單號碼</summary>
        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyIDNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyName { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNo { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceStartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceExpiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceExpiryDate { get; set; }

        [Newtonsoft.Json.JsonProperty("processingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessingType { get; set; }

        [Newtonsoft.Json.JsonProperty("actualPremium", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ActualPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("actualSumInsured", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ActualSumInsured { get; set; }

        [Newtonsoft.Json.JsonProperty("processingReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessingReason { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCurrency { get; set; }

        [Newtonsoft.Json.JsonProperty("disbursementCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbursementCurrency { get; set; }

        /// <summary>客戶暫收款明細</summary>
        [Newtonsoft.Json.JsonProperty("temporaryReceipts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TemporaryReceiptInfo> TemporaryReceipts { get; set; }

        [Newtonsoft.Json.JsonProperty("customerAccount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransferTo CustomerAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("chaileaseAccount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransferTo ChaileaseAccount { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetPolicyProcessApplyInfoRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetPolicyProcessApplyInfoResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerTemporaryReceiptInfo
    {
        [Newtonsoft.Json.JsonProperty("tempTransferIdKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TempTransferIdKey { get; set; }

        [Newtonsoft.Json.JsonProperty("transferAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double TransferAmount { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerTransferTo
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerSaveProcessingReq
    {
        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceApplyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceApplyId { get; set; }

        /// <summary>處理類別</summary>
        [Newtonsoft.Json.JsonProperty("processingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ProcessingType { get; set; }

        /// <summary>處理說明</summary>
        [Newtonsoft.Json.JsonProperty("processingReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string ProcessingReason { get; set; }

        /// <summary>客戶暫收款明細</summary>
        [Newtonsoft.Json.JsonProperty("temporaryReceipts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CaseOfficerTemporaryReceiptInfo> TemporaryReceipts { get; set; }

        [Newtonsoft.Json.JsonProperty("customerAccount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseOfficerTransferTo CustomerAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("chaileaseAccount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseOfficerTransferTo ChaileaseAccount { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerApplyProcessingResp
    {
        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerApplyProcessingRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseOfficerApplyProcessingResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerSubmitProcessingReq
    {
        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceApplyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceApplyId { get; set; }

        /// <summary>處理類別</summary>
        [Newtonsoft.Json.JsonProperty("processingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ProcessingType { get; set; }

        /// <summary>處理說明</summary>
        [Newtonsoft.Json.JsonProperty("processingReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string ProcessingReason { get; set; }

        /// <summary>客戶暫收款明細</summary>
        [Newtonsoft.Json.JsonProperty("temporaryReceipts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CaseOfficerTemporaryReceiptInfo> TemporaryReceipts { get; set; }

        [Newtonsoft.Json.JsonProperty("customerAccount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseOfficerTransferTo CustomerAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("chaileaseAccount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseOfficerTransferTo ChaileaseAccount { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseofficerCancelProcessingReq
    {
        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerCancelProcessingResp
    {
        [Newtonsoft.Json.JsonProperty("isSuccess", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSuccess { get; set; }

        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerCancelProcessingRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseOfficerCancelProcessingResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ManagerApproveProcessingReq
    {
        /// <summary>BPM Condition</summary>
        [Newtonsoft.Json.JsonProperty("condition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Condition { get; set; }

        /// <summary>BPM 備註</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ManagerApproveProcessingResp
    {
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ManagerApproveProcessingRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ManagerApproveProcessingResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QuotationColumnSettingResp
    {
        [Newtonsoft.Json.JsonProperty("display", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Display { get; set; }

        [Newtonsoft.Json.JsonProperty("validate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Validate { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StringQuotationColumnSettingRespDictionaryResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, QuotationColumnSettingResp> Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchDraftQuoteListItem
    {
        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("quotedNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> QuotedNo { get; set; }

        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationType { get; set; }

        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNo { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("quotedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotedDate { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchDraftQuoteListResp
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchDraftQuoteListItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchDraftQuoteListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchDraftQuoteListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchToBeQuotedListItem
    {
        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("batchNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCase { get; set; }

        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationType { get; set; }

        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNo { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchToBeQuotedListResp
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchToBeQuotedListItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchToBeQuotedListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchToBeQuotedListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchQuotationListReq
    {
        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("quoteDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuoteDate { get; set; }

        [Newtonsoft.Json.JsonProperty("quotedNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotedNo { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationType { get; set; }

        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNo { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchQuotationListItem
    {
        [Newtonsoft.Json.JsonProperty("quotedNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotedNo { get; set; }

        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("quotedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationType { get; set; }

        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNo { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchQuotationListResp
    {
        [Newtonsoft.Json.JsonProperty("quotations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchQuotationListItem> Quotations { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchQuotationListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchQuotationListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchQuotationEditListItem
    {
        [Newtonsoft.Json.JsonProperty("quotedNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotedNo { get; set; }

        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("quotedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationType { get; set; }

        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNo { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchQuotationEditListResp
    {
        [Newtonsoft.Json.JsonProperty("quotations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchQuotationEditListItem> Quotations { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchQuotationEditListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchQuotationEditListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QueryQuotation
    {
        [Newtonsoft.Json.JsonProperty("insuranceForQuoteId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceForQuoteId { get; set; }

        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Year { get; set; }

        [Newtonsoft.Json.JsonProperty("quotedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("quotedNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotedNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InsuranceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceStartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("actualSumInsured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ActualSumInsured { get; set; }

        [Newtonsoft.Json.JsonProperty("applySumInsured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ApplySumInsured { get; set; }

        [Newtonsoft.Json.JsonProperty("actualPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ActualPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("disbursementCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbursementCurrency { get; set; }

        [Newtonsoft.Json.JsonProperty("chargedPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ChargedPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("grossPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("stampDuty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StampDuty { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ServiceTax { get; set; }

        [Newtonsoft.Json.JsonProperty("roadTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RoadTax { get; set; }

        [Newtonsoft.Json.JsonProperty("roadTaxFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RoadTaxFee { get; set; }

        [Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Discount { get; set; }

        [Newtonsoft.Json.JsonProperty("totalTaxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalTaxes { get; set; }

        [Newtonsoft.Json.JsonProperty("eQuotationLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EQuotationLink { get; set; }

        [Newtonsoft.Json.JsonProperty("repaymentPlan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepaymentPlan { get; set; }

        [Newtonsoft.Json.JsonProperty("batchNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchNo { get; set; }

        /// <summary>進件參考附件(僅唯讀，不可新增刪除)</summary>
        [Newtonsoft.Json.JsonProperty("webSubmissionAttachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Attachment> WebSubmissionAttachments { get; set; }

        /// <summary>客戶報價單(限制只能上傳一個PDF檔，送出後拋至進件web)</summary>
        [Newtonsoft.Json.JsonProperty("customerQuotedAttachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Attachment> CustomerQuotedAttachments { get; set; }

        /// <summary>報價試算表(限制只能上傳一個Excel檔，需解析金額至對應欄位)</summary>
        [Newtonsoft.Json.JsonProperty("quotedSpreadSheetAttachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Attachment> QuotedSpreadSheetAttachments { get; set; }

        /// <summary>其他(可任意新增檔案，不限制檔案)</summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Attachment> Attachments { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QueryQuotationInfoByFormNoResp
    {
        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("isModify", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsModify { get; set; }

        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCase { get; set; }

        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("identityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentityType { get; set; }

        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("cifNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CifNo { get; set; }

        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationType { get; set; }

        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNo { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonName { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonIdentificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonIdentificationType { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonIDNo { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonBirthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonBirthDate { get; set; }

        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gender { get; set; }

        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BirthDate { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel1 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel2 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel3 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel4 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel1 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel2 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel3 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel4 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("contactPhoneNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPhoneNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contactEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPerson { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerCode { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerName { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerSalesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerSalesCode { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerSales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerSales { get; set; }

        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCode { get; set; }

        [Newtonsoft.Json.JsonProperty("agentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentName { get; set; }

        [Newtonsoft.Json.JsonProperty("salesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesCode { get; set; }

        [Newtonsoft.Json.JsonProperty("salesName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesName { get; set; }

        [Newtonsoft.Json.JsonProperty("sales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sales { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceType { get; set; }

        [Newtonsoft.Json.JsonProperty("financeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FinanceAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("financeTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FinanceTerms { get; set; }

        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }

        [Newtonsoft.Json.JsonProperty("collateralProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralProperty { get; set; }

        [Newtonsoft.Json.JsonProperty("collateralType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralType { get; set; }

        [Newtonsoft.Json.JsonProperty("subNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubNo { get; set; }

        [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Model { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("manufactureYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufactureYear { get; set; }

        [Newtonsoft.Json.JsonProperty("vehicleBrand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VehicleBrand { get; set; }

        [Newtonsoft.Json.JsonProperty("engineNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EngineNo { get; set; }

        [Newtonsoft.Json.JsonProperty("chassisNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChassisNo { get; set; }

        [Newtonsoft.Json.JsonProperty("financeCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinanceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("ncd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Ncd { get; set; }

        [Newtonsoft.Json.JsonProperty("ncdPlateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NcdPlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("windscreenCoverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WindscreenCoverage { get; set; }

        [Newtonsoft.Json.JsonProperty("valueToInsure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ValueToInsure { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalDriver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdditionalDriver { get; set; }

        [Newtonsoft.Json.JsonProperty("personalAccident", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalAccident { get; set; }

        [Newtonsoft.Json.JsonProperty("legalLiabilityOfPassenger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LegalLiabilityOfPassenger { get; set; }

        [Newtonsoft.Json.JsonProperty("legalLiabilityToPassenger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LegalLiabilityToPassenger { get; set; }

        [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Remark { get; set; }

        [Newtonsoft.Json.JsonProperty("customerRemark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerRemark { get; set; }

        [Newtonsoft.Json.JsonProperty("customerServicesRemark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerServicesRemark { get; set; }

        [Newtonsoft.Json.JsonProperty("quotations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryQuotation> Quotations { get; set; }

        [Newtonsoft.Json.JsonProperty("applicationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("valid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Valid { get; set; }

        [Newtonsoft.Json.JsonProperty("fromSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FromSource FromSource { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QueryQuotationInfoByFormNoRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueryQuotationInfoByFormNoResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QueryQuotationInfoByQuotedNoResp
    {
        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("isModify", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsModify { get; set; }

        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCase { get; set; }

        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("identityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentityType { get; set; }

        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("cifNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CifNo { get; set; }

        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationType { get; set; }

        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNo { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonName { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonIdentificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonIdentificationType { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonIDNo { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonBirthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonBirthDate { get; set; }

        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gender { get; set; }

        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BirthDate { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel1 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel2 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel3 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel4 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel1 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel2 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel3 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel4 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("contactPhoneNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPhoneNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contactEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPerson { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerCode { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerName { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerSalesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerSalesCode { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerSales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerSales { get; set; }

        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCode { get; set; }

        [Newtonsoft.Json.JsonProperty("agentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentName { get; set; }

        [Newtonsoft.Json.JsonProperty("salesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesCode { get; set; }

        [Newtonsoft.Json.JsonProperty("salesName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesName { get; set; }

        [Newtonsoft.Json.JsonProperty("sales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sales { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceType { get; set; }

        [Newtonsoft.Json.JsonProperty("financeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FinanceAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("financeTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FinanceTerms { get; set; }

        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }

        [Newtonsoft.Json.JsonProperty("collateralProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralProperty { get; set; }

        [Newtonsoft.Json.JsonProperty("collateralType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralType { get; set; }

        [Newtonsoft.Json.JsonProperty("subNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubNo { get; set; }

        [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Model { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("manufactureYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufactureYear { get; set; }

        [Newtonsoft.Json.JsonProperty("vehicleBrand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VehicleBrand { get; set; }

        [Newtonsoft.Json.JsonProperty("engineNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EngineNo { get; set; }

        [Newtonsoft.Json.JsonProperty("chassisNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChassisNo { get; set; }

        [Newtonsoft.Json.JsonProperty("financeCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinanceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("ncd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Ncd { get; set; }

        [Newtonsoft.Json.JsonProperty("ncdPlateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NcdPlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("windscreenCoverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WindscreenCoverage { get; set; }

        [Newtonsoft.Json.JsonProperty("valueToInsure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ValueToInsure { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalDriver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdditionalDriver { get; set; }

        [Newtonsoft.Json.JsonProperty("personalAccident", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalAccident { get; set; }

        [Newtonsoft.Json.JsonProperty("legalLiabilityOfPassenger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LegalLiabilityOfPassenger { get; set; }

        [Newtonsoft.Json.JsonProperty("legalLiabilityToPassenger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LegalLiabilityToPassenger { get; set; }

        [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Remark { get; set; }

        [Newtonsoft.Json.JsonProperty("customerRemark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerRemark { get; set; }

        [Newtonsoft.Json.JsonProperty("customerServicesRemark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerServicesRemark { get; set; }

        [Newtonsoft.Json.JsonProperty("quotations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryQuotation> Quotations { get; set; }

        [Newtonsoft.Json.JsonProperty("applicationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("valid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Valid { get; set; }

        [Newtonsoft.Json.JsonProperty("fromSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FromSource FromSource { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QueryQuotationInfoByQuotedNoRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueryQuotationInfoByQuotedNoResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Quotation
    {
        [Newtonsoft.Json.JsonProperty("insuranceForQuoteId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceForQuoteId { get; set; }

        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Year { get; set; }

        [Newtonsoft.Json.JsonProperty("quotedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("quotedNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string QuotedNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InsuranceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceStartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("actualSumInsured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? ActualSumInsured { get; set; }

        [Newtonsoft.Json.JsonProperty("applySumInsured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? ApplySumInsured { get; set; }

        [Newtonsoft.Json.JsonProperty("actualPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? ActualPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("chargedPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ChargedPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("grossPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("stampDuty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? StampDuty { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? ServiceTax { get; set; }

        [Newtonsoft.Json.JsonProperty("roadTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? RoadTax { get; set; }

        [Newtonsoft.Json.JsonProperty("roadTaxFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? RoadTaxFee { get; set; }

        [Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? Discount { get; set; }

        [Newtonsoft.Json.JsonProperty("totalTaxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? TotalTaxes { get; set; }

        [Newtonsoft.Json.JsonProperty("eQuotationLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string EQuotationLink { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("disbursementCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbursementCurrency { get; set; }

        [Newtonsoft.Json.JsonProperty("repaymentPlan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepaymentPlan { get; set; }

        [Newtonsoft.Json.JsonProperty("batchNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchNo { get; set; }

        /// <summary>進件參考附件(僅唯讀，不可新增刪除)</summary>
        [Newtonsoft.Json.JsonProperty("webSubmissionAttachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Attachment> WebSubmissionAttachments { get; set; }

        /// <summary>客戶報價單(限制只能上傳一個PDF檔，送出後拋至進件web)</summary>
        [Newtonsoft.Json.JsonProperty("customerQuotedAttachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Attachment> CustomerQuotedAttachments { get; set; }

        /// <summary>報價試算表(限制只能上傳一個Excel檔，需解析金額至對應欄位)</summary>
        [Newtonsoft.Json.JsonProperty("quotedSpreadSheetAttachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Attachment> QuotedSpreadSheetAttachments { get; set; }

        /// <summary>其他(可任意新增檔案，不限制檔案)</summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Attachment> Attachments { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerSaveQuoteReq
    {
        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("isModify", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsModify { get; set; }

        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCase { get; set; }

        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CaseNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("identityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string IdentityType { get; set; }

        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1500)]
        public string FirstName { get; set; }

        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1500)]
        public string LastName { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("cifNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CifNo { get; set; }

        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string IdentificationType { get; set; }

        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string IdNo { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ResponsiblePersonName { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonIdentificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ResponsiblePersonIdentificationType { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ResponsiblePersonIDNo { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonBirthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonBirthDate { get; set; }

        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string Gender { get; set; }

        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BirthDate { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel1 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel2 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel3 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel4 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string RegisteredAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel1 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel2 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel3 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel4 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string ContactAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("contactPhoneNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ContactPhoneNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contactEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ContactEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string ContactPerson { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DealerCode { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string DealerName { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerSalesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string DealerSalesCode { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerSales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string DealerSales { get; set; }

        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AgentCode { get; set; }

        [Newtonsoft.Json.JsonProperty("agentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string AgentName { get; set; }

        [Newtonsoft.Json.JsonProperty("salesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string SalesCode { get; set; }

        [Newtonsoft.Json.JsonProperty("salesName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string SalesName { get; set; }

        [Newtonsoft.Json.JsonProperty("sales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Sales { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string InsuranceType { get; set; }

        [Newtonsoft.Json.JsonProperty("financeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? FinanceAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("financeTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FinanceTerms { get; set; }

        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ProductName { get; set; }

        [Newtonsoft.Json.JsonProperty("collateralProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralProperty { get; set; }

        [Newtonsoft.Json.JsonProperty("collateralType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralType { get; set; }

        [Newtonsoft.Json.JsonProperty("subNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubNo { get; set; }

        [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Model { get; set; }

        [Newtonsoft.Json.JsonProperty("vehicleBrand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string VehicleBrand { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("engineNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string EngineNo { get; set; }

        [Newtonsoft.Json.JsonProperty("chassisNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ChassisNo { get; set; }

        [Newtonsoft.Json.JsonProperty("manufactureYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ManufactureYear { get; set; }

        [Newtonsoft.Json.JsonProperty("financeCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string FinanceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("ncd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 9999.9999D)]
        public double? Ncd { get; set; }

        [Newtonsoft.Json.JsonProperty("ncdPlateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string NcdPlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("windscreenCoverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WindscreenCoverage { get; set; }

        [Newtonsoft.Json.JsonProperty("valueToInsure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? ValueToInsure { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalDriver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdditionalDriver { get; set; }

        [Newtonsoft.Json.JsonProperty("personalAccident", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalAccident { get; set; }

        [Newtonsoft.Json.JsonProperty("legalLiabilityOfPassenger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LegalLiabilityOfPassenger { get; set; }

        [Newtonsoft.Json.JsonProperty("legalLiabilityToPassenger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LegalLiabilityToPassenger { get; set; }

        [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Remark { get; set; }

        [Newtonsoft.Json.JsonProperty("customerRemark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerRemark { get; set; }

        [Newtonsoft.Json.JsonProperty("customerServicesRemark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerServicesRemark { get; set; }

        [Newtonsoft.Json.JsonProperty("quotations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Quotation> Quotations { get; set; }

        [Newtonsoft.Json.JsonProperty("applicationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("valid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Valid { get; set; }

        [Newtonsoft.Json.JsonProperty("fromSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FromSource FromSource { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerApplyQuoteResp
    {
        [Newtonsoft.Json.JsonProperty("isSuccess", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSuccess { get; set; }

        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerApplyQuoteRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseOfficerApplyQuoteResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerSubmitQuoteReq
    {
        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("isModify", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsModify { get; set; }

        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCase { get; set; }

        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CaseNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("identityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string IdentityType { get; set; }

        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1500)]
        public string FirstName { get; set; }

        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1500)]
        public string LastName { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("cifNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CifNo { get; set; }

        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string IdentificationType { get; set; }

        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string IdNo { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ResponsiblePersonName { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonIdentificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ResponsiblePersonIdentificationType { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ResponsiblePersonIDNo { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonBirthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonBirthDate { get; set; }

        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string Gender { get; set; }

        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BirthDate { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel1 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel2 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel3 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RegisteredAddressLevel4 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string RegisteredAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel1 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel2 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel3 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ContactAddressLevel4 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string ContactAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("contactPhoneNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ContactPhoneNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contactEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ContactEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string ContactPerson { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DealerCode { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string DealerName { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerSalesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string DealerSalesCode { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerSales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string DealerSales { get; set; }

        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AgentCode { get; set; }

        [Newtonsoft.Json.JsonProperty("agentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string AgentName { get; set; }

        [Newtonsoft.Json.JsonProperty("salesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string SalesCode { get; set; }

        [Newtonsoft.Json.JsonProperty("salesName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string SalesName { get; set; }

        [Newtonsoft.Json.JsonProperty("sales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Sales { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string InsuranceType { get; set; }

        [Newtonsoft.Json.JsonProperty("financeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? FinanceAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("financeTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FinanceTerms { get; set; }

        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ProductName { get; set; }

        [Newtonsoft.Json.JsonProperty("collateralProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralProperty { get; set; }

        [Newtonsoft.Json.JsonProperty("collateralType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralType { get; set; }

        [Newtonsoft.Json.JsonProperty("subNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubNo { get; set; }

        [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Model { get; set; }

        [Newtonsoft.Json.JsonProperty("vehicleBrand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string VehicleBrand { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("engineNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string EngineNo { get; set; }

        [Newtonsoft.Json.JsonProperty("chassisNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ChassisNo { get; set; }

        [Newtonsoft.Json.JsonProperty("manufactureYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ManufactureYear { get; set; }

        [Newtonsoft.Json.JsonProperty("financeCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string FinanceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("ncd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 9999.9999D)]
        public double? Ncd { get; set; }

        [Newtonsoft.Json.JsonProperty("ncdPlateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string NcdPlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("windscreenCoverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WindscreenCoverage { get; set; }

        [Newtonsoft.Json.JsonProperty("valueToInsure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000000D)]
        public double? ValueToInsure { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalDriver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdditionalDriver { get; set; }

        [Newtonsoft.Json.JsonProperty("personalAccident", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalAccident { get; set; }

        [Newtonsoft.Json.JsonProperty("legalLiabilityOfPassenger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LegalLiabilityOfPassenger { get; set; }

        [Newtonsoft.Json.JsonProperty("legalLiabilityToPassenger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LegalLiabilityToPassenger { get; set; }

        [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Remark { get; set; }

        [Newtonsoft.Json.JsonProperty("customerRemark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerRemark { get; set; }

        [Newtonsoft.Json.JsonProperty("customerServicesRemark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerServicesRemark { get; set; }

        [Newtonsoft.Json.JsonProperty("quotations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Quotation> Quotations { get; set; }

        [Newtonsoft.Json.JsonProperty("applicationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("valid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Valid { get; set; }

        [Newtonsoft.Json.JsonProperty("fromSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FromSource FromSource { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchQuotationListFromApplyReq
    {
        [Newtonsoft.Json.JsonProperty("isCaseRelated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCaseRelated { get; set; }

        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceType { get; set; }

        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNo { get; set; }

        [Newtonsoft.Json.JsonProperty("collateralType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralType { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchQuotationListFromApplyItem
    {
        [Newtonsoft.Json.JsonProperty("quotedNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotedNo { get; set; }

        [Newtonsoft.Json.JsonProperty("quotedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceStartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("actualSumInsured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ActualSumInsured { get; set; }

        [Newtonsoft.Json.JsonProperty("applySumInsured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ApplySumInsured { get; set; }

        [Newtonsoft.Json.JsonProperty("chargedPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ChargedPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("grossPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("actualPremium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ActualPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("totalTaxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalTaxes { get; set; }

        [Newtonsoft.Json.JsonProperty("stampDuty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StampDuty { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ServiceTax { get; set; }

        [Newtonsoft.Json.JsonProperty("roadTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RoadTax { get; set; }

        [Newtonsoft.Json.JsonProperty("roadTaxFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RoadTaxFee { get; set; }

        [Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Discount { get; set; }

        [Newtonsoft.Json.JsonProperty("batchNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchNo { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("repaymentPlan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepaymentPlan { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchQuotationListFromApplyResp
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchQuotationListFromApplyItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchQuotationListFromApplyRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchQuotationListFromApplyResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchQuotationAttachReq
    {
        /// <summary>報價單號</summary>
        [Newtonsoft.Json.JsonProperty("quotedNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuotedNo { get; set; }

        /// <summary>附件類別
        /// 1=進件參考附件、2=客戶報價單、3=報價試算表、4=其他</summary>
        [Newtonsoft.Json.JsonProperty("attachmentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AttachmentType { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Attachments
    {
        [Newtonsoft.Json.JsonProperty("fileGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileGuid { get; set; }

        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchQuotationAttachResp
    {
        [Newtonsoft.Json.JsonProperty("attachs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Attachments> Attachs { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchQuotationAttachRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchQuotationAttachResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ToBeRebateListReq
    {
        /// <summary>保險公司</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompany { get; set; }

        /// <summary>保單號碼</summary>
        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        /// <summary>合約編號</summary>
        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        /// <summary>投保編號</summary>
        [Newtonsoft.Json.JsonProperty("insuranceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceNo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ToBeRebateItem
    {
        /// <summary>可勾選</summary>
        [Newtonsoft.Json.JsonProperty("isEnable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsEnable { get; set; }

        /// <summary>已核銷(含部分核銷)</summary>
        [Newtonsoft.Json.JsonProperty("isWriteOff", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsWriteOff { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCommissionRebateReceivableId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCommissionRebateReceivableId { get; set; }

        /// <summary>保單號碼</summary>
        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        /// <summary>投保日期</summary>
        [Newtonsoft.Json.JsonProperty("insuranceApplyDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceApplyDate { get; set; }

        /// <summary>撥款日期</summary>
        [Newtonsoft.Json.JsonProperty("disbursementDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbursementDate { get; set; }

        /// <summary>保險公司ID</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompany { get; set; }

        /// <summary>保險公司名稱</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyName { get; set; }

        [Newtonsoft.Json.JsonProperty("actualPremium", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ActualPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("commissionSharing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double CommissionSharing { get; set; }

        [Newtonsoft.Json.JsonProperty("disbursementCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbursementCurrency { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceNo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ToBeRebateListResp
    {
        [Newtonsoft.Json.JsonProperty("toBeRebateItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ToBeRebateItem> ToBeRebateItems { get; set; }

        /// <summary>客戶暫收款明細</summary>
        [Newtonsoft.Json.JsonProperty("temporaryReceipts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TemporaryReceiptInfo> TemporaryReceipts { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ToBeRebateListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ToBeRebateListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchRebateListReq
    {
        /// <summary>保險公司</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompany { get; set; }

        /// <summary>保單號碼</summary>
        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        /// <summary>合約編號</summary>
        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        /// <summary>投保編號</summary>
        [Newtonsoft.Json.JsonProperty("insuranceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceNo { get; set; }

        [Newtonsoft.Json.JsonProperty("commissionRebateApplyStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommissionRebateApplyStartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("commissionRebateApplyEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommissionRebateApplyEndDate { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchRebateItem
    {
        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceApplyDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceApplyDate { get; set; }

        [Newtonsoft.Json.JsonProperty("disbursementDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbursementDate { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyName { get; set; }

        [Newtonsoft.Json.JsonProperty("commissionSharing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CommissionSharing { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceNo { get; set; }

        [Newtonsoft.Json.JsonProperty("commissionRebateApplyDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommissionRebateApplyDate { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("disbursementCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbursementCurrency { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchRebateListResp
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchRebateItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchRebateListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchRebateListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RebateToDoItem
    {
        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("commissionRebateApplyDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommissionRebateApplyDate { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyName { get; set; }

        [Newtonsoft.Json.JsonProperty("totalCommissionSharing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalCommissionSharing { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchRebateToDoListResp
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RebateToDoItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchRebateToDoListRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchRebateToDoListResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RebateItem
    {
        [Newtonsoft.Json.JsonProperty("isEnable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsEnable { get; set; }

        /// <summary>可勾選</summary>
        [Newtonsoft.Json.JsonProperty("isSelect", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSelect { get; set; }

        /// <summary>已核銷(含部分核銷)</summary>
        [Newtonsoft.Json.JsonProperty("isWriteOff", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsWriteOff { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCommissionRebateReceivableId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCommissionRebateReceivableId { get; set; }

        /// <summary>保單號碼</summary>
        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        /// <summary>投保日期</summary>
        [Newtonsoft.Json.JsonProperty("insuranceApplyDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceApplyDate { get; set; }

        /// <summary>撥款日期</summary>
        [Newtonsoft.Json.JsonProperty("disbursementDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbursementDate { get; set; }

        /// <summary>保險公司ID</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompany { get; set; }

        /// <summary>保險公司名稱</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyName { get; set; }

        [Newtonsoft.Json.JsonProperty("actualPremium", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ActualPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("commissionSharing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double CommissionSharing { get; set; }

        [Newtonsoft.Json.JsonProperty("disbursementCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbursementCurrency { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceNo { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetRebateApplyInfoResp
    {
        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceNo { get; set; }

        [Newtonsoft.Json.JsonProperty("processId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessId { get; set; }

        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId { get; set; }

        [Newtonsoft.Json.JsonProperty("commissionRebateItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RebateItem> CommissionRebateItems { get; set; }

        /// <summary>客戶暫收款明細</summary>
        [Newtonsoft.Json.JsonProperty("temporaryReceipts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TemporaryReceiptInfo> TemporaryReceipts { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetRebateApplyInfoRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetRebateApplyInfoResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RebateItemReadOnly
    {
        /// <summary>合約編號</summary>
        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        /// <summary>申請日期</summary>
        [Newtonsoft.Json.JsonProperty("applicationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationDate { get; set; }

        /// <summary>保單號碼</summary>
        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        [Newtonsoft.Json.JsonProperty("deduct", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deduct { get; set; }

        /// <summary>保險公司名稱</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompanyName { get; set; }

        [Newtonsoft.Json.JsonProperty("actualPremium", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ActualPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("commissionSharing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double CommissionSharing { get; set; }

        /// <summary>撥款日期</summary>
        [Newtonsoft.Json.JsonProperty("disbursementDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisbursementDate { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetRebateApplyReadOnlyInfoResp
    {
        [Newtonsoft.Json.JsonProperty("commissionRebateItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RebateItemReadOnly> CommissionRebateItems { get; set; }

        /// <summary>客戶暫收款明細</summary>
        [Newtonsoft.Json.JsonProperty("temporaryReceipts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TemporaryReceiptInfo> TemporaryReceipts { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetRebateApplyReadOnlyInfoRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetRebateApplyReadOnlyInfoResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RebateCaseItem
    {
        [Newtonsoft.Json.JsonProperty("insuranceCommissionRebateReceivableId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCommissionRebateReceivableId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerSaveRebateCaseReq
    {
        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        /// <summary>保險公司</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompany { get; set; }

        /// <summary>保單號碼</summary>
        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        /// <summary>合約編號</summary>
        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        /// <summary>投保編號</summary>
        [Newtonsoft.Json.JsonProperty("insuranceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceNo { get; set; }

        [Newtonsoft.Json.JsonProperty("rebateCaseItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RebateCaseItem> RebateCaseItems { get; set; }

        [Newtonsoft.Json.JsonProperty("temporaryReceipts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CaseOfficerTemporaryPayment> TemporaryReceipts { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerApplyRebateCaseResp
    {
        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerApplyRebateCaseRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseOfficerApplyRebateCaseResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseOfficerSubmitRebateCaseReq
    {
        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        /// <summary>保險公司</summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceCompany { get; set; }

        /// <summary>保單號碼</summary>
        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        /// <summary>合約編號</summary>
        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        /// <summary>投保編號</summary>
        [Newtonsoft.Json.JsonProperty("insuranceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceNo { get; set; }

        [Newtonsoft.Json.JsonProperty("rebateCaseItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RebateCaseItem> RebateCaseItems { get; set; }

        [Newtonsoft.Json.JsonProperty("temporaryReceipts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CaseOfficerTemporaryPayment> TemporaryReceipts { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseofficerCancelRebateCaseReq
    {
        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseofficerCancelRebateCaseResp
    {
        [Newtonsoft.Json.JsonProperty("isSuccess", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSuccess { get; set; }

        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseofficerCancelRebateCaseRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CaseofficerCancelRebateCaseResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ManagerApproveRebateCaseReq
    {
        /// <summary>BPM Condition</summary>
        [Newtonsoft.Json.JsonProperty("condition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Condition { get; set; }

        /// <summary>BPM 備註</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ManagerApproveRebateCaseResp
    {
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ManagerApproveRebateCaseRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ManagerApproveRebateCaseResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ToBeRenewReq
    {
        [Newtonsoft.Json.JsonProperty("insuranceExpiryStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceExpiryStartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceExpiryEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceExpiryEndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("roadTaxExpiryStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RoadTaxExpiryStartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("roadTaxExpiryEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RoadTaxExpiryEndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("createStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreateStartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("createEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreateEndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }

        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationType { get; set; }

        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNo { get; set; }

        [Newtonsoft.Json.JsonProperty("cifNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CifNo { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("customerService", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerService { get; set; }

        [Newtonsoft.Json.JsonProperty("applicationStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationStartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("applicationEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationEndDate { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ToBeRenewItem
    {
        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("cifNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CifNo { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("phoneNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNo { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("policyNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNo { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceStartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceExpiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceExpiryDate { get; set; }

        [Newtonsoft.Json.JsonProperty("actualSumInsured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ActualSumInsured { get; set; }

        [Newtonsoft.Json.JsonProperty("roadTaxFeeExpired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RoadTaxFeeExpired { get; set; }

        [Newtonsoft.Json.JsonProperty("buyFromChailease", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuyFromChailease { get; set; }

        [Newtonsoft.Json.JsonProperty("notificationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotificationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Remark { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        [Newtonsoft.Json.JsonProperty("customerService", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerService { get; set; }

        [Newtonsoft.Json.JsonProperty("fromSourceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FromSourceName { get; set; }

        [Newtonsoft.Json.JsonProperty("fromSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FromSource { get; set; }

        [Newtonsoft.Json.JsonProperty("createTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreateTime { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ToBeRenewResp
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ToBeRenewItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ToBeRenewRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ToBeRenewResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetInsuranceForRenewInfoResp
    {
        [Newtonsoft.Json.JsonProperty("processId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessId { get; set; }

        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId { get; set; }

        [Newtonsoft.Json.JsonProperty("maintainance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Maintainance { get; set; }

        [Newtonsoft.Json.JsonProperty("isWithdraw", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsWithdraw { get; set; }

        [Newtonsoft.Json.JsonProperty("reasonOfWithdraw", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReasonOfWithdraw { get; set; }

        [Newtonsoft.Json.JsonProperty("formNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormNo { get; set; }

        [Newtonsoft.Json.JsonProperty("masterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MasterId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceCase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCase { get; set; }

        [Newtonsoft.Json.JsonProperty("caseNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contractNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNo { get; set; }

        [Newtonsoft.Json.JsonProperty("identityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentityType { get; set; }

        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        [Newtonsoft.Json.JsonProperty("cifNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CifNo { get; set; }

        [Newtonsoft.Json.JsonProperty("identificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationType { get; set; }

        [Newtonsoft.Json.JsonProperty("idNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNo { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BirthDate { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonIdentificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonIdentificationType { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonIDNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonIDNo { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonName { get; set; }

        [Newtonsoft.Json.JsonProperty("responsiblePersonBirthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsiblePersonBirthDate { get; set; }

        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gender { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel1 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel2 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel3 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddressLevel4 { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisteredAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel1 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel2 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel3 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddressLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddressLevel4 { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("contactPhoneNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPhoneNo { get; set; }

        [Newtonsoft.Json.JsonProperty("contactEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerCode { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerName { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerSalesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerSalesCode { get; set; }

        [Newtonsoft.Json.JsonProperty("dealerSales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DealerSales { get; set; }

        [Newtonsoft.Json.JsonProperty("agentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentCode { get; set; }

        [Newtonsoft.Json.JsonProperty("agentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentName { get; set; }

        [Newtonsoft.Json.JsonProperty("salesCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesCode { get; set; }

        [Newtonsoft.Json.JsonProperty("salesName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesName { get; set; }

        [Newtonsoft.Json.JsonProperty("sales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sales { get; set; }

        [Newtonsoft.Json.JsonProperty("applicationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceType { get; set; }

        [Newtonsoft.Json.JsonProperty("premiumPayer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PremiumPayer { get; set; }

        [Newtonsoft.Json.JsonProperty("financeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FinanceAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("financeTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FinanceTerms { get; set; }

        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }

        [Newtonsoft.Json.JsonProperty("collateralProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralProperty { get; set; }

        [Newtonsoft.Json.JsonProperty("collateralType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollateralType { get; set; }

        [Newtonsoft.Json.JsonProperty("subNo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SubNo { get; set; }

        [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Model { get; set; }

        [Newtonsoft.Json.JsonProperty("vehicleBrand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VehicleBrand { get; set; }

        [Newtonsoft.Json.JsonProperty("plateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("engineNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EngineNo { get; set; }

        [Newtonsoft.Json.JsonProperty("chassisNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChassisNo { get; set; }

        [Newtonsoft.Json.JsonProperty("manufactureYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufactureYear { get; set; }

        [Newtonsoft.Json.JsonProperty("financeCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinanceCompany { get; set; }

        [Newtonsoft.Json.JsonProperty("ncd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Ncd { get; set; }

        [Newtonsoft.Json.JsonProperty("ncdPlateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NcdPlateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("windscreenCoverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WindscreenCoverage { get; set; }

        [Newtonsoft.Json.JsonProperty("insuredValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InsuredValue { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalDriver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdditionalDriver { get; set; }

        [Newtonsoft.Json.JsonProperty("personalAccident", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalAccident { get; set; }

        [Newtonsoft.Json.JsonProperty("legalLiabilityOfPassenger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LegalLiabilityOfPassenger { get; set; }

        [Newtonsoft.Json.JsonProperty("legalLiabilityToPassenger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LegalLiabilityToPassenger { get; set; }

        [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Remark { get; set; }

        [Newtonsoft.Json.JsonProperty("notificationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotificationStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("notificationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotificationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("reasonOfReject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReasonOfReject { get; set; }

        [Newtonsoft.Json.JsonProperty("renewFromSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RenewFromSource { get; set; }

        [Newtonsoft.Json.JsonProperty("renewFromInsuranceApplyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RenewFromInsuranceApplyId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuranceForRenewId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceForRenewId { get; set; }

        [Newtonsoft.Json.JsonProperty("insuredBlocks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InsuredBlockInfo> InsuredBlocks { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetInsuranceForRenewInfoRespResponseResult
    {
        [Newtonsoft.Json.JsonProperty("rtnCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RtnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetInsuranceForRenewInfoResp Data { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateStatusToRejectReq
    {
        [Newtonsoft.Json.JsonProperty("insuranceForRenewId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InsuranceForRenewId { get; set; }

        [Newtonsoft.Json.JsonProperty("renewFromSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RenewFromSource { get; set; }

        [Newtonsoft.Json.JsonProperty("notificationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotificationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("reasonOfReject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReasonOfReject { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108